[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cachetoolz"
version = "0.4.0"
description = "This library provides a decorator for caching functions"
license = "GPL-3.0-or-later"
authors = [{ name = "taconi", email = "igor.taconi@protonmail.com" }]
maintainers = [{ name = "taconi", email = "igor.taconi@protonmail.com" }]
readme = "README.md"
keywords = ["python", "cache", "async", "redis", "mongo"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Topic :: Utilities",
]

requires-python = ">=3.8"

dependencies = [
  "funcy>=2.0",
  "nest-asyncio>=1.5.6",
  "charset-normalizer>=3.2.0",
  "typing-extensions>=4.7.1 ; python_version < '3.10'",
  "get-annotations>=0.1.2 ; python_version < '3.10'",
]

[project.optional-dependencies]
redis = ["redis>=5.0.1"]
mongo = ["motor>=3.3.2", "pymongo>=4.6.2"]

[project.urls]
Homepage = "https://codeberg.org/taconi/cachetoolz/#cache-toolz"
Changelog = "https://cachetoolz.readthedocs.io/changelog"
Contributing = "https://cachetoolz.readthedocs.io/contributing"
Documentation = "https://cachetoolz.readthedocs.io"
"Issue Tracker" = "https://codeberg.org/taconi/cachetoolz/issues"
Repository = "https://codeberg.org/taconi/cachetoolz/"

[tool.hatch.envs.test]
dependencies = [
  "ward",
  "coverage[toml]>=7.4.3",
  "faker>=23.2.1",
  "redis>=5.0.1",
  "motor>=3.3.2",
  "pymongo>=4.6.2",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test.scripts]
test = """
coverage run -m ward test
coverage report
coverage xml
coverage json
coverage html
"""

[tool.hatch.envs.dev]
dependencies = [
  "ipdb>=0.13.13",
  "isort>=5.13.2",
  "mccabe>=0.7.0",
  "types-redis>=4.6.0.20240218",
  "flake8-html>=0.4.3",
  "flake8-docstrings>=1.7.0",
  "flake8-bugbear>=24.2.6",
  "flake8-pyproject>=1.2.3",
  "black>=24.2.0",
  "autoflake>=2.3.0",
  "docformatter[tomli]>=1.7.5",
  "pre-commit>=3.6.2",
  "gitlint>=0.19.1",
  "mypy>=1.10.0",
  "types-redis>=4.6.0.20240425",
  "pymongo-stubs>=0.2.0",
  "motor-stubs>=1.7.1",
]

[tool.hatch.envs.dev.scripts]
init = """
pre-commit install
gitlint install-hook
"""

fmt = """
autoflake --in-place -r cachetoolz
isort cachetoolz
black cachetoolz
docformatter --in-place -r cachetoolz
"""

check = """
gitlint --ignore-stdin
flake8 cachetoolz
isort --check-only --diff cachetoolz
black --check --diff cachetoolz
docformatter -r cachetoolz
mypy cachetoolz
"""

precommit = "pre-commit run --all-files"

[tool.hatch.envs.docs]
dependencies = ["mkdocs-material>=9.5.11", "mkdocstrings-python>=1.8.0"]

[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve"
build = "mkdocs build"
deploy = "mkdocs gh-deploy --force -b pages"

[tool.hatch.build.targets.sdist]
packages = ["/cachetoolz"]

[tool.hatch.build.targets.wheel]
packages = ["/cachetoolz"]

[tool.mypy]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["get_annotations", "funcy", "nest_asyncio"]
ignore_missing_imports = true

[tool.isort]
multi_line_output = 3
line_length = 79
include_trailing_comma = true
profile = "black"

[tool.black]
line_length = 79
skip-string-normalization = true

[tool.flake8]
ignore = [
  "E121",
  "E123",
  "E126",
  "E231",
  "E226",
  "E24",
  "E704",
  "W503",
  "W504",
  "D401",
  "D412",
]
max-line-length = 79
max-complexity = 8
docstring-convention = "pep257"
format = "html"
htmltitle = "Flake8 Report"
htmldir = ".reports/flake8"

[tool.autoflake]
remove_all_unused_imports = true
ignore_init_module_imports = true
remove_duplicate_keys = true
remove_unused_variables = true

[tool.docformatter]
blank = true
tab-width = 2

[tool.coverage.run]
source = ["cachetoolz"]

[tool.coverage.report]
fail_under = 90
show_missing = true
skip_empty = true
skip_covered = true
sort = "-Cover"
exclude_lines = [
  "no cov",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "@(abc.)?abstractmethod",
]

[tool.coverage.xml]
output = ".reports/coverage.xml"

[tool.coverage.json]
output = ".reports/coverage.json"

[tool.coverage.html]
directory = ".reports/coverage"

[tool.ward]
path = ["tests"]
fail-limit = 20
progress-style = ["bar"]
