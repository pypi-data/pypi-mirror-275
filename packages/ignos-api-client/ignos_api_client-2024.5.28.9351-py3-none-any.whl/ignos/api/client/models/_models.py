# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AcceptSupplierInviteRequest(_serialization.Model):
    """AcceptSupplierInviteRequest.

    All required parameters must be populated in order to send to server.

    :ivar tenant_id: Required.
    :vartype tenant_id: str
    :ivar existing_company_id:
    :vartype existing_company_id: str
    :ivar company_name:
    :vartype company_name: str
    :ivar organization_number:
    :vartype organization_number: str
    :ivar three_letter_iso_country:
    :vartype three_letter_iso_country: str
    """

    _validation = {
        "tenant_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "existing_company_id": {"key": "existingCompanyId", "type": "str"},
        "company_name": {"key": "companyName", "type": "str"},
        "organization_number": {"key": "organizationNumber", "type": "str"},
        "three_letter_iso_country": {"key": "threeLetterIsoCountry", "type": "str"},
    }

    def __init__(
        self,
        *,
        tenant_id: str,
        existing_company_id: Optional[str] = None,
        company_name: Optional[str] = None,
        organization_number: Optional[str] = None,
        three_letter_iso_country: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id: Required.
        :paramtype tenant_id: str
        :keyword existing_company_id:
        :paramtype existing_company_id: str
        :keyword company_name:
        :paramtype company_name: str
        :keyword organization_number:
        :paramtype organization_number: str
        :keyword three_letter_iso_country:
        :paramtype three_letter_iso_country: str
        """
        super().__init__(**kwargs)
        self.tenant_id = tenant_id
        self.existing_company_id = existing_company_id
        self.company_name = company_name
        self.organization_number = organization_number
        self.three_letter_iso_country = three_letter_iso_country


class ActiveWorkDto(_serialization.Model):
    """ActiveWorkDto.

    All required parameters must be populated in order to send to server.

    :ivar work_activity: Required.
    :vartype work_activity: ~ignos.api.client.models.CurrentWorkDto
    :ivar operation: Required.
    :vartype operation: ~ignos.api.client.models.ProductionScheduleOperationDto
    """

    _validation = {
        "work_activity": {"required": True},
        "operation": {"required": True},
    }

    _attribute_map = {
        "work_activity": {"key": "workActivity", "type": "CurrentWorkDto"},
        "operation": {"key": "operation", "type": "ProductionScheduleOperationDto"},
    }

    def __init__(
        self,
        *,
        work_activity: "_models.CurrentWorkDto",
        operation: "_models.ProductionScheduleOperationDto",
        **kwargs: Any
    ) -> None:
        """
        :keyword work_activity: Required.
        :paramtype work_activity: ~ignos.api.client.models.CurrentWorkDto
        :keyword operation: Required.
        :paramtype operation: ~ignos.api.client.models.ProductionScheduleOperationDto
        """
        super().__init__(**kwargs)
        self.work_activity = work_activity
        self.operation = operation


class AddMesLink(_serialization.Model):
    """AddMesLink.

    :ivar uri:
    :vartype uri: str
    :ivar name:
    :vartype name: str
    :ivar type: Known values are: "Static", "Operation", and "WorkOrder".
    :vartype type: str or ~ignos.api.client.models.MesLinkTypeDto
    :ivar company_id:
    :vartype company_id: str
    """

    _attribute_map = {
        "uri": {"key": "uri", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.MesLinkTypeDto"]] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword uri:
        :paramtype uri: str
        :keyword name:
        :paramtype name: str
        :keyword type: Known values are: "Static", "Operation", and "WorkOrder".
        :paramtype type: str or ~ignos.api.client.models.MesLinkTypeDto
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.uri = uri
        self.name = name
        self.type = type
        self.company_id = company_id


class AddResourceTypeForNeedsGenerator(_serialization.Model):
    """AddResourceTypeForNeedsGenerator.

    All required parameters must be populated in order to send to server.

    :ivar resource_type: Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, *, resource_type: str, **kwargs: Any) -> None:
        """
        :keyword resource_type: Required.
        :paramtype resource_type: str
        """
        super().__init__(**kwargs)
        self.resource_type = resource_type


class AgentConfigDto(_serialization.Model):
    """AgentConfigDto.

    All required parameters must be populated in order to send to server.

    :ivar service_bus_namespace: Required.
    :vartype service_bus_namespace: str
    :ivar queue_name: Required.
    :vartype queue_name: str
    :ivar shared_access_signature: Required.
    :vartype shared_access_signature: str
    :ivar configuration_refresh_time: Required.
    :vartype configuration_refresh_time: ~datetime.datetime
    """

    _validation = {
        "service_bus_namespace": {"required": True, "min_length": 1},
        "queue_name": {"required": True, "min_length": 1},
        "shared_access_signature": {"required": True, "min_length": 1},
        "configuration_refresh_time": {"required": True},
    }

    _attribute_map = {
        "service_bus_namespace": {"key": "serviceBusNamespace", "type": "str"},
        "queue_name": {"key": "queueName", "type": "str"},
        "shared_access_signature": {"key": "sharedAccessSignature", "type": "str"},
        "configuration_refresh_time": {"key": "configurationRefreshTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        service_bus_namespace: str,
        queue_name: str,
        shared_access_signature: str,
        configuration_refresh_time: datetime.datetime,
        **kwargs: Any
    ) -> None:
        """
        :keyword service_bus_namespace: Required.
        :paramtype service_bus_namespace: str
        :keyword queue_name: Required.
        :paramtype queue_name: str
        :keyword shared_access_signature: Required.
        :paramtype shared_access_signature: str
        :keyword configuration_refresh_time: Required.
        :paramtype configuration_refresh_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.service_bus_namespace = service_bus_namespace
        self.queue_name = queue_name
        self.shared_access_signature = shared_access_signature
        self.configuration_refresh_time = configuration_refresh_time


class AlertNotificationAccessDto(_serialization.Model):
    """AlertNotificationAccessDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar status: Required. Known values are: "AccessOk", "NotInstalled", and "UserNoAccess".
    :vartype status: str or ~ignos.api.client.models.AlertNotificationAccessStatusDto
    :ivar access_ok:
    :vartype access_ok: bool
    :ivar reason:
    :vartype reason: str
    """

    _validation = {
        "status": {"required": True},
        "access_ok": {"readonly": True},
        "reason": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "access_ok": {"key": "accessOk", "type": "bool"},
        "reason": {"key": "reason", "type": "str"},
    }

    def __init__(self, *, status: Union[str, "_models.AlertNotificationAccessStatusDto"], **kwargs: Any) -> None:
        """
        :keyword status: Required. Known values are: "AccessOk", "NotInstalled", and "UserNoAccess".
        :paramtype status: str or ~ignos.api.client.models.AlertNotificationAccessStatusDto
        """
        super().__init__(**kwargs)
        self.status = status
        self.access_ok = None
        self.reason = None


class AssetConsumptionDto(_serialization.Model):
    """AssetConsumptionDto.

    All required parameters must be populated in order to send to server.

    :ivar timeseries_id: Required.
    :vartype timeseries_id: int
    :ivar timeseries_name: Required.
    :vartype timeseries_name: str
    :ivar kwh: Required.
    :vartype kwh: float
    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar asset_name: Required.
    :vartype asset_name: str
    :ivar co2_equivalent:
    :vartype co2_equivalent: float
    :ivar co2_equivalent_not_adjusted_for_local_production:
    :vartype co2_equivalent_not_adjusted_for_local_production: float
    """

    _validation = {
        "timeseries_id": {"required": True},
        "timeseries_name": {"required": True, "min_length": 1},
        "kwh": {"required": True},
        "asset_id": {"required": True},
        "asset_name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "timeseries_id": {"key": "timeseriesId", "type": "int"},
        "timeseries_name": {"key": "timeseriesName", "type": "str"},
        "kwh": {"key": "kwh", "type": "float"},
        "asset_id": {"key": "assetId", "type": "int"},
        "asset_name": {"key": "assetName", "type": "str"},
        "co2_equivalent": {"key": "co2Equivalent", "type": "float"},
        "co2_equivalent_not_adjusted_for_local_production": {
            "key": "co2EquivalentNotAdjustedForLocalProduction",
            "type": "float",
        },
    }

    def __init__(
        self,
        *,
        timeseries_id: int,
        timeseries_name: str,
        kwh: float,
        asset_id: int,
        asset_name: str,
        co2_equivalent: Optional[float] = None,
        co2_equivalent_not_adjusted_for_local_production: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword timeseries_id: Required.
        :paramtype timeseries_id: int
        :keyword timeseries_name: Required.
        :paramtype timeseries_name: str
        :keyword kwh: Required.
        :paramtype kwh: float
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword asset_name: Required.
        :paramtype asset_name: str
        :keyword co2_equivalent:
        :paramtype co2_equivalent: float
        :keyword co2_equivalent_not_adjusted_for_local_production:
        :paramtype co2_equivalent_not_adjusted_for_local_production: float
        """
        super().__init__(**kwargs)
        self.timeseries_id = timeseries_id
        self.timeseries_name = timeseries_name
        self.kwh = kwh
        self.asset_id = asset_id
        self.asset_name = asset_name
        self.co2_equivalent = co2_equivalent
        self.co2_equivalent_not_adjusted_for_local_production = co2_equivalent_not_adjusted_for_local_production


class AssetDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """AssetDto.

    :ivar external_id:
    :vartype external_id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    :ivar aggregates: Anything.
    :vartype aggregates: any
    :ivar parent_id:
    :vartype parent_id: int
    :ivar source:
    :vartype source: str
    :ivar id:
    :vartype id: int
    :ivar created_time:
    :vartype created_time: int
    :ivar last_updated_time:
    :vartype last_updated_time: int
    :ivar root_id:
    :vartype root_id: int
    """

    _attribute_map = {
        "external_id": {"key": "externalId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "aggregates": {"key": "aggregates", "type": "object"},
        "parent_id": {"key": "parentId", "type": "int"},
        "source": {"key": "source", "type": "str"},
        "id": {"key": "id", "type": "int"},
        "created_time": {"key": "createdTime", "type": "int"},
        "last_updated_time": {"key": "lastUpdatedTime", "type": "int"},
        "root_id": {"key": "rootId", "type": "int"},
    }

    def __init__(
        self,
        *,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        aggregates: Optional[Any] = None,
        parent_id: Optional[int] = None,
        source: Optional[str] = None,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        created_time: Optional[int] = None,
        last_updated_time: Optional[int] = None,
        root_id: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        :keyword aggregates: Anything.
        :paramtype aggregates: any
        :keyword parent_id:
        :paramtype parent_id: int
        :keyword source:
        :paramtype source: str
        :keyword id:
        :paramtype id: int
        :keyword created_time:
        :paramtype created_time: int
        :keyword last_updated_time:
        :paramtype last_updated_time: int
        :keyword root_id:
        :paramtype root_id: int
        """
        super().__init__(**kwargs)
        self.external_id = external_id
        self.name = name
        self.description = description
        self.metadata = metadata
        self.aggregates = aggregates
        self.parent_id = parent_id
        self.source = source
        self.id = id
        self.created_time = created_time
        self.last_updated_time = last_updated_time
        self.root_id = root_id


class AssetDtoPagedResult(_serialization.Model):
    """AssetDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.AssetDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[AssetDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.AssetDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.AssetDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class AssetPowerDto(_serialization.Model):
    """AssetPowerDto.

    :ivar timeseries_id:
    :vartype timeseries_id: int
    :ivar timeseries_name:
    :vartype timeseries_name: str
    :ivar asset_id:
    :vartype asset_id: int
    :ivar asset_name:
    :vartype asset_name: str
    :ivar time_series_data_points:
    :vartype time_series_data_points: list[~ignos.api.client.models.NumericDataPointDto]
    """

    _attribute_map = {
        "timeseries_id": {"key": "timeseriesId", "type": "int"},
        "timeseries_name": {"key": "timeseriesName", "type": "str"},
        "asset_id": {"key": "assetId", "type": "int"},
        "asset_name": {"key": "assetName", "type": "str"},
        "time_series_data_points": {"key": "timeSeriesDataPoints", "type": "[NumericDataPointDto]"},
    }

    def __init__(
        self,
        *,
        timeseries_id: Optional[int] = None,
        timeseries_name: Optional[str] = None,
        asset_id: Optional[int] = None,
        asset_name: Optional[str] = None,
        time_series_data_points: Optional[List["_models.NumericDataPointDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword timeseries_id:
        :paramtype timeseries_id: int
        :keyword timeseries_name:
        :paramtype timeseries_name: str
        :keyword asset_id:
        :paramtype asset_id: int
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword time_series_data_points:
        :paramtype time_series_data_points: list[~ignos.api.client.models.NumericDataPointDto]
        """
        super().__init__(**kwargs)
        self.timeseries_id = timeseries_id
        self.timeseries_name = timeseries_name
        self.asset_id = asset_id
        self.asset_name = asset_name
        self.time_series_data_points = time_series_data_points


class AssetSimpleStructureDto(_serialization.Model):
    """AssetSimpleStructureDto.

    :ivar external_id:
    :vartype external_id: str
    :ivar name:
    :vartype name: str
    :ivar id:
    :vartype id: int
    """

    _attribute_map = {
        "external_id": {"key": "externalId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "id": {"key": "id", "type": "int"},
    }

    def __init__(
        self,
        *,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        **kwargs: Any
    ) -> None:
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword name:
        :paramtype name: str
        :keyword id:
        :paramtype id: int
        """
        super().__init__(**kwargs)
        self.external_id = external_id
        self.name = name
        self.id = id


class AssetStructureDto(_serialization.Model):
    """AssetStructureDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar external_id:
    :vartype external_id: str
    :ivar name:
    :vartype name: str
    :ivar aggregates_display:
    :vartype aggregates_display: str
    :ivar aggregates:
    :vartype aggregates: list[~ignos.api.client.models.AssetSimpleStructureDto]
    :ivar id:
    :vartype id: int
    :ivar created_time:
    :vartype created_time: int
    :ivar last_updated_time:
    :vartype last_updated_time: int
    """

    _validation = {
        "aggregates_display": {"readonly": True},
    }

    _attribute_map = {
        "external_id": {"key": "externalId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "aggregates_display": {"key": "aggregatesDisplay", "type": "str"},
        "aggregates": {"key": "aggregates", "type": "[AssetSimpleStructureDto]"},
        "id": {"key": "id", "type": "int"},
        "created_time": {"key": "createdTime", "type": "int"},
        "last_updated_time": {"key": "lastUpdatedTime", "type": "int"},
    }

    def __init__(
        self,
        *,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        aggregates: Optional[List["_models.AssetSimpleStructureDto"]] = None,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        created_time: Optional[int] = None,
        last_updated_time: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword name:
        :paramtype name: str
        :keyword aggregates:
        :paramtype aggregates: list[~ignos.api.client.models.AssetSimpleStructureDto]
        :keyword id:
        :paramtype id: int
        :keyword created_time:
        :paramtype created_time: int
        :keyword last_updated_time:
        :paramtype last_updated_time: int
        """
        super().__init__(**kwargs)
        self.external_id = external_id
        self.name = name
        self.aggregates_display = None
        self.aggregates = aggregates
        self.id = id
        self.created_time = created_time
        self.last_updated_time = last_updated_time


class AttachCalibrationCertificateRequest(_serialization.Model):
    """AttachCalibrationCertificateRequest.

    All required parameters must be populated in order to send to server.

    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "upload_key": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, upload_key: str, filename: str, **kwargs: Any) -> None:
        """
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.upload_key = upload_key
        self.filename = filename


class AttachPdfRequest(_serialization.Model):
    """AttachPdfRequest.

    All required parameters must be populated in order to send to server.

    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "upload_key": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, upload_key: str, filename: str, **kwargs: Any) -> None:
        """
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.upload_key = upload_key
        self.filename = filename


class AzureRegionDto(_serialization.Model):
    """AzureRegionDto.

    All required parameters must be populated in order to send to server.

    :ivar display_name: Required.
    :vartype display_name: str
    :ivar name: Required.
    :vartype name: str
    :ivar region_display_name: Required.
    :vartype region_display_name: str
    """

    _validation = {
        "display_name": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "region_display_name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "region_display_name": {"key": "regionDisplayName", "type": "str"},
    }

    def __init__(self, *, display_name: str, name: str, region_display_name: str, **kwargs: Any) -> None:
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword name: Required.
        :paramtype name: str
        :keyword region_display_name: Required.
        :paramtype region_display_name: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.name = name
        self.region_display_name = region_display_name


class BatchInsertValueRequest(_serialization.Model):
    """BatchInsertValueRequest.

    All required parameters must be populated in order to send to server.

    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar element_id: Required.
    :vartype element_id: str
    :ivar operation:
    :vartype operation: int
    :ivar resource_name:
    :vartype resource_name: str
    :ivar value:
    :vartype value: str
    :ivar tools:
    :vartype tools: list[str]
    """

    _validation = {
        "schema_id": {"required": True, "min_length": 1},
        "element_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "schema_id": {"key": "schemaId", "type": "str"},
        "element_id": {"key": "elementId", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "tools": {"key": "tools", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        schema_id: str,
        element_id: str,
        operation: Optional[int] = None,
        resource_name: Optional[str] = None,
        value: Optional[str] = None,
        tools: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword element_id: Required.
        :paramtype element_id: str
        :keyword operation:
        :paramtype operation: int
        :keyword resource_name:
        :paramtype resource_name: str
        :keyword value:
        :paramtype value: str
        :keyword tools:
        :paramtype tools: list[str]
        """
        super().__init__(**kwargs)
        self.schema_id = schema_id
        self.element_id = element_id
        self.operation = operation
        self.resource_name = resource_name
        self.value = value
        self.tools = tools


class BatchInsertValuesResponseDto(_serialization.Model):
    """BatchInsertValuesResponseDto.

    All required parameters must be populated in order to send to server.

    :ivar element_with_values: Required.
    :vartype element_with_values: ~ignos.api.client.models.MeasurementFormInstanceElementDto
    :ivar tool_warning:
    :vartype tool_warning: str
    """

    _validation = {
        "element_with_values": {"required": True},
    }

    _attribute_map = {
        "element_with_values": {"key": "elementWithValues", "type": "MeasurementFormInstanceElementDto"},
        "tool_warning": {"key": "toolWarning", "type": "str"},
    }

    def __init__(
        self,
        *,
        element_with_values: "_models.MeasurementFormInstanceElementDto",
        tool_warning: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword element_with_values: Required.
        :paramtype element_with_values: ~ignos.api.client.models.MeasurementFormInstanceElementDto
        :keyword tool_warning:
        :paramtype tool_warning: str
        """
        super().__init__(**kwargs)
        self.element_with_values = element_with_values
        self.tool_warning = tool_warning


class BookingDeliveryUpdateDto(_serialization.Model):
    """BookingDeliveryUpdateDto.

    All required parameters must be populated in order to send to server.

    :ivar booking_id: Required.
    :vartype booking_id: str
    :ivar to_location_id:
    :vartype to_location_id: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "booking_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "booking_id": {"key": "bookingId", "type": "str"},
        "to_location_id": {"key": "toLocationId", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(
        self, *, booking_id: str, to_location_id: Optional[str] = None, comment: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword booking_id: Required.
        :paramtype booking_id: str
        :keyword to_location_id:
        :paramtype to_location_id: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.booking_id = booking_id
        self.to_location_id = to_location_id
        self.comment = comment


class BookingItemRequestDto(_serialization.Model):
    """BookingItemRequestDto.

    All required parameters must be populated in order to send to server.

    :ivar tracking_id: Required.
    :vartype tracking_id: str
    """

    _validation = {
        "tracking_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tracking_id": {"key": "trackingId", "type": "str"},
    }

    def __init__(self, *, tracking_id: str, **kwargs: Any) -> None:
        """
        :keyword tracking_id: Required.
        :paramtype tracking_id: str
        """
        super().__init__(**kwargs)
        self.tracking_id = tracking_id


class BookingItemResponseDto(_serialization.Model):
    """BookingItemResponseDto.

    All required parameters must be populated in order to send to server.

    :ivar tracking_id: Required.
    :vartype tracking_id: str
    """

    _validation = {
        "tracking_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tracking_id": {"key": "trackingId", "type": "str"},
    }

    def __init__(self, *, tracking_id: str, **kwargs: Any) -> None:
        """
        :keyword tracking_id: Required.
        :paramtype tracking_id: str
        """
        super().__init__(**kwargs)
        self.tracking_id = tracking_id


class BookingRequestDto(_serialization.Model):
    """BookingRequestDto.

    All required parameters must be populated in order to send to server.

    :ivar booking_type: Required. Known values are: "NormalTruck", "LargeTruck", and
     "SideLoadingTruck".
    :vartype booking_type: str or ~ignos.api.client.models.BookingTypeDto
    :ivar items: Required.
    :vartype items: list[~ignos.api.client.models.BookingItemRequestDto]
    :ivar from_location_id: Required.
    :vartype from_location_id: str
    :ivar to_location_id: Required.
    :vartype to_location_id: str
    """

    _validation = {
        "booking_type": {"required": True},
        "items": {"required": True},
        "from_location_id": {"required": True, "min_length": 1},
        "to_location_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "booking_type": {"key": "bookingType", "type": "str"},
        "items": {"key": "items", "type": "[BookingItemRequestDto]"},
        "from_location_id": {"key": "fromLocationId", "type": "str"},
        "to_location_id": {"key": "toLocationId", "type": "str"},
    }

    def __init__(
        self,
        *,
        booking_type: Union[str, "_models.BookingTypeDto"],
        items: List["_models.BookingItemRequestDto"],
        from_location_id: str,
        to_location_id: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword booking_type: Required. Known values are: "NormalTruck", "LargeTruck", and
         "SideLoadingTruck".
        :paramtype booking_type: str or ~ignos.api.client.models.BookingTypeDto
        :keyword items: Required.
        :paramtype items: list[~ignos.api.client.models.BookingItemRequestDto]
        :keyword from_location_id: Required.
        :paramtype from_location_id: str
        :keyword to_location_id: Required.
        :paramtype to_location_id: str
        """
        super().__init__(**kwargs)
        self.booking_type = booking_type
        self.items = items
        self.from_location_id = from_location_id
        self.to_location_id = to_location_id


class BookingRequestListDto(_serialization.Model):
    """BookingRequestListDto.

    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(self, *, continuation_token: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token


class BookingResponseDto(_serialization.Model):
    """BookingResponseDto.

    All required parameters must be populated in order to send to server.

    :ivar booking_id: Required.
    :vartype booking_id: str
    :ivar booking_type: Required. Known values are: "NormalTruck", "LargeTruck", and
     "SideLoadingTruck".
    :vartype booking_type: str or ~ignos.api.client.models.BookingTypeDto
    :ivar items: Required.
    :vartype items: list[~ignos.api.client.models.BookingItemResponseDto]
    :ivar from_location_id: Required.
    :vartype from_location_id: str
    :ivar to_location_id: Required.
    :vartype to_location_id: str
    """

    _validation = {
        "booking_id": {"required": True, "min_length": 1},
        "booking_type": {"required": True},
        "items": {"required": True},
        "from_location_id": {"required": True, "min_length": 1},
        "to_location_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "booking_id": {"key": "bookingId", "type": "str"},
        "booking_type": {"key": "bookingType", "type": "str"},
        "items": {"key": "items", "type": "[BookingItemResponseDto]"},
        "from_location_id": {"key": "fromLocationId", "type": "str"},
        "to_location_id": {"key": "toLocationId", "type": "str"},
    }

    def __init__(
        self,
        *,
        booking_id: str,
        booking_type: Union[str, "_models.BookingTypeDto"],
        items: List["_models.BookingItemResponseDto"],
        from_location_id: str,
        to_location_id: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword booking_id: Required.
        :paramtype booking_id: str
        :keyword booking_type: Required. Known values are: "NormalTruck", "LargeTruck", and
         "SideLoadingTruck".
        :paramtype booking_type: str or ~ignos.api.client.models.BookingTypeDto
        :keyword items: Required.
        :paramtype items: list[~ignos.api.client.models.BookingItemResponseDto]
        :keyword from_location_id: Required.
        :paramtype from_location_id: str
        :keyword to_location_id: Required.
        :paramtype to_location_id: str
        """
        super().__init__(**kwargs)
        self.booking_id = booking_id
        self.booking_type = booking_type
        self.items = items
        self.from_location_id = from_location_id
        self.to_location_id = to_location_id


class BookingResponseListDto(_serialization.Model):
    """BookingResponseListDto.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.BookingResponseDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[BookingResponseDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.BookingResponseDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.BookingResponseDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class BookingUpdateDto(_serialization.Model):
    """BookingUpdateDto.

    All required parameters must be populated in order to send to server.

    :ivar booking_id: Required.
    :vartype booking_id: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "booking_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "booking_id": {"key": "bookingId", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(self, *, booking_id: str, comment: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword booking_id: Required.
        :paramtype booking_id: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.booking_id = booking_id
        self.comment = comment


class CalculateBarWeight(_serialization.Model):
    """CalculateBarWeight.

    :ivar inner_diameter:
    :vartype inner_diameter: float
    :ivar outer_diameter:
    :vartype outer_diameter: float
    :ivar length:
    :vartype length: float
    :ivar material_weight_in_kg_per_dm3:
    :vartype material_weight_in_kg_per_dm3: float
    """

    _attribute_map = {
        "inner_diameter": {"key": "innerDiameter", "type": "float"},
        "outer_diameter": {"key": "outerDiameter", "type": "float"},
        "length": {"key": "length", "type": "float"},
        "material_weight_in_kg_per_dm3": {"key": "materialWeightInKgPerDm3", "type": "float"},
    }

    def __init__(
        self,
        *,
        inner_diameter: Optional[float] = None,
        outer_diameter: Optional[float] = None,
        length: Optional[float] = None,
        material_weight_in_kg_per_dm3: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword inner_diameter:
        :paramtype inner_diameter: float
        :keyword outer_diameter:
        :paramtype outer_diameter: float
        :keyword length:
        :paramtype length: float
        :keyword material_weight_in_kg_per_dm3:
        :paramtype material_weight_in_kg_per_dm3: float
        """
        super().__init__(**kwargs)
        self.inner_diameter = inner_diameter
        self.outer_diameter = outer_diameter
        self.length = length
        self.material_weight_in_kg_per_dm3 = material_weight_in_kg_per_dm3


class CalculateRightAngledTriangle(_serialization.Model):
    """CalculateRightAngledTriangle.

    :ivar reference_angle:
    :vartype reference_angle: float
    :ivar hypotenuse:
    :vartype hypotenuse: float
    :ivar adjacent_side:
    :vartype adjacent_side: float
    :ivar opposite_side:
    :vartype opposite_side: float
    """

    _attribute_map = {
        "reference_angle": {"key": "referenceAngle", "type": "float"},
        "hypotenuse": {"key": "hypotenuse", "type": "float"},
        "adjacent_side": {"key": "adjacentSide", "type": "float"},
        "opposite_side": {"key": "oppositeSide", "type": "float"},
    }

    def __init__(
        self,
        *,
        reference_angle: Optional[float] = None,
        hypotenuse: Optional[float] = None,
        adjacent_side: Optional[float] = None,
        opposite_side: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword reference_angle:
        :paramtype reference_angle: float
        :keyword hypotenuse:
        :paramtype hypotenuse: float
        :keyword adjacent_side:
        :paramtype adjacent_side: float
        :keyword opposite_side:
        :paramtype opposite_side: float
        """
        super().__init__(**kwargs)
        self.reference_angle = reference_angle
        self.hypotenuse = hypotenuse
        self.adjacent_side = adjacent_side
        self.opposite_side = opposite_side


class CalculateSpindleAndCuttingSpeed(_serialization.Model):
    """CalculateSpindleAndCuttingSpeed.

    All required parameters must be populated in order to send to server.

    :ivar diameter: Required.
    :vartype diameter: float
    :ivar cutting_speed:
    :vartype cutting_speed: float
    :ivar spindle_speed:
    :vartype spindle_speed: float
    """

    _validation = {
        "diameter": {"required": True},
    }

    _attribute_map = {
        "diameter": {"key": "diameter", "type": "float"},
        "cutting_speed": {"key": "cuttingSpeed", "type": "float"},
        "spindle_speed": {"key": "spindleSpeed", "type": "float"},
    }

    def __init__(
        self,
        *,
        diameter: float,
        cutting_speed: Optional[float] = None,
        spindle_speed: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword diameter: Required.
        :paramtype diameter: float
        :keyword cutting_speed:
        :paramtype cutting_speed: float
        :keyword spindle_speed:
        :paramtype spindle_speed: float
        """
        super().__init__(**kwargs)
        self.diameter = diameter
        self.cutting_speed = cutting_speed
        self.spindle_speed = spindle_speed


class CalibrationListToolDto(_serialization.Model):
    """CalibrationListToolDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar tool_id: Required.
    :vartype tool_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar type: Required.
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar last_calibration_date:
    :vartype last_calibration_date: ~datetime.datetime
    :ivar next_calibration_date:
    :vartype next_calibration_date: ~datetime.datetime
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar last_location:
    :vartype last_location: str
    :ivar last_location_date:
    :vartype last_location_date: ~datetime.datetime
    """

    _validation = {
        "id": {"required": True},
        "tool_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "tool_id": {"key": "toolId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "last_calibration_date": {"key": "lastCalibrationDate", "type": "iso-8601"},
        "next_calibration_date": {"key": "nextCalibrationDate", "type": "iso-8601"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "last_location": {"key": "lastLocation", "type": "str"},
        "last_location_date": {"key": "lastLocationDate", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        tool_id: str,
        name: str,
        type: str,
        sub_type: Optional[str] = None,
        last_calibration_date: Optional[datetime.datetime] = None,
        next_calibration_date: Optional[datetime.datetime] = None,
        calibration_interval: Optional[int] = None,
        last_location: Optional[str] = None,
        last_location_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword tool_id: Required.
        :paramtype tool_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword type: Required.
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword last_calibration_date:
        :paramtype last_calibration_date: ~datetime.datetime
        :keyword next_calibration_date:
        :paramtype next_calibration_date: ~datetime.datetime
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword last_location:
        :paramtype last_location: str
        :keyword last_location_date:
        :paramtype last_location_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.id = id
        self.tool_id = tool_id
        self.name = name
        self.type = type
        self.sub_type = sub_type
        self.last_calibration_date = last_calibration_date
        self.next_calibration_date = next_calibration_date
        self.calibration_interval = calibration_interval
        self.last_location = last_location
        self.last_location_date = last_location_date


class CamTransferDto(_serialization.Model):
    """CamTransferDto.

    All required parameters must be populated in order to send to server.

    :ivar path: Required.
    :vartype path: str
    :ivar content: Required.
    :vartype content: str
    """

    _validation = {
        "path": {"required": True, "min_length": 1},
        "content": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "content": {"key": "content", "type": "str"},
    }

    def __init__(self, *, path: str, content: str, **kwargs: Any) -> None:
        """
        :keyword path: Required.
        :paramtype path: str
        :keyword content: Required.
        :paramtype content: str
        """
        super().__init__(**kwargs)
        self.path = path
        self.content = content


class CdfConfigDto(_serialization.Model):
    """CdfConfigDto.

    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar client_id:
    :vartype client_id: str
    :ivar client_secret_exists:
    :vartype client_secret_exists: bool
    """

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
        "client_secret_exists": {"key": "clientSecretExists", "type": "bool"},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret_exists: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword client_id:
        :paramtype client_id: str
        :keyword client_secret_exists:
        :paramtype client_secret_exists: bool
        """
        super().__init__(**kwargs)
        self.tenant_id = tenant_id
        self.client_id = client_id
        self.client_secret_exists = client_secret_exists


class CncMachineCommunicationSettingsDto(_serialization.Model):
    """CncMachineCommunicationSettingsDto.

    :ivar from_cloud_to_machine_share:
    :vartype from_cloud_to_machine_share: str
    :ivar from_cloud_to_machine_path:
    :vartype from_cloud_to_machine_path: str
    :ivar from_cloud_to_machine_cam_share:
    :vartype from_cloud_to_machine_cam_share: str
    :ivar from_cloud_to_machine_cam_path:
    :vartype from_cloud_to_machine_cam_path: str
    :ivar from_machine_to_cloud_share:
    :vartype from_machine_to_cloud_share: str
    :ivar from_machine_to_cloud_path:
    :vartype from_machine_to_cloud_path: str
    :ivar domain:
    :vartype domain: str
    :ivar username:
    :vartype username: str
    :ivar password_exists:
    :vartype password_exists: bool
    """

    _attribute_map = {
        "from_cloud_to_machine_share": {"key": "fromCloudToMachineShare", "type": "str"},
        "from_cloud_to_machine_path": {"key": "fromCloudToMachinePath", "type": "str"},
        "from_cloud_to_machine_cam_share": {"key": "fromCloudToMachineCamShare", "type": "str"},
        "from_cloud_to_machine_cam_path": {"key": "fromCloudToMachineCamPath", "type": "str"},
        "from_machine_to_cloud_share": {"key": "fromMachineToCloudShare", "type": "str"},
        "from_machine_to_cloud_path": {"key": "fromMachineToCloudPath", "type": "str"},
        "domain": {"key": "domain", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "password_exists": {"key": "passwordExists", "type": "bool"},
    }

    def __init__(
        self,
        *,
        from_cloud_to_machine_share: Optional[str] = None,
        from_cloud_to_machine_path: Optional[str] = None,
        from_cloud_to_machine_cam_share: Optional[str] = None,
        from_cloud_to_machine_cam_path: Optional[str] = None,
        from_machine_to_cloud_share: Optional[str] = None,
        from_machine_to_cloud_path: Optional[str] = None,
        domain: Optional[str] = None,
        username: Optional[str] = None,
        password_exists: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword from_cloud_to_machine_share:
        :paramtype from_cloud_to_machine_share: str
        :keyword from_cloud_to_machine_path:
        :paramtype from_cloud_to_machine_path: str
        :keyword from_cloud_to_machine_cam_share:
        :paramtype from_cloud_to_machine_cam_share: str
        :keyword from_cloud_to_machine_cam_path:
        :paramtype from_cloud_to_machine_cam_path: str
        :keyword from_machine_to_cloud_share:
        :paramtype from_machine_to_cloud_share: str
        :keyword from_machine_to_cloud_path:
        :paramtype from_machine_to_cloud_path: str
        :keyword domain:
        :paramtype domain: str
        :keyword username:
        :paramtype username: str
        :keyword password_exists:
        :paramtype password_exists: bool
        """
        super().__init__(**kwargs)
        self.from_cloud_to_machine_share = from_cloud_to_machine_share
        self.from_cloud_to_machine_path = from_cloud_to_machine_path
        self.from_cloud_to_machine_cam_share = from_cloud_to_machine_cam_share
        self.from_cloud_to_machine_cam_path = from_cloud_to_machine_cam_path
        self.from_machine_to_cloud_share = from_machine_to_cloud_share
        self.from_machine_to_cloud_path = from_machine_to_cloud_path
        self.domain = domain
        self.username = username
        self.password_exists = password_exists


class CncMachineDto(_serialization.Model):
    """CncMachineDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description


class CncMachineOperationDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CncMachineOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar cnc_part_id: Required.
    :vartype cnc_part_id: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar machine_id: Required.
    :vartype machine_id: str
    :ivar machine_name: Required.
    :vartype machine_name: str
    :ivar title:
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar chuck_jaws:
    :vartype chuck_jaws: str
    :ivar chuck_pressure:
    :vartype chuck_pressure: str
    :ivar tailstock:
    :vartype tailstock: str
    :ivar tailstock_pressure:
    :vartype tailstock_pressure: str
    :ivar fixture:
    :vartype fixture: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Verified", and "Archived".
    :vartype status: str or ~ignos.api.client.models.CncOperationStatus
    :ivar deleted: Required.
    :vartype deleted: bool
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "cnc_part_id": {"required": True, "min_length": 1},
        "operation": {"required": True},
        "machine_id": {"required": True, "min_length": 1},
        "machine_name": {"required": True, "min_length": 1},
        "status": {"required": True},
        "deleted": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "cnc_part_id": {"key": "cncPartId", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "machine_id": {"key": "machineId", "type": "str"},
        "machine_name": {"key": "machineName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "chuck_jaws": {"key": "chuckJaws", "type": "str"},
        "chuck_pressure": {"key": "chuckPressure", "type": "str"},
        "tailstock": {"key": "tailstock", "type": "str"},
        "tailstock_pressure": {"key": "tailstockPressure", "type": "str"},
        "fixture": {"key": "fixture", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "deleted": {"key": "deleted", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        cnc_part_id: str,
        operation: int,
        machine_id: str,
        machine_name: str,
        status: Union[str, "_models.CncOperationStatus"],
        deleted: bool,
        title: Optional[str] = None,
        description: Optional[str] = None,
        chuck_jaws: Optional[str] = None,
        chuck_pressure: Optional[str] = None,
        tailstock: Optional[str] = None,
        tailstock_pressure: Optional[str] = None,
        fixture: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword cnc_part_id: Required.
        :paramtype cnc_part_id: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword machine_id: Required.
        :paramtype machine_id: str
        :keyword machine_name: Required.
        :paramtype machine_name: str
        :keyword title:
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword chuck_jaws:
        :paramtype chuck_jaws: str
        :keyword chuck_pressure:
        :paramtype chuck_pressure: str
        :keyword tailstock:
        :paramtype tailstock: str
        :keyword tailstock_pressure:
        :paramtype tailstock_pressure: str
        :keyword fixture:
        :paramtype fixture: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Verified", and "Archived".
        :paramtype status: str or ~ignos.api.client.models.CncOperationStatus
        :keyword deleted: Required.
        :paramtype deleted: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.cnc_part_id = cnc_part_id
        self.operation = operation
        self.machine_id = machine_id
        self.machine_name = machine_name
        self.title = title
        self.description = description
        self.chuck_jaws = chuck_jaws
        self.chuck_pressure = chuck_pressure
        self.tailstock = tailstock
        self.tailstock_pressure = tailstock_pressure
        self.fixture = fixture
        self.status = status
        self.deleted = deleted


class CncMachineOperationSearchResultDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CncMachineOperationSearchResultDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar cnc_part_id: Required.
    :vartype cnc_part_id: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar machine_id: Required.
    :vartype machine_id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar machine_name: Required.
    :vartype machine_name: str
    :ivar title:
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Verified", and "Archived".
    :vartype status: str or ~ignos.api.client.models.CncOperationStatus
    :ivar deleted: Required.
    :vartype deleted: bool
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "cnc_part_id": {"required": True, "min_length": 1},
        "operation": {"required": True},
        "machine_id": {"required": True, "min_length": 1},
        "machine_name": {"required": True, "min_length": 1},
        "status": {"required": True},
        "deleted": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "cnc_part_id": {"key": "cncPartId", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "machine_id": {"key": "machineId", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "machine_name": {"key": "machineName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "deleted": {"key": "deleted", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        cnc_part_id: str,
        operation: int,
        machine_id: str,
        machine_name: str,
        status: Union[str, "_models.CncOperationStatus"],
        deleted: bool,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword cnc_part_id: Required.
        :paramtype cnc_part_id: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword machine_id: Required.
        :paramtype machine_id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword machine_name: Required.
        :paramtype machine_name: str
        :keyword title:
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Verified", and "Archived".
        :paramtype status: str or ~ignos.api.client.models.CncOperationStatus
        :keyword deleted: Required.
        :paramtype deleted: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.cnc_part_id = cnc_part_id
        self.operation = operation
        self.machine_id = machine_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.machine_name = machine_name
        self.title = title
        self.description = description
        self.status = status
        self.deleted = deleted


class CncMachineOperationSearchResultDtoPagedResult(_serialization.Model):  # pylint: disable=name-too-long
    """CncMachineOperationSearchResultDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.CncMachineOperationSearchResultDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[CncMachineOperationSearchResultDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.CncMachineOperationSearchResultDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.CncMachineOperationSearchResultDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class CncMachineTransferDto(_serialization.Model):
    """CncMachineTransferDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar cnc_machine_operation_id:
    :vartype cnc_machine_operation_id: str
    :ivar cnc_machine_id: Required.
    :vartype cnc_machine_id: str
    :ivar cnc_machine_name: Required.
    :vartype cnc_machine_name: str
    :ivar direction: Required. Known values are: "FromCloud" and "ToCloud".
    :vartype direction: str or ~ignos.api.client.models.FileTransferDirection
    :ivar files: Required.
    :vartype files: list[str]
    :ivar status: Required. Known values are: "InProgress", "Success", and "Failed".
    :vartype status: str or ~ignos.api.client.models.FileTransferStatus
    :ivar status_message:
    :vartype status_message: str
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "cnc_machine_id": {"required": True, "readonly": True, "min_length": 1},
        "cnc_machine_name": {"required": True, "readonly": True, "min_length": 1},
        "direction": {"required": True},
        "files": {"required": True},
        "status": {"required": True},
        "timestamp": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "cnc_machine_operation_id": {"key": "cncMachineOperationId", "type": "str"},
        "cnc_machine_id": {"key": "cncMachineId", "type": "str"},
        "cnc_machine_name": {"key": "cncMachineName", "type": "str"},
        "direction": {"key": "direction", "type": "str"},
        "files": {"key": "files", "type": "[str]"},
        "status": {"key": "status", "type": "str"},
        "status_message": {"key": "statusMessage", "type": "str"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        direction: Union[str, "_models.FileTransferDirection"],
        files: List[str],
        status: Union[str, "_models.FileTransferStatus"],
        timestamp: datetime.datetime,
        cnc_machine_operation_id: Optional[str] = None,
        status_message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword cnc_machine_operation_id:
        :paramtype cnc_machine_operation_id: str
        :keyword direction: Required. Known values are: "FromCloud" and "ToCloud".
        :paramtype direction: str or ~ignos.api.client.models.FileTransferDirection
        :keyword files: Required.
        :paramtype files: list[str]
        :keyword status: Required. Known values are: "InProgress", "Success", and "Failed".
        :paramtype status: str or ~ignos.api.client.models.FileTransferStatus
        :keyword status_message:
        :paramtype status_message: str
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.id = id
        self.cnc_machine_operation_id = cnc_machine_operation_id
        self.cnc_machine_id = None
        self.cnc_machine_name = None
        self.direction = direction
        self.files = files
        self.status = status
        self.status_message = status_message
        self.timestamp = timestamp


class CncPartDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CncPartDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar deleted: Required.
    :vartype deleted: bool
    :ivar description:
    :vartype description: str
    :ivar drawing_file:
    :vartype drawing_file: ~ignos.api.client.models.FileDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "deleted": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "deleted": {"key": "deleted", "type": "bool"},
        "description": {"key": "description", "type": "str"},
        "drawing_file": {"key": "drawingFile", "type": "FileDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        deleted: bool,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        description: Optional[str] = None,
        drawing_file: Optional["_models.FileDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword deleted: Required.
        :paramtype deleted: bool
        :keyword description:
        :paramtype description: str
        :keyword drawing_file:
        :paramtype drawing_file: ~ignos.api.client.models.FileDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.deleted = deleted
        self.description = description
        self.drawing_file = drawing_file


class CncPartListDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CncPartListDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar deleted: Required.
    :vartype deleted: bool
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "deleted": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "deleted": {"key": "deleted", "type": "bool"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        deleted: bool,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword deleted: Required.
        :paramtype deleted: bool
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.deleted = deleted
        self.description = description


class CncPartListDtoPagedResult(_serialization.Model):
    """CncPartListDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.CncPartListDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[CncPartListDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.CncPartListDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.CncPartListDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class CncProgramInfoDto(_serialization.Model):
    """CncProgramInfoDto.

    :ivar program:
    :vartype program: str
    :ivar program_comment:
    :vartype program_comment: str
    :ivar unit:
    :vartype unit: str
    :ivar sub_program:
    :vartype sub_program: str
    :ivar sub_program_comment:
    :vartype sub_program_comment: str
    :ivar block:
    :vartype block: str
    :ivar sequence:
    :vartype sequence: str
    :ivar line:
    :vartype line: str
    """

    _attribute_map = {
        "program": {"key": "program", "type": "str"},
        "program_comment": {"key": "programComment", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "sub_program": {"key": "subProgram", "type": "str"},
        "sub_program_comment": {"key": "subProgramComment", "type": "str"},
        "block": {"key": "block", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "line": {"key": "line", "type": "str"},
    }

    def __init__(
        self,
        *,
        program: Optional[str] = None,
        program_comment: Optional[str] = None,
        unit: Optional[str] = None,
        sub_program: Optional[str] = None,
        sub_program_comment: Optional[str] = None,
        block: Optional[str] = None,
        sequence: Optional[str] = None,
        line: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword program:
        :paramtype program: str
        :keyword program_comment:
        :paramtype program_comment: str
        :keyword unit:
        :paramtype unit: str
        :keyword sub_program:
        :paramtype sub_program: str
        :keyword sub_program_comment:
        :paramtype sub_program_comment: str
        :keyword block:
        :paramtype block: str
        :keyword sequence:
        :paramtype sequence: str
        :keyword line:
        :paramtype line: str
        """
        super().__init__(**kwargs)
        self.program = program
        self.program_comment = program_comment
        self.unit = unit
        self.sub_program = sub_program
        self.sub_program_comment = sub_program_comment
        self.block = block
        self.sequence = sequence
        self.line = line


class CncSetupAuditDto(_serialization.Model):
    """CncSetupAuditDto.

    All required parameters must be populated in order to send to server.

    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar created_by_id: Required.
    :vartype created_by_id: str
    :ivar created_by_name:
    :vartype created_by_name: str
    :ivar updated:
    :vartype updated: ~datetime.datetime
    :ivar updated_by:
    :vartype updated_by: str
    :ivar updated_by_id:
    :vartype updated_by_id: str
    :ivar updated_by_name:
    :vartype updated_by_name: str
    """

    _validation = {
        "created": {"required": True},
        "created_by": {"required": True, "min_length": 1},
        "created_by_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_id": {"key": "createdById", "type": "str"},
        "created_by_name": {"key": "createdByName", "type": "str"},
        "updated": {"key": "updated", "type": "iso-8601"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "updated_by_id": {"key": "updatedById", "type": "str"},
        "updated_by_name": {"key": "updatedByName", "type": "str"},
    }

    def __init__(
        self,
        *,
        created: datetime.datetime,
        created_by: str,
        created_by_id: str,
        created_by_name: Optional[str] = None,
        updated: Optional[datetime.datetime] = None,
        updated_by: Optional[str] = None,
        updated_by_id: Optional[str] = None,
        updated_by_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword created_by_id: Required.
        :paramtype created_by_id: str
        :keyword created_by_name:
        :paramtype created_by_name: str
        :keyword updated:
        :paramtype updated: ~datetime.datetime
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword updated_by_id:
        :paramtype updated_by_id: str
        :keyword updated_by_name:
        :paramtype updated_by_name: str
        """
        super().__init__(**kwargs)
        self.created = created
        self.created_by = created_by
        self.created_by_id = created_by_id
        self.created_by_name = created_by_name
        self.updated = updated
        self.updated_by = updated_by
        self.updated_by_id = updated_by_id
        self.updated_by_name = updated_by_name


class CncToolDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CncToolDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar tool_type_id: Required.
    :vartype tool_type_id: str
    :ivar tool_type: Required.
    :vartype tool_type: str
    :ivar tool_sub_type_id: Required.
    :vartype tool_sub_type_id: str
    :ivar tool_sub_type_name: Required.
    :vartype tool_sub_type_name: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar tool_suffix:
    :vartype tool_suffix: str
    :ivar description:
    :vartype description: str
    :ivar holder_description:
    :vartype holder_description: str
    :ivar geometry:
    :vartype geometry: str
    :ivar size:
    :vartype size: str
    :ivar diameter:
    :vartype diameter: float
    :ivar grade:
    :vartype grade: str
    :ivar radius:
    :vartype radius: float
    :ivar chamfer:
    :vartype chamfer: float
    :ivar width:
    :vartype width: float
    :ivar pitch:
    :vartype pitch: str
    :ivar length:
    :vartype length: float
    :ivar kapr:
    :vartype kapr: float
    :ivar teeth:
    :vartype teeth: int
    :ivar stick_out:
    :vartype stick_out: float
    :ivar apmx:
    :vartype apmx: float
    :ivar usable_length:
    :vartype usable_length: float
    :ivar images:
    :vartype images: list[~ignos.api.client.models.ImageFileDto]
    :ivar audit_info:
    :vartype audit_info: ~ignos.api.client.models.CncSetupAuditDto
    """

    _validation = {
        "id": {"required": True},
        "tool_type_id": {"required": True, "min_length": 1},
        "tool_type": {"required": True, "min_length": 1},
        "tool_sub_type_id": {"required": True, "min_length": 1},
        "tool_sub_type_name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "tool_type_id": {"key": "toolTypeId", "type": "str"},
        "tool_type": {"key": "toolType", "type": "str"},
        "tool_sub_type_id": {"key": "toolSubTypeId", "type": "str"},
        "tool_sub_type_name": {"key": "toolSubTypeName", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "tool_suffix": {"key": "toolSuffix", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "holder_description": {"key": "holderDescription", "type": "str"},
        "geometry": {"key": "geometry", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "diameter": {"key": "diameter", "type": "float"},
        "grade": {"key": "grade", "type": "str"},
        "radius": {"key": "radius", "type": "float"},
        "chamfer": {"key": "chamfer", "type": "float"},
        "width": {"key": "width", "type": "float"},
        "pitch": {"key": "pitch", "type": "str"},
        "length": {"key": "length", "type": "float"},
        "kapr": {"key": "kapr", "type": "float"},
        "teeth": {"key": "teeth", "type": "int"},
        "stick_out": {"key": "stickOut", "type": "float"},
        "apmx": {"key": "apmx", "type": "float"},
        "usable_length": {"key": "usableLength", "type": "float"},
        "images": {"key": "images", "type": "[ImageFileDto]"},
        "audit_info": {"key": "auditInfo", "type": "CncSetupAuditDto"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        tool_type_id: str,
        tool_type: str,
        tool_sub_type_id: str,
        tool_sub_type_name: str,
        tool_number: Optional[str] = None,
        tool_suffix: Optional[str] = None,
        description: Optional[str] = None,
        holder_description: Optional[str] = None,
        geometry: Optional[str] = None,
        size: Optional[str] = None,
        diameter: Optional[float] = None,
        grade: Optional[str] = None,
        radius: Optional[float] = None,
        chamfer: Optional[float] = None,
        width: Optional[float] = None,
        pitch: Optional[str] = None,
        length: Optional[float] = None,
        kapr: Optional[float] = None,
        teeth: Optional[int] = None,
        stick_out: Optional[float] = None,
        apmx: Optional[float] = None,
        usable_length: Optional[float] = None,
        images: Optional[List["_models.ImageFileDto"]] = None,
        audit_info: Optional["_models.CncSetupAuditDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword tool_type_id: Required.
        :paramtype tool_type_id: str
        :keyword tool_type: Required.
        :paramtype tool_type: str
        :keyword tool_sub_type_id: Required.
        :paramtype tool_sub_type_id: str
        :keyword tool_sub_type_name: Required.
        :paramtype tool_sub_type_name: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword tool_suffix:
        :paramtype tool_suffix: str
        :keyword description:
        :paramtype description: str
        :keyword holder_description:
        :paramtype holder_description: str
        :keyword geometry:
        :paramtype geometry: str
        :keyword size:
        :paramtype size: str
        :keyword diameter:
        :paramtype diameter: float
        :keyword grade:
        :paramtype grade: str
        :keyword radius:
        :paramtype radius: float
        :keyword chamfer:
        :paramtype chamfer: float
        :keyword width:
        :paramtype width: float
        :keyword pitch:
        :paramtype pitch: str
        :keyword length:
        :paramtype length: float
        :keyword kapr:
        :paramtype kapr: float
        :keyword teeth:
        :paramtype teeth: int
        :keyword stick_out:
        :paramtype stick_out: float
        :keyword apmx:
        :paramtype apmx: float
        :keyword usable_length:
        :paramtype usable_length: float
        :keyword images:
        :paramtype images: list[~ignos.api.client.models.ImageFileDto]
        :keyword audit_info:
        :paramtype audit_info: ~ignos.api.client.models.CncSetupAuditDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.tool_type_id = tool_type_id
        self.tool_type = tool_type
        self.tool_sub_type_id = tool_sub_type_id
        self.tool_sub_type_name = tool_sub_type_name
        self.tool_number = tool_number
        self.tool_suffix = tool_suffix
        self.description = description
        self.holder_description = holder_description
        self.geometry = geometry
        self.size = size
        self.diameter = diameter
        self.grade = grade
        self.radius = radius
        self.chamfer = chamfer
        self.width = width
        self.pitch = pitch
        self.length = length
        self.kapr = kapr
        self.teeth = teeth
        self.stick_out = stick_out
        self.apmx = apmx
        self.usable_length = usable_length
        self.images = images
        self.audit_info = audit_info


class CncToolSubTypeDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CncToolSubTypeDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar image_url:
    :vartype image_url: str
    :ivar tool_number_helper_text: Required.
    :vartype tool_number_helper_text: str
    :ivar suffix_helper_text: Required.
    :vartype suffix_helper_text: str
    :ivar geometry: Required.
    :vartype geometry: bool
    :ivar geometry_helper_text: Required.
    :vartype geometry_helper_text: str
    :ivar size: Required.
    :vartype size: bool
    :ivar size_helper_text: Required.
    :vartype size_helper_text: str
    :ivar diameter: Required.
    :vartype diameter: bool
    :ivar diameter_helper_text: Required.
    :vartype diameter_helper_text: str
    :ivar grade: Required.
    :vartype grade: bool
    :ivar grade_helper_text: Required.
    :vartype grade_helper_text: str
    :ivar radius: Required.
    :vartype radius: bool
    :ivar radius_helper_text: Required.
    :vartype radius_helper_text: str
    :ivar chamfer: Required.
    :vartype chamfer: bool
    :ivar chamfer_helper_text: Required.
    :vartype chamfer_helper_text: str
    :ivar width: Required.
    :vartype width: bool
    :ivar width_helper_text: Required.
    :vartype width_helper_text: str
    :ivar pitch: Required.
    :vartype pitch: bool
    :ivar pitch_helper_text: Required.
    :vartype pitch_helper_text: str
    :ivar length: Required.
    :vartype length: bool
    :ivar length_helper_text: Required.
    :vartype length_helper_text: str
    :ivar kapr: Required.
    :vartype kapr: bool
    :ivar kapr_helper_text: Required.
    :vartype kapr_helper_text: str
    :ivar teeth: Required.
    :vartype teeth: bool
    :ivar teeth_helper_text: Required.
    :vartype teeth_helper_text: str
    :ivar stick_out: Required.
    :vartype stick_out: bool
    :ivar stick_out_helper_text: Required.
    :vartype stick_out_helper_text: str
    :ivar apmx: Required.
    :vartype apmx: bool
    :ivar apmx_helper_text: Required.
    :vartype apmx_helper_text: str
    :ivar usable_length: Required.
    :vartype usable_length: bool
    :ivar usable_length_helper_text: Required.
    :vartype usable_length_helper_text: str
    :ivar description_helper_text: Required.
    :vartype description_helper_text: str
    :ivar holder_description_helper_text: Required.
    :vartype holder_description_helper_text: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "tool_number_helper_text": {"required": True, "min_length": 1},
        "suffix_helper_text": {"required": True, "min_length": 1},
        "geometry": {"required": True},
        "geometry_helper_text": {"required": True, "min_length": 1},
        "size": {"required": True},
        "size_helper_text": {"required": True, "min_length": 1},
        "diameter": {"required": True},
        "diameter_helper_text": {"required": True, "min_length": 1},
        "grade": {"required": True},
        "grade_helper_text": {"required": True, "min_length": 1},
        "radius": {"required": True},
        "radius_helper_text": {"required": True, "min_length": 1},
        "chamfer": {"required": True},
        "chamfer_helper_text": {"required": True, "min_length": 1},
        "width": {"required": True},
        "width_helper_text": {"required": True, "min_length": 1},
        "pitch": {"required": True},
        "pitch_helper_text": {"required": True, "min_length": 1},
        "length": {"required": True},
        "length_helper_text": {"required": True, "min_length": 1},
        "kapr": {"required": True},
        "kapr_helper_text": {"required": True, "min_length": 1},
        "teeth": {"required": True},
        "teeth_helper_text": {"required": True, "min_length": 1},
        "stick_out": {"required": True},
        "stick_out_helper_text": {"required": True, "min_length": 1},
        "apmx": {"required": True},
        "apmx_helper_text": {"required": True, "min_length": 1},
        "usable_length": {"required": True},
        "usable_length_helper_text": {"required": True, "min_length": 1},
        "description_helper_text": {"required": True, "min_length": 1},
        "holder_description_helper_text": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "image_url": {"key": "imageUrl", "type": "str"},
        "tool_number_helper_text": {"key": "toolNumberHelperText", "type": "str"},
        "suffix_helper_text": {"key": "suffixHelperText", "type": "str"},
        "geometry": {"key": "geometry", "type": "bool"},
        "geometry_helper_text": {"key": "geometryHelperText", "type": "str"},
        "size": {"key": "size", "type": "bool"},
        "size_helper_text": {"key": "sizeHelperText", "type": "str"},
        "diameter": {"key": "diameter", "type": "bool"},
        "diameter_helper_text": {"key": "diameterHelperText", "type": "str"},
        "grade": {"key": "grade", "type": "bool"},
        "grade_helper_text": {"key": "gradeHelperText", "type": "str"},
        "radius": {"key": "radius", "type": "bool"},
        "radius_helper_text": {"key": "radiusHelperText", "type": "str"},
        "chamfer": {"key": "chamfer", "type": "bool"},
        "chamfer_helper_text": {"key": "chamferHelperText", "type": "str"},
        "width": {"key": "width", "type": "bool"},
        "width_helper_text": {"key": "widthHelperText", "type": "str"},
        "pitch": {"key": "pitch", "type": "bool"},
        "pitch_helper_text": {"key": "pitchHelperText", "type": "str"},
        "length": {"key": "length", "type": "bool"},
        "length_helper_text": {"key": "lengthHelperText", "type": "str"},
        "kapr": {"key": "kapr", "type": "bool"},
        "kapr_helper_text": {"key": "kaprHelperText", "type": "str"},
        "teeth": {"key": "teeth", "type": "bool"},
        "teeth_helper_text": {"key": "teethHelperText", "type": "str"},
        "stick_out": {"key": "stickOut", "type": "bool"},
        "stick_out_helper_text": {"key": "stickOutHelperText", "type": "str"},
        "apmx": {"key": "apmx", "type": "bool"},
        "apmx_helper_text": {"key": "apmxHelperText", "type": "str"},
        "usable_length": {"key": "usableLength", "type": "bool"},
        "usable_length_helper_text": {"key": "usableLengthHelperText", "type": "str"},
        "description_helper_text": {"key": "descriptionHelperText", "type": "str"},
        "holder_description_helper_text": {"key": "holderDescriptionHelperText", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        tool_number_helper_text: str,
        suffix_helper_text: str,
        geometry: bool,
        geometry_helper_text: str,
        size: bool,
        size_helper_text: str,
        diameter: bool,
        diameter_helper_text: str,
        grade: bool,
        grade_helper_text: str,
        radius: bool,
        radius_helper_text: str,
        chamfer: bool,
        chamfer_helper_text: str,
        width: bool,
        width_helper_text: str,
        pitch: bool,
        pitch_helper_text: str,
        length: bool,
        length_helper_text: str,
        kapr: bool,
        kapr_helper_text: str,
        teeth: bool,
        teeth_helper_text: str,
        stick_out: bool,
        stick_out_helper_text: str,
        apmx: bool,
        apmx_helper_text: str,
        usable_length: bool,
        usable_length_helper_text: str,
        description_helper_text: str,
        holder_description_helper_text: str,
        image_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword image_url:
        :paramtype image_url: str
        :keyword tool_number_helper_text: Required.
        :paramtype tool_number_helper_text: str
        :keyword suffix_helper_text: Required.
        :paramtype suffix_helper_text: str
        :keyword geometry: Required.
        :paramtype geometry: bool
        :keyword geometry_helper_text: Required.
        :paramtype geometry_helper_text: str
        :keyword size: Required.
        :paramtype size: bool
        :keyword size_helper_text: Required.
        :paramtype size_helper_text: str
        :keyword diameter: Required.
        :paramtype diameter: bool
        :keyword diameter_helper_text: Required.
        :paramtype diameter_helper_text: str
        :keyword grade: Required.
        :paramtype grade: bool
        :keyword grade_helper_text: Required.
        :paramtype grade_helper_text: str
        :keyword radius: Required.
        :paramtype radius: bool
        :keyword radius_helper_text: Required.
        :paramtype radius_helper_text: str
        :keyword chamfer: Required.
        :paramtype chamfer: bool
        :keyword chamfer_helper_text: Required.
        :paramtype chamfer_helper_text: str
        :keyword width: Required.
        :paramtype width: bool
        :keyword width_helper_text: Required.
        :paramtype width_helper_text: str
        :keyword pitch: Required.
        :paramtype pitch: bool
        :keyword pitch_helper_text: Required.
        :paramtype pitch_helper_text: str
        :keyword length: Required.
        :paramtype length: bool
        :keyword length_helper_text: Required.
        :paramtype length_helper_text: str
        :keyword kapr: Required.
        :paramtype kapr: bool
        :keyword kapr_helper_text: Required.
        :paramtype kapr_helper_text: str
        :keyword teeth: Required.
        :paramtype teeth: bool
        :keyword teeth_helper_text: Required.
        :paramtype teeth_helper_text: str
        :keyword stick_out: Required.
        :paramtype stick_out: bool
        :keyword stick_out_helper_text: Required.
        :paramtype stick_out_helper_text: str
        :keyword apmx: Required.
        :paramtype apmx: bool
        :keyword apmx_helper_text: Required.
        :paramtype apmx_helper_text: str
        :keyword usable_length: Required.
        :paramtype usable_length: bool
        :keyword usable_length_helper_text: Required.
        :paramtype usable_length_helper_text: str
        :keyword description_helper_text: Required.
        :paramtype description_helper_text: str
        :keyword holder_description_helper_text: Required.
        :paramtype holder_description_helper_text: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.image_url = image_url
        self.tool_number_helper_text = tool_number_helper_text
        self.suffix_helper_text = suffix_helper_text
        self.geometry = geometry
        self.geometry_helper_text = geometry_helper_text
        self.size = size
        self.size_helper_text = size_helper_text
        self.diameter = diameter
        self.diameter_helper_text = diameter_helper_text
        self.grade = grade
        self.grade_helper_text = grade_helper_text
        self.radius = radius
        self.radius_helper_text = radius_helper_text
        self.chamfer = chamfer
        self.chamfer_helper_text = chamfer_helper_text
        self.width = width
        self.width_helper_text = width_helper_text
        self.pitch = pitch
        self.pitch_helper_text = pitch_helper_text
        self.length = length
        self.length_helper_text = length_helper_text
        self.kapr = kapr
        self.kapr_helper_text = kapr_helper_text
        self.teeth = teeth
        self.teeth_helper_text = teeth_helper_text
        self.stick_out = stick_out
        self.stick_out_helper_text = stick_out_helper_text
        self.apmx = apmx
        self.apmx_helper_text = apmx_helper_text
        self.usable_length = usable_length
        self.usable_length_helper_text = usable_length_helper_text
        self.description_helper_text = description_helper_text
        self.holder_description_helper_text = holder_description_helper_text


class CncToolTypeDto(_serialization.Model):
    """CncToolTypeDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar image_url:
    :vartype image_url: str
    :ivar sub_types: Required.
    :vartype sub_types: list[~ignos.api.client.models.CncToolSubTypeDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "sub_types": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "image_url": {"key": "imageUrl", "type": "str"},
        "sub_types": {"key": "subTypes", "type": "[CncToolSubTypeDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        sub_types: List["_models.CncToolSubTypeDto"],
        image_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword image_url:
        :paramtype image_url: str
        :keyword sub_types: Required.
        :paramtype sub_types: list[~ignos.api.client.models.CncToolSubTypeDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.image_url = image_url
        self.sub_types = sub_types


class CompanyCustomerDto(_serialization.Model):
    """CompanyCustomerDto.

    :ivar customer_tenant_id:
    :vartype customer_tenant_id: str
    :ivar customer_azure_ad_tenant_id:
    :vartype customer_azure_ad_tenant_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar supplier_id:
    :vartype supplier_id: str
    :ivar supplier_name:
    :vartype supplier_name: str
    """

    _attribute_map = {
        "customer_tenant_id": {"key": "customerTenantId", "type": "str"},
        "customer_azure_ad_tenant_id": {"key": "customerAzureAdTenantId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "supplier_id": {"key": "supplierId", "type": "str"},
        "supplier_name": {"key": "supplierName", "type": "str"},
    }

    def __init__(
        self,
        *,
        customer_tenant_id: Optional[str] = None,
        customer_azure_ad_tenant_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        supplier_id: Optional[str] = None,
        supplier_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_tenant_id:
        :paramtype customer_tenant_id: str
        :keyword customer_azure_ad_tenant_id:
        :paramtype customer_azure_ad_tenant_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword supplier_id:
        :paramtype supplier_id: str
        :keyword supplier_name:
        :paramtype supplier_name: str
        """
        super().__init__(**kwargs)
        self.customer_tenant_id = customer_tenant_id
        self.customer_azure_ad_tenant_id = customer_azure_ad_tenant_id
        self.customer_name = customer_name
        self.supplier_id = supplier_id
        self.supplier_name = supplier_name


class CompanyDto(_serialization.Model):
    """CompanyDto.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar organization_number:
    :vartype organization_number: str
    :ivar country:
    :vartype country: str
    :ivar tenant_id:
    :vartype tenant_id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "organization_number": {"key": "organizationNumber", "type": "str"},
        "country": {"key": "country", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        organization_number: Optional[str] = None,
        country: Optional[str] = None,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword organization_number:
        :paramtype organization_number: str
        :keyword country:
        :paramtype country: str
        :keyword tenant_id:
        :paramtype tenant_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.organization_number = organization_number
        self.country = country
        self.tenant_id = tenant_id


class CompanyUserDto(_serialization.Model):
    """CompanyUserDto.

    :ivar company_id:
    :vartype company_id: str
    :ivar username:
    :vartype username: str
    :ivar name:
    :vartype name: str
    :ivar roles:
    :vartype roles: list[str]
    """

    _attribute_map = {
        "company_id": {"key": "companyId", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "roles": {"key": "roles", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        company_id: Optional[str] = None,
        username: Optional[str] = None,
        name: Optional[str] = None,
        roles: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword company_id:
        :paramtype company_id: str
        :keyword username:
        :paramtype username: str
        :keyword name:
        :paramtype name: str
        :keyword roles:
        :paramtype roles: list[str]
        """
        super().__init__(**kwargs)
        self.company_id = company_id
        self.username = username
        self.name = name
        self.roles = roles


class ComponentSettingsDto(_serialization.Model):
    """ComponentSettingsDto.

    :ivar component_id:
    :vartype component_id: str
    :ivar disabled_fields:
    :vartype disabled_fields: list[str]
    """

    _attribute_map = {
        "component_id": {"key": "componentId", "type": "str"},
        "disabled_fields": {"key": "disabledFields", "type": "[str]"},
    }

    def __init__(
        self, *, component_id: Optional[str] = None, disabled_fields: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword component_id:
        :paramtype component_id: str
        :keyword disabled_fields:
        :paramtype disabled_fields: list[str]
        """
        super().__init__(**kwargs)
        self.component_id = component_id
        self.disabled_fields = disabled_fields


class ConsumptionDto(_serialization.Model):
    """ConsumptionDto.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar asset_name: Required.
    :vartype asset_name: str
    :ivar kwh: Required.
    :vartype kwh: float
    :ivar co2_equivalent:
    :vartype co2_equivalent: float
    :ivar co2_equivalent_not_adjusted_for_local_production:
    :vartype co2_equivalent_not_adjusted_for_local_production: float
    :ivar items:
    :vartype items: list[~ignos.api.client.models.AssetConsumptionDto]
    """

    _validation = {
        "asset_id": {"required": True},
        "asset_name": {"required": True, "min_length": 1},
        "kwh": {"required": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "asset_name": {"key": "assetName", "type": "str"},
        "kwh": {"key": "kwh", "type": "float"},
        "co2_equivalent": {"key": "co2Equivalent", "type": "float"},
        "co2_equivalent_not_adjusted_for_local_production": {
            "key": "co2EquivalentNotAdjustedForLocalProduction",
            "type": "float",
        },
        "items": {"key": "items", "type": "[AssetConsumptionDto]"},
    }

    def __init__(
        self,
        *,
        asset_id: int,
        asset_name: str,
        kwh: float,
        co2_equivalent: Optional[float] = None,
        co2_equivalent_not_adjusted_for_local_production: Optional[float] = None,
        items: Optional[List["_models.AssetConsumptionDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword asset_name: Required.
        :paramtype asset_name: str
        :keyword kwh: Required.
        :paramtype kwh: float
        :keyword co2_equivalent:
        :paramtype co2_equivalent: float
        :keyword co2_equivalent_not_adjusted_for_local_production:
        :paramtype co2_equivalent_not_adjusted_for_local_production: float
        :keyword items:
        :paramtype items: list[~ignos.api.client.models.AssetConsumptionDto]
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.asset_name = asset_name
        self.kwh = kwh
        self.co2_equivalent = co2_equivalent
        self.co2_equivalent_not_adjusted_for_local_production = co2_equivalent_not_adjusted_for_local_production
        self.items = items


class CopyCncMachineOperationDto(_serialization.Model):
    """CopyCncMachineOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar source_cnc_machine_operation_id: Required.
    :vartype source_cnc_machine_operation_id: str
    :ivar target_cnc_machine_id: Required.
    :vartype target_cnc_machine_id: str
    :ivar target_operation:
    :vartype target_operation: int
    :ivar copy_tools: Required.
    :vartype copy_tools: bool
    :ivar copy_files: Required.
    :vartype copy_files: bool
    """

    _validation = {
        "source_cnc_machine_operation_id": {"required": True, "min_length": 1},
        "target_cnc_machine_id": {"required": True, "min_length": 1},
        "copy_tools": {"required": True},
        "copy_files": {"required": True},
    }

    _attribute_map = {
        "source_cnc_machine_operation_id": {"key": "sourceCncMachineOperationId", "type": "str"},
        "target_cnc_machine_id": {"key": "targetCncMachineId", "type": "str"},
        "target_operation": {"key": "targetOperation", "type": "int"},
        "copy_tools": {"key": "copyTools", "type": "bool"},
        "copy_files": {"key": "copyFiles", "type": "bool"},
    }

    def __init__(
        self,
        *,
        source_cnc_machine_operation_id: str,
        target_cnc_machine_id: str,
        copy_tools: bool,
        copy_files: bool,
        target_operation: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source_cnc_machine_operation_id: Required.
        :paramtype source_cnc_machine_operation_id: str
        :keyword target_cnc_machine_id: Required.
        :paramtype target_cnc_machine_id: str
        :keyword target_operation:
        :paramtype target_operation: int
        :keyword copy_tools: Required.
        :paramtype copy_tools: bool
        :keyword copy_files: Required.
        :paramtype copy_files: bool
        """
        super().__init__(**kwargs)
        self.source_cnc_machine_operation_id = source_cnc_machine_operation_id
        self.target_cnc_machine_id = target_cnc_machine_id
        self.target_operation = target_operation
        self.copy_tools = copy_tools
        self.copy_files = copy_files


class CopyCncMachineOperations(_serialization.Model):
    """CopyCncMachineOperations.

    All required parameters must be populated in order to send to server.

    :ivar target_cnc_part_id:
    :vartype target_cnc_part_id: str
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.CopyCncMachineOperationDto]
    """

    _validation = {
        "operations": {"required": True},
    }

    _attribute_map = {
        "target_cnc_part_id": {"key": "targetCncPartId", "type": "str"},
        "operations": {"key": "operations", "type": "[CopyCncMachineOperationDto]"},
    }

    def __init__(
        self,
        *,
        operations: List["_models.CopyCncMachineOperationDto"],
        target_cnc_part_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword target_cnc_part_id:
        :paramtype target_cnc_part_id: str
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.CopyCncMachineOperationDto]
        """
        super().__init__(**kwargs)
        self.target_cnc_part_id = target_cnc_part_id
        self.operations = operations


class CopyCncPart(_serialization.Model):
    """CopyCncPart.

    All required parameters must be populated in order to send to server.

    :ivar source_part_id: Required.
    :vartype source_part_id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "source_part_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "source_part_id": {"key": "sourcePartId", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        source_part_id: str,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source_part_id: Required.
        :paramtype source_part_id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.source_part_id = source_part_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.description = description


class CopyToolsCncMachine(_serialization.Model):
    """CopyToolsCncMachine.

    All required parameters must be populated in order to send to server.

    :ivar source_machine_id: Required.
    :vartype source_machine_id: str
    :ivar target_operation_id: Required.
    :vartype target_operation_id: str
    :ivar tools_ids: Required.
    :vartype tools_ids: list[int]
    """

    _validation = {
        "source_machine_id": {"required": True, "min_length": 1},
        "target_operation_id": {"required": True, "min_length": 1},
        "tools_ids": {"required": True},
    }

    _attribute_map = {
        "source_machine_id": {"key": "sourceMachineId", "type": "str"},
        "target_operation_id": {"key": "targetOperationId", "type": "str"},
        "tools_ids": {"key": "toolsIds", "type": "[int]"},
    }

    def __init__(
        self, *, source_machine_id: str, target_operation_id: str, tools_ids: List[int], **kwargs: Any
    ) -> None:
        """
        :keyword source_machine_id: Required.
        :paramtype source_machine_id: str
        :keyword target_operation_id: Required.
        :paramtype target_operation_id: str
        :keyword tools_ids: Required.
        :paramtype tools_ids: list[int]
        """
        super().__init__(**kwargs)
        self.source_machine_id = source_machine_id
        self.target_operation_id = target_operation_id
        self.tools_ids = tools_ids


class CountryDto(_serialization.Model):
    """CountryDto.

    All required parameters must be populated in order to send to server.

    :ivar two_letter_iso_region_name: Required.
    :vartype two_letter_iso_region_name: str
    :ivar three_letter_iso_region_name: Required.
    :vartype three_letter_iso_region_name: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "two_letter_iso_region_name": {"required": True, "min_length": 1},
        "three_letter_iso_region_name": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "two_letter_iso_region_name": {"key": "twoLetterISORegionName", "type": "str"},
        "three_letter_iso_region_name": {"key": "threeLetterISORegionName", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self, *, two_letter_iso_region_name: str, three_letter_iso_region_name: str, name: str, **kwargs: Any
    ) -> None:
        """
        :keyword two_letter_iso_region_name: Required.
        :paramtype two_letter_iso_region_name: str
        :keyword three_letter_iso_region_name: Required.
        :paramtype three_letter_iso_region_name: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.two_letter_iso_region_name = two_letter_iso_region_name
        self.three_letter_iso_region_name = three_letter_iso_region_name
        self.name = name


class CreateAsset(_serialization.Model):
    """CreateAsset.

    All required parameters must be populated in order to send to server.

    :ivar parent_id: Required.
    :vartype parent_id: int
    :ivar external_id: Required.
    :vartype external_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description: Required.
    :vartype description: str
    :ivar metadata: Dictionary of :code:`<string>`. Required.
    :vartype metadata: dict[str, str]
    :ivar source:
    :vartype source: str
    """

    _validation = {
        "parent_id": {"required": True},
        "external_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "description": {"required": True, "min_length": 1},
        "metadata": {"required": True},
    }

    _attribute_map = {
        "parent_id": {"key": "parentId", "type": "int"},
        "external_id": {"key": "externalId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "source": {"key": "source", "type": "str"},
    }

    def __init__(
        self,
        *,
        parent_id: int,
        external_id: str,
        name: str,
        description: str,
        metadata: Dict[str, str],
        source: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword parent_id: Required.
        :paramtype parent_id: int
        :keyword external_id: Required.
        :paramtype external_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description: Required.
        :paramtype description: str
        :keyword metadata: Dictionary of :code:`<string>`. Required.
        :paramtype metadata: dict[str, str]
        :keyword source:
        :paramtype source: str
        """
        super().__init__(**kwargs)
        self.parent_id = parent_id
        self.external_id = external_id
        self.name = name
        self.description = description
        self.metadata = metadata
        self.source = source


class CreateCncMachine(_serialization.Model):
    """CreateCncMachine.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, name: str, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description


class CreateCncMachineOperation(_serialization.Model):
    """CreateCncMachineOperation.

    All required parameters must be populated in order to send to server.

    :ivar cnc_part_id: Required.
    :vartype cnc_part_id: str
    :ivar operation:
    :vartype operation: int
    :ivar machine_id: Required.
    :vartype machine_id: str
    :ivar title:
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar chuck_jaws:
    :vartype chuck_jaws: str
    :ivar chuck_pressure:
    :vartype chuck_pressure: str
    :ivar tailstock:
    :vartype tailstock: str
    :ivar tailstock_pressure:
    :vartype tailstock_pressure: str
    :ivar fixture:
    :vartype fixture: str
    """

    _validation = {
        "cnc_part_id": {"required": True, "min_length": 1},
        "machine_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "cnc_part_id": {"key": "cncPartId", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "machine_id": {"key": "machineId", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "chuck_jaws": {"key": "chuckJaws", "type": "str"},
        "chuck_pressure": {"key": "chuckPressure", "type": "str"},
        "tailstock": {"key": "tailstock", "type": "str"},
        "tailstock_pressure": {"key": "tailstockPressure", "type": "str"},
        "fixture": {"key": "fixture", "type": "str"},
    }

    def __init__(
        self,
        *,
        cnc_part_id: str,
        machine_id: str,
        operation: Optional[int] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        chuck_jaws: Optional[str] = None,
        chuck_pressure: Optional[str] = None,
        tailstock: Optional[str] = None,
        tailstock_pressure: Optional[str] = None,
        fixture: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cnc_part_id: Required.
        :paramtype cnc_part_id: str
        :keyword operation:
        :paramtype operation: int
        :keyword machine_id: Required.
        :paramtype machine_id: str
        :keyword title:
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword chuck_jaws:
        :paramtype chuck_jaws: str
        :keyword chuck_pressure:
        :paramtype chuck_pressure: str
        :keyword tailstock:
        :paramtype tailstock: str
        :keyword tailstock_pressure:
        :paramtype tailstock_pressure: str
        :keyword fixture:
        :paramtype fixture: str
        """
        super().__init__(**kwargs)
        self.cnc_part_id = cnc_part_id
        self.operation = operation
        self.machine_id = machine_id
        self.title = title
        self.description = description
        self.chuck_jaws = chuck_jaws
        self.chuck_pressure = chuck_pressure
        self.tailstock = tailstock
        self.tailstock_pressure = tailstock_pressure
        self.fixture = fixture


class CreateCncMachineOperationToolRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CreateCncMachineOperationToolRequest.

    All required parameters must be populated in order to send to server.

    :ivar tool_type_id: Required.
    :vartype tool_type_id: str
    :ivar tool_sub_type_id: Required.
    :vartype tool_sub_type_id: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar tool_suffix:
    :vartype tool_suffix: str
    :ivar description:
    :vartype description: str
    :ivar holder_description:
    :vartype holder_description: str
    :ivar geometry:
    :vartype geometry: str
    :ivar size:
    :vartype size: str
    :ivar diameter:
    :vartype diameter: float
    :ivar grade:
    :vartype grade: str
    :ivar radius:
    :vartype radius: float
    :ivar chamfer:
    :vartype chamfer: float
    :ivar width:
    :vartype width: float
    :ivar pitch:
    :vartype pitch: str
    :ivar length:
    :vartype length: float
    :ivar kapr:
    :vartype kapr: float
    :ivar teeth:
    :vartype teeth: int
    :ivar stick_out:
    :vartype stick_out: float
    :ivar apmx:
    :vartype apmx: float
    :ivar usable_length:
    :vartype usable_length: float
    """

    _validation = {
        "tool_type_id": {"required": True, "min_length": 1},
        "tool_sub_type_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tool_type_id": {"key": "toolTypeId", "type": "str"},
        "tool_sub_type_id": {"key": "toolSubTypeId", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "tool_suffix": {"key": "toolSuffix", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "holder_description": {"key": "holderDescription", "type": "str"},
        "geometry": {"key": "geometry", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "diameter": {"key": "diameter", "type": "float"},
        "grade": {"key": "grade", "type": "str"},
        "radius": {"key": "radius", "type": "float"},
        "chamfer": {"key": "chamfer", "type": "float"},
        "width": {"key": "width", "type": "float"},
        "pitch": {"key": "pitch", "type": "str"},
        "length": {"key": "length", "type": "float"},
        "kapr": {"key": "kapr", "type": "float"},
        "teeth": {"key": "teeth", "type": "int"},
        "stick_out": {"key": "stickOut", "type": "float"},
        "apmx": {"key": "apmx", "type": "float"},
        "usable_length": {"key": "usableLength", "type": "float"},
    }

    def __init__(
        self,
        *,
        tool_type_id: str,
        tool_sub_type_id: str,
        tool_number: Optional[str] = None,
        tool_suffix: Optional[str] = None,
        description: Optional[str] = None,
        holder_description: Optional[str] = None,
        geometry: Optional[str] = None,
        size: Optional[str] = None,
        diameter: Optional[float] = None,
        grade: Optional[str] = None,
        radius: Optional[float] = None,
        chamfer: Optional[float] = None,
        width: Optional[float] = None,
        pitch: Optional[str] = None,
        length: Optional[float] = None,
        kapr: Optional[float] = None,
        teeth: Optional[int] = None,
        stick_out: Optional[float] = None,
        apmx: Optional[float] = None,
        usable_length: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tool_type_id: Required.
        :paramtype tool_type_id: str
        :keyword tool_sub_type_id: Required.
        :paramtype tool_sub_type_id: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword tool_suffix:
        :paramtype tool_suffix: str
        :keyword description:
        :paramtype description: str
        :keyword holder_description:
        :paramtype holder_description: str
        :keyword geometry:
        :paramtype geometry: str
        :keyword size:
        :paramtype size: str
        :keyword diameter:
        :paramtype diameter: float
        :keyword grade:
        :paramtype grade: str
        :keyword radius:
        :paramtype radius: float
        :keyword chamfer:
        :paramtype chamfer: float
        :keyword width:
        :paramtype width: float
        :keyword pitch:
        :paramtype pitch: str
        :keyword length:
        :paramtype length: float
        :keyword kapr:
        :paramtype kapr: float
        :keyword teeth:
        :paramtype teeth: int
        :keyword stick_out:
        :paramtype stick_out: float
        :keyword apmx:
        :paramtype apmx: float
        :keyword usable_length:
        :paramtype usable_length: float
        """
        super().__init__(**kwargs)
        self.tool_type_id = tool_type_id
        self.tool_sub_type_id = tool_sub_type_id
        self.tool_number = tool_number
        self.tool_suffix = tool_suffix
        self.description = description
        self.holder_description = holder_description
        self.geometry = geometry
        self.size = size
        self.diameter = diameter
        self.grade = grade
        self.radius = radius
        self.chamfer = chamfer
        self.width = width
        self.pitch = pitch
        self.length = length
        self.kapr = kapr
        self.teeth = teeth
        self.stick_out = stick_out
        self.apmx = apmx
        self.usable_length = usable_length


class CreateCncPart(_serialization.Model):
    """CreateCncPart.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.description = description


class CreateCompanyUserRequest(_serialization.Model):
    """CreateCompanyUserRequest.

    All required parameters must be populated in order to send to server.

    :ivar username: Required.
    :vartype username: str
    :ivar name: Required.
    :vartype name: str
    :ivar roles: Required.
    :vartype roles: list[str]
    :ivar company_id:
    :vartype company_id: str
    """

    _validation = {
        "username": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "roles": {"required": True},
    }

    _attribute_map = {
        "username": {"key": "username", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "roles": {"key": "roles", "type": "[str]"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self, *, username: str, name: str, roles: List[str], company_id: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword username: Required.
        :paramtype username: str
        :keyword name: Required.
        :paramtype name: str
        :keyword roles: Required.
        :paramtype roles: list[str]
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.username = username
        self.name = name
        self.roles = roles
        self.company_id = company_id


class CreateCustomerMapping(_serialization.Model):
    """CreateCustomerMapping.

    All required parameters must be populated in order to send to server.

    :ivar existing_customer_id: Required.
    :vartype existing_customer_id: str
    :ivar new_customer_id: Required.
    :vartype new_customer_id: str
    """

    _validation = {
        "existing_customer_id": {"required": True, "min_length": 1},
        "new_customer_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "existing_customer_id": {"key": "existingCustomerId", "type": "str"},
        "new_customer_id": {"key": "newCustomerId", "type": "str"},
    }

    def __init__(self, *, existing_customer_id: str, new_customer_id: str, **kwargs: Any) -> None:
        """
        :keyword existing_customer_id: Required.
        :paramtype existing_customer_id: str
        :keyword new_customer_id: Required.
        :paramtype new_customer_id: str
        """
        super().__init__(**kwargs)
        self.existing_customer_id = existing_customer_id
        self.new_customer_id = new_customer_id


class CreateCustomerOrderLineGhgReport(_serialization.Model):
    """CreateCustomerOrderLineGhgReport.

    All required parameters must be populated in order to send to server.

    :ivar customer_order: Required.
    :vartype customer_order: ~ignos.api.client.models.SustainabilityCustomerOrderDto
    :ivar nodes: Required.
    :vartype nodes: list[~ignos.api.client.models.SustainabilityNodeDto]
    """

    _validation = {
        "customer_order": {"required": True},
        "nodes": {"required": True},
    }

    _attribute_map = {
        "customer_order": {"key": "customerOrder", "type": "SustainabilityCustomerOrderDto"},
        "nodes": {"key": "nodes", "type": "[SustainabilityNodeDto]"},
    }

    def __init__(
        self,
        *,
        customer_order: "_models.SustainabilityCustomerOrderDto",
        nodes: List["_models.SustainabilityNodeDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_order: Required.
        :paramtype customer_order: ~ignos.api.client.models.SustainabilityCustomerOrderDto
        :keyword nodes: Required.
        :paramtype nodes: list[~ignos.api.client.models.SustainabilityNodeDto]
        """
        super().__init__(**kwargs)
        self.customer_order = customer_order
        self.nodes = nodes


class CreateDocumentTypeRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CreateDocumentTypeRequest.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar title: Required.
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar workflow_type: Required. Known values are: "None", "CustomerProvided",
     "CustomerApproval", and "InternalWithFix".
    :vartype workflow_type: str or ~ignos.api.client.models.DocumentWorkflowType
    :ivar is_internal_document_type: Required.
    :vartype is_internal_document_type: bool
    :ivar is_generated_document_type: Required.
    :vartype is_generated_document_type: bool
    :ivar require_portable_file: Required.
    :vartype require_portable_file: bool
    :ivar category: Required. Known values are: "General", "Procedure", "Drawing", "Report", and
     "Certificate".
    :vartype category: str or ~ignos.api.client.models.DocumentTypeCategory
    :ivar document_requirement_strategy: Required. Known values are: "None", "WorkOrder", "Lot",
     "Drawing", and "CustomerOrderLine".
    :vartype document_requirement_strategy: str or
     ~ignos.api.client.models.DocumentRequirementStrategy
    :ivar can_have_certificate: Required.
    :vartype can_have_certificate: bool
    :ivar generated_document_key:
    :vartype generated_document_key: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "title": {"required": True, "min_length": 1},
        "workflow_type": {"required": True},
        "is_internal_document_type": {"required": True},
        "is_generated_document_type": {"required": True},
        "require_portable_file": {"required": True},
        "category": {"required": True},
        "document_requirement_strategy": {"required": True},
        "can_have_certificate": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "workflow_type": {"key": "workflowType", "type": "str"},
        "is_internal_document_type": {"key": "isInternalDocumentType", "type": "bool"},
        "is_generated_document_type": {"key": "isGeneratedDocumentType", "type": "bool"},
        "require_portable_file": {"key": "requirePortableFile", "type": "bool"},
        "category": {"key": "category", "type": "str"},
        "document_requirement_strategy": {"key": "documentRequirementStrategy", "type": "str"},
        "can_have_certificate": {"key": "canHaveCertificate", "type": "bool"},
        "generated_document_key": {"key": "generatedDocumentKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        title: str,
        workflow_type: Union[str, "_models.DocumentWorkflowType"],
        is_internal_document_type: bool,
        is_generated_document_type: bool,
        require_portable_file: bool,
        category: Union[str, "_models.DocumentTypeCategory"],
        document_requirement_strategy: Union[str, "_models.DocumentRequirementStrategy"],
        can_have_certificate: bool,
        description: Optional[str] = None,
        generated_document_key: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword title: Required.
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword workflow_type: Required. Known values are: "None", "CustomerProvided",
         "CustomerApproval", and "InternalWithFix".
        :paramtype workflow_type: str or ~ignos.api.client.models.DocumentWorkflowType
        :keyword is_internal_document_type: Required.
        :paramtype is_internal_document_type: bool
        :keyword is_generated_document_type: Required.
        :paramtype is_generated_document_type: bool
        :keyword require_portable_file: Required.
        :paramtype require_portable_file: bool
        :keyword category: Required. Known values are: "General", "Procedure", "Drawing", "Report", and
         "Certificate".
        :paramtype category: str or ~ignos.api.client.models.DocumentTypeCategory
        :keyword document_requirement_strategy: Required. Known values are: "None", "WorkOrder", "Lot",
         "Drawing", and "CustomerOrderLine".
        :paramtype document_requirement_strategy: str or
         ~ignos.api.client.models.DocumentRequirementStrategy
        :keyword can_have_certificate: Required.
        :paramtype can_have_certificate: bool
        :keyword generated_document_key:
        :paramtype generated_document_key: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.title = title
        self.description = description
        self.workflow_type = workflow_type
        self.is_internal_document_type = is_internal_document_type
        self.is_generated_document_type = is_generated_document_type
        self.require_portable_file = require_portable_file
        self.category = category
        self.document_requirement_strategy = document_requirement_strategy
        self.can_have_certificate = can_have_certificate
        self.generated_document_key = generated_document_key


class CreateElectricalIotConfig(_serialization.Model):
    """CreateElectricalIotConfig.

    :ivar type_id:
    :vartype type_id: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar asset_id:
    :vartype asset_id: int
    :ivar asset_external_id:
    :vartype asset_external_id: str
    """

    _attribute_map = {
        "type_id": {"key": "typeId", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "asset_id": {"key": "assetId", "type": "int"},
        "asset_external_id": {"key": "assetExternalId", "type": "str"},
    }

    def __init__(
        self,
        *,
        type_id: Optional[str] = None,
        serial_number: Optional[str] = None,
        asset_id: Optional[int] = None,
        asset_external_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type_id:
        :paramtype type_id: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword asset_id:
        :paramtype asset_id: int
        :keyword asset_external_id:
        :paramtype asset_external_id: str
        """
        super().__init__(**kwargs)
        self.type_id = type_id
        self.serial_number = serial_number
        self.asset_id = asset_id
        self.asset_external_id = asset_external_id


class CreateLinkRequest(_serialization.Model):
    """CreateLinkRequest.

    All required parameters must be populated in order to send to server.

    :ivar uri: Required.
    :vartype uri: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar new_tab:
    :vartype new_tab: bool
    :ivar color:
    :vartype color: str
    :ivar icon_name:
    :vartype icon_name: str
    :ivar scope:
    :vartype scope: str
    """

    _validation = {
        "uri": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "uri": {"key": "uri", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "new_tab": {"key": "newTab", "type": "bool"},
        "color": {"key": "color", "type": "str"},
        "icon_name": {"key": "iconName", "type": "str"},
        "scope": {"key": "scope", "type": "str"},
    }

    def __init__(
        self,
        *,
        uri: str,
        name: str,
        description: Optional[str] = None,
        new_tab: Optional[bool] = None,
        color: Optional[str] = None,
        icon_name: Optional[str] = None,
        scope: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword uri: Required.
        :paramtype uri: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword new_tab:
        :paramtype new_tab: bool
        :keyword color:
        :paramtype color: str
        :keyword icon_name:
        :paramtype icon_name: str
        :keyword scope:
        :paramtype scope: str
        """
        super().__init__(**kwargs)
        self.uri = uri
        self.name = name
        self.description = description
        self.new_tab = new_tab
        self.color = color
        self.icon_name = icon_name
        self.scope = scope


class CreateMachineGroup(_serialization.Model):
    """CreateMachineGroup.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar machine_external_ids:
    :vartype machine_external_ids: list[str]
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "machine_external_ids": {"key": "machineExternalIds", "type": "[str]"},
    }

    def __init__(self, *, name: str, machine_external_ids: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword machine_external_ids:
        :paramtype machine_external_ids: list[str]
        """
        super().__init__(**kwargs)
        self.name = name
        self.machine_external_ids = machine_external_ids


class CreateMachineGroupResponse(_serialization.Model):
    """CreateMachineGroupResponse.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class CreateMachineWithoutResource(_serialization.Model):
    """CreateMachineWithoutResource.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar type: Required.
    :vartype type: str
    :ivar display_name:
    :vartype display_name: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar location:
    :vartype location: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar year:
    :vartype year: str
    :ivar model:
    :vartype model: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "year": {"key": "year", "type": "str"},
        "model": {"key": "model", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        type: str,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        manufacturer: Optional[str] = None,
        location: Optional[str] = None,
        serial_number: Optional[str] = None,
        year: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword type: Required.
        :paramtype type: str
        :keyword display_name:
        :paramtype display_name: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword location:
        :paramtype location: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword year:
        :paramtype year: str
        :keyword model:
        :paramtype model: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.type = type
        self.display_name = display_name
        self.manufacturer = manufacturer
        self.location = location
        self.serial_number = serial_number
        self.year = year
        self.model = model


class CreateMeasurementFormMapping(_serialization.Model):
    """CreateMeasurementFormMapping.

    All required parameters must be populated in order to send to server.

    :ivar source_id: Required.
    :vartype source_id: str
    :ivar target_id: Required.
    :vartype target_id: str
    """

    _validation = {
        "source_id": {"required": True, "min_length": 1},
        "target_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "source_id": {"key": "sourceId", "type": "str"},
        "target_id": {"key": "targetId", "type": "str"},
    }

    def __init__(self, *, source_id: str, target_id: str, **kwargs: Any) -> None:
        """
        :keyword source_id: Required.
        :paramtype source_id: str
        :keyword target_id: Required.
        :paramtype target_id: str
        """
        super().__init__(**kwargs)
        self.source_id = source_id
        self.target_id = target_id


class CreateMeasurementFormSchema(_serialization.Model):
    """CreateMeasurementFormSchema.

    All required parameters must be populated in order to send to server.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing: Required.
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    """

    _validation = {
        "drawing": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
    }

    def __init__(
        self,
        *,
        drawing: str,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing: Required.
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision


class CreateMeasurementFormSchemaFeedbackRequest(_serialization.Model):  # pylint: disable=name-too-long
    """CreateMeasurementFormSchemaFeedbackRequest.

    All required parameters must be populated in order to send to server.

    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar feedback: Required.
    :vartype feedback: str
    """

    _validation = {
        "feedback": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "balloon_id": {"key": "balloonId", "type": "str"},
        "feedback": {"key": "feedback", "type": "str"},
    }

    def __init__(self, *, feedback: str, balloon_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword feedback: Required.
        :paramtype feedback: str
        """
        super().__init__(**kwargs)
        self.balloon_id = balloon_id
        self.feedback = feedback


class CreateMeasurementFormSchemaLinkRequest(_serialization.Model):
    """CreateMeasurementFormSchemaLinkRequest.

    All required parameters must be populated in order to send to server.

    :ivar link_schema_id: Required.
    :vartype link_schema_id: str
    """

    _validation = {
        "link_schema_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "link_schema_id": {"key": "linkSchemaId", "type": "str"},
    }

    def __init__(self, *, link_schema_id: str, **kwargs: Any) -> None:
        """
        :keyword link_schema_id: Required.
        :paramtype link_schema_id: str
        """
        super().__init__(**kwargs)
        self.link_schema_id = link_schema_id


class CreateMeasuringToolManufacturer(_serialization.Model):
    """CreateMeasuringToolManufacturer.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class CreateMeasuringToolRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CreateMeasuringToolRequest.

    All required parameters must be populated in order to send to server.

    :ivar tool_id:
    :vartype tool_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar manufacturer: Required.
    :vartype manufacturer: str
    :ivar type_id: Required.
    :vartype type_id: str
    :ivar sub_type_id:
    :vartype sub_type_id: str
    :ivar unit_id:
    :vartype unit_id: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar non_calibration_tool: Required.
    :vartype non_calibration_tool: bool
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    :ivar serial_number:
    :vartype serial_number: str
    :ivar default_location:
    :vartype default_location: str
    :ivar precision:
    :vartype precision: str
    :ivar upload_key:
    :vartype upload_key: str
    :ivar filename:
    :vartype filename: str
    :ivar initial_calibration_date:
    :vartype initial_calibration_date: ~datetime.datetime
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "manufacturer": {"required": True, "min_length": 1},
        "type_id": {"required": True},
        "non_calibration_tool": {"required": True},
    }

    _attribute_map = {
        "tool_id": {"key": "toolId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "str"},
        "type_id": {"key": "typeId", "type": "str"},
        "sub_type_id": {"key": "subTypeId", "type": "str"},
        "unit_id": {"key": "unitId", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "non_calibration_tool": {"key": "nonCalibrationTool", "type": "bool"},
        "min": {"key": "min", "type": "float"},
        "max": {"key": "max", "type": "float"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "default_location": {"key": "defaultLocation", "type": "str"},
        "precision": {"key": "precision", "type": "str"},
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
        "initial_calibration_date": {"key": "initialCalibrationDate", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        name: str,
        manufacturer: str,
        type_id: str,
        non_calibration_tool: bool,
        tool_id: Optional[str] = None,
        sub_type_id: Optional[str] = None,
        unit_id: Optional[str] = None,
        calibration_interval: Optional[int] = None,
        min: Optional[float] = None,  # pylint: disable=redefined-builtin
        max: Optional[float] = None,  # pylint: disable=redefined-builtin
        serial_number: Optional[str] = None,
        default_location: Optional[str] = None,
        precision: Optional[str] = None,
        upload_key: Optional[str] = None,
        filename: Optional[str] = None,
        initial_calibration_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tool_id:
        :paramtype tool_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword manufacturer: Required.
        :paramtype manufacturer: str
        :keyword type_id: Required.
        :paramtype type_id: str
        :keyword sub_type_id:
        :paramtype sub_type_id: str
        :keyword unit_id:
        :paramtype unit_id: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword non_calibration_tool: Required.
        :paramtype non_calibration_tool: bool
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword default_location:
        :paramtype default_location: str
        :keyword precision:
        :paramtype precision: str
        :keyword upload_key:
        :paramtype upload_key: str
        :keyword filename:
        :paramtype filename: str
        :keyword initial_calibration_date:
        :paramtype initial_calibration_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.tool_id = tool_id
        self.name = name
        self.manufacturer = manufacturer
        self.type_id = type_id
        self.sub_type_id = sub_type_id
        self.unit_id = unit_id
        self.calibration_interval = calibration_interval
        self.non_calibration_tool = non_calibration_tool
        self.min = min
        self.max = max
        self.serial_number = serial_number
        self.default_location = default_location
        self.precision = precision
        self.upload_key = upload_key
        self.filename = filename
        self.initial_calibration_date = initial_calibration_date


class CreateMeasuringToolSubTypeRequest(_serialization.Model):
    """CreateMeasuringToolSubTypeRequest.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar max_number_of_usages_between_calibration:
    :vartype max_number_of_usages_between_calibration: int
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "max_number_of_usages_between_calibration": {"key": "maxNumberOfUsagesBetweenCalibration", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        calibration_interval: Optional[int] = None,
        max_number_of_usages_between_calibration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword max_number_of_usages_between_calibration:
        :paramtype max_number_of_usages_between_calibration: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.calibration_interval = calibration_interval
        self.max_number_of_usages_between_calibration = max_number_of_usages_between_calibration


class CreateMeasuringToolType(_serialization.Model):
    """CreateMeasuringToolType.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar max_number_of_usages_between_calibration:
    :vartype max_number_of_usages_between_calibration: int
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "max_number_of_usages_between_calibration": {"key": "maxNumberOfUsagesBetweenCalibration", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        calibration_interval: Optional[int] = None,
        max_number_of_usages_between_calibration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword max_number_of_usages_between_calibration:
        :paramtype max_number_of_usages_between_calibration: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.calibration_interval = calibration_interval
        self.max_number_of_usages_between_calibration = max_number_of_usages_between_calibration


class CreateMeasuringUnit(_serialization.Model):
    """CreateMeasuringUnit.

    All required parameters must be populated in order to send to server.

    :ivar unit: Required.
    :vartype unit: str
    """

    _validation = {
        "unit": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "unit": {"key": "unit", "type": "str"},
    }

    def __init__(self, *, unit: str, **kwargs: Any) -> None:
        """
        :keyword unit: Required.
        :paramtype unit: str
        """
        super().__init__(**kwargs)
        self.unit = unit


class CreateMrb(_serialization.Model):
    """CreateMrb.

    All required parameters must be populated in order to send to server.

    :ivar customer_order: Required.
    :vartype customer_order: str
    :ivar customer_order_line: Required.
    :vartype customer_order_line: int
    :ivar traces: Required.
    :vartype traces: list[~ignos.api.client.models.CustomerOrderLineTraceItemDto]
    :ivar all_traces: Required.
    :vartype all_traces: bool
    :ivar mrb_template_id: Required.
    :vartype mrb_template_id: str
    :ivar revision: Required.
    :vartype revision: str
    """

    _validation = {
        "customer_order": {"required": True, "min_length": 1},
        "customer_order_line": {"required": True},
        "traces": {"required": True},
        "all_traces": {"required": True},
        "mrb_template_id": {"required": True, "min_length": 1},
        "revision": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_order_line": {"key": "customerOrderLine", "type": "int"},
        "traces": {"key": "traces", "type": "[CustomerOrderLineTraceItemDto]"},
        "all_traces": {"key": "allTraces", "type": "bool"},
        "mrb_template_id": {"key": "mrbTemplateId", "type": "str"},
        "revision": {"key": "revision", "type": "str"},
    }

    def __init__(
        self,
        *,
        customer_order: str,
        customer_order_line: int,
        traces: List["_models.CustomerOrderLineTraceItemDto"],
        all_traces: bool,
        mrb_template_id: str,
        revision: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_order: Required.
        :paramtype customer_order: str
        :keyword customer_order_line: Required.
        :paramtype customer_order_line: int
        :keyword traces: Required.
        :paramtype traces: list[~ignos.api.client.models.CustomerOrderLineTraceItemDto]
        :keyword all_traces: Required.
        :paramtype all_traces: bool
        :keyword mrb_template_id: Required.
        :paramtype mrb_template_id: str
        :keyword revision: Required.
        :paramtype revision: str
        """
        super().__init__(**kwargs)
        self.customer_order = customer_order
        self.customer_order_line = customer_order_line
        self.traces = traces
        self.all_traces = all_traces
        self.mrb_template_id = mrb_template_id
        self.revision = revision


class CreateMrbRevisionRequest(_serialization.Model):
    """CreateMrbRevisionRequest.

    All required parameters must be populated in order to send to server.

    :ivar revision: Required.
    :vartype revision: str
    """

    _validation = {
        "revision": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "revision": {"key": "revision", "type": "str"},
    }

    def __init__(self, *, revision: str, **kwargs: Any) -> None:
        """
        :keyword revision: Required.
        :paramtype revision: str
        """
        super().__init__(**kwargs)
        self.revision = revision


class CreateMrbTemplateRequest(_serialization.Model):
    """CreateMrbTemplateRequest.

    All required parameters must be populated in order to send to server.

    :ivar title: Required.
    :vartype title: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar customer_group_id:
    :vartype customer_group_id: str
    :ivar customer_group_name:
    :vartype customer_group_name: str
    :ivar pdf_upload_key:
    :vartype pdf_upload_key: str
    :ivar pdf_filename:
    :vartype pdf_filename: str
    """

    _validation = {
        "title": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "customer_group_id": {"key": "customerGroupId", "type": "str"},
        "customer_group_name": {"key": "customerGroupName", "type": "str"},
        "pdf_upload_key": {"key": "pdfUploadKey", "type": "str"},
        "pdf_filename": {"key": "pdfFilename", "type": "str"},
    }

    def __init__(
        self,
        *,
        title: str,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_group_id: Optional[str] = None,
        customer_group_name: Optional[str] = None,
        pdf_upload_key: Optional[str] = None,
        pdf_filename: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword title: Required.
        :paramtype title: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword customer_group_id:
        :paramtype customer_group_id: str
        :keyword customer_group_name:
        :paramtype customer_group_name: str
        :keyword pdf_upload_key:
        :paramtype pdf_upload_key: str
        :keyword pdf_filename:
        :paramtype pdf_filename: str
        """
        super().__init__(**kwargs)
        self.title = title
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_group_id = customer_group_id
        self.customer_group_name = customer_group_name
        self.pdf_upload_key = pdf_upload_key
        self.pdf_filename = pdf_filename


class CreateResourceWithMachine(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CreateResourceWithMachine.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar resource_name: Required.
    :vartype resource_name: str
    :ivar resource_description:
    :vartype resource_description: str
    :ivar display_name:
    :vartype display_name: str
    :ivar machine_id: Required.
    :vartype machine_id: str
    :ivar machine_name: Required.
    :vartype machine_name: str
    :ivar machine_description:
    :vartype machine_description: str
    :ivar machine_type: Required.
    :vartype machine_type: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar location:
    :vartype location: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar year:
    :vartype year: str
    :ivar model:
    :vartype model: str
    """

    _validation = {
        "resource_id": {"required": True, "min_length": 1},
        "resource_name": {"required": True, "min_length": 1},
        "machine_id": {"required": True, "min_length": 1},
        "machine_name": {"required": True, "min_length": 1},
        "machine_type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_description": {"key": "resourceDescription", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "machine_id": {"key": "machineId", "type": "str"},
        "machine_name": {"key": "machineName", "type": "str"},
        "machine_description": {"key": "machineDescription", "type": "str"},
        "machine_type": {"key": "machineType", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "year": {"key": "year", "type": "str"},
        "model": {"key": "model", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        resource_name: str,
        machine_id: str,
        machine_name: str,
        machine_type: str,
        resource_description: Optional[str] = None,
        display_name: Optional[str] = None,
        machine_description: Optional[str] = None,
        manufacturer: Optional[str] = None,
        location: Optional[str] = None,
        serial_number: Optional[str] = None,
        year: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword resource_name: Required.
        :paramtype resource_name: str
        :keyword resource_description:
        :paramtype resource_description: str
        :keyword display_name:
        :paramtype display_name: str
        :keyword machine_id: Required.
        :paramtype machine_id: str
        :keyword machine_name: Required.
        :paramtype machine_name: str
        :keyword machine_description:
        :paramtype machine_description: str
        :keyword machine_type: Required.
        :paramtype machine_type: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword location:
        :paramtype location: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword year:
        :paramtype year: str
        :keyword model:
        :paramtype model: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.resource_name = resource_name
        self.resource_description = resource_description
        self.display_name = display_name
        self.machine_id = machine_id
        self.machine_name = machine_name
        self.machine_description = machine_description
        self.machine_type = machine_type
        self.manufacturer = manufacturer
        self.location = location
        self.serial_number = serial_number
        self.year = year
        self.model = model


class CreateResourceWithoutMachine(_serialization.Model):
    """CreateResourceWithoutMachine.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar type: Required.
    :vartype type: str
    :ivar description:
    :vartype description: str
    :ivar display_name:
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        type: str,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword type: Required.
        :paramtype type: str
        :keyword description:
        :paramtype description: str
        :keyword display_name:
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type
        self.description = description
        self.display_name = display_name


class CreateSchemaElement(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """CreateSchemaElement.

    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar section:
    :vartype section: str
    :ivar page_number:
    :vartype page_number: int
    :ivar sheet_zone:
    :vartype sheet_zone: str
    :ivar places:
    :vartype places: int
    :ivar nominal:
    :vartype nominal: float
    :ivar nominal_text:
    :vartype nominal_text: str
    :ivar type:
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar unit_of_measure:
    :vartype unit_of_measure: str
    :ivar plus_tolerance:
    :vartype plus_tolerance: float
    :ivar minus_tolerance:
    :vartype minus_tolerance: float
    :ivar upper_limit:
    :vartype upper_limit: float
    :ivar lower_limit:
    :vartype lower_limit: float
    :ivar inspection_method:
    :vartype inspection_method: str
    :ivar process:
    :vartype process: str
    :ivar classification:
    :vartype classification: str
    :ivar comments:
    :vartype comments: str
    :ivar frequency:
    :vartype frequency: int
    :ivar frequency_parameter:
    :vartype frequency_parameter: int
    :ivar include_in_customer_documentation:
    :vartype include_in_customer_documentation: bool
    :ivar balloon_sequence:
    :vartype balloon_sequence: int
    :ivar balloon_quantity:
    :vartype balloon_quantity: int
    :ivar plus_tolerance_text:
    :vartype plus_tolerance_text: str
    :ivar minus_tolerance_text:
    :vartype minus_tolerance_text: str
    :ivar coating_thickness:
    :vartype coating_thickness: int
    """

    _attribute_map = {
        "balloon_id": {"key": "balloonId", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "page_number": {"key": "pageNumber", "type": "int"},
        "sheet_zone": {"key": "sheetZone", "type": "str"},
        "places": {"key": "places", "type": "int"},
        "nominal": {"key": "nominal", "type": "float"},
        "nominal_text": {"key": "nominalText", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "unit_of_measure": {"key": "unitOfMeasure", "type": "str"},
        "plus_tolerance": {"key": "plusTolerance", "type": "float"},
        "minus_tolerance": {"key": "minusTolerance", "type": "float"},
        "upper_limit": {"key": "upperLimit", "type": "float"},
        "lower_limit": {"key": "lowerLimit", "type": "float"},
        "inspection_method": {"key": "inspectionMethod", "type": "str"},
        "process": {"key": "process", "type": "str"},
        "classification": {"key": "classification", "type": "str"},
        "comments": {"key": "comments", "type": "str"},
        "frequency": {"key": "frequency", "type": "int"},
        "frequency_parameter": {"key": "frequencyParameter", "type": "int"},
        "include_in_customer_documentation": {"key": "includeInCustomerDocumentation", "type": "bool"},
        "balloon_sequence": {"key": "balloonSequence", "type": "int"},
        "balloon_quantity": {"key": "balloonQuantity", "type": "int"},
        "plus_tolerance_text": {"key": "plusToleranceText", "type": "str"},
        "minus_tolerance_text": {"key": "minusToleranceText", "type": "str"},
        "coating_thickness": {"key": "coatingThickness", "type": "int"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        balloon_id: Optional[str] = None,
        section: Optional[str] = None,
        page_number: Optional[int] = None,
        sheet_zone: Optional[str] = None,
        places: Optional[int] = None,
        nominal: Optional[float] = None,
        nominal_text: Optional[str] = None,
        type: Optional[str] = None,
        sub_type: Optional[str] = None,
        unit_of_measure: Optional[str] = None,
        plus_tolerance: Optional[float] = None,
        minus_tolerance: Optional[float] = None,
        upper_limit: Optional[float] = None,
        lower_limit: Optional[float] = None,
        inspection_method: Optional[str] = None,
        process: Optional[str] = None,
        classification: Optional[str] = None,
        comments: Optional[str] = None,
        frequency: Optional[int] = None,
        frequency_parameter: Optional[int] = None,
        include_in_customer_documentation: Optional[bool] = None,
        balloon_sequence: Optional[int] = None,
        balloon_quantity: Optional[int] = None,
        plus_tolerance_text: Optional[str] = None,
        minus_tolerance_text: Optional[str] = None,
        coating_thickness: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword section:
        :paramtype section: str
        :keyword page_number:
        :paramtype page_number: int
        :keyword sheet_zone:
        :paramtype sheet_zone: str
        :keyword places:
        :paramtype places: int
        :keyword nominal:
        :paramtype nominal: float
        :keyword nominal_text:
        :paramtype nominal_text: str
        :keyword type:
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword unit_of_measure:
        :paramtype unit_of_measure: str
        :keyword plus_tolerance:
        :paramtype plus_tolerance: float
        :keyword minus_tolerance:
        :paramtype minus_tolerance: float
        :keyword upper_limit:
        :paramtype upper_limit: float
        :keyword lower_limit:
        :paramtype lower_limit: float
        :keyword inspection_method:
        :paramtype inspection_method: str
        :keyword process:
        :paramtype process: str
        :keyword classification:
        :paramtype classification: str
        :keyword comments:
        :paramtype comments: str
        :keyword frequency:
        :paramtype frequency: int
        :keyword frequency_parameter:
        :paramtype frequency_parameter: int
        :keyword include_in_customer_documentation:
        :paramtype include_in_customer_documentation: bool
        :keyword balloon_sequence:
        :paramtype balloon_sequence: int
        :keyword balloon_quantity:
        :paramtype balloon_quantity: int
        :keyword plus_tolerance_text:
        :paramtype plus_tolerance_text: str
        :keyword minus_tolerance_text:
        :paramtype minus_tolerance_text: str
        :keyword coating_thickness:
        :paramtype coating_thickness: int
        """
        super().__init__(**kwargs)
        self.balloon_id = balloon_id
        self.section = section
        self.page_number = page_number
        self.sheet_zone = sheet_zone
        self.places = places
        self.nominal = nominal
        self.nominal_text = nominal_text
        self.type = type
        self.sub_type = sub_type
        self.unit_of_measure = unit_of_measure
        self.plus_tolerance = plus_tolerance
        self.minus_tolerance = minus_tolerance
        self.upper_limit = upper_limit
        self.lower_limit = lower_limit
        self.inspection_method = inspection_method
        self.process = process
        self.classification = classification
        self.comments = comments
        self.frequency = frequency
        self.frequency_parameter = frequency_parameter
        self.include_in_customer_documentation = include_in_customer_documentation
        self.balloon_sequence = balloon_sequence
        self.balloon_quantity = balloon_quantity
        self.plus_tolerance_text = plus_tolerance_text
        self.minus_tolerance_text = minus_tolerance_text
        self.coating_thickness = coating_thickness


class CreateSupplierInvite(_serialization.Model):
    """CreateSupplierInvite.

    All required parameters must be populated in order to send to server.

    :ivar supplier_id: Required.
    :vartype supplier_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar username: Required.
    :vartype username: str
    :ivar deadline: Required.
    :vartype deadline: ~datetime.datetime
    """

    _validation = {
        "supplier_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "username": {"required": True, "min_length": 1},
        "deadline": {"required": True},
    }

    _attribute_map = {
        "supplier_id": {"key": "supplierId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "deadline": {"key": "deadline", "type": "iso-8601"},
    }

    def __init__(
        self, *, supplier_id: str, name: str, username: str, deadline: datetime.datetime, **kwargs: Any
    ) -> None:
        """
        :keyword supplier_id: Required.
        :paramtype supplier_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword username: Required.
        :paramtype username: str
        :keyword deadline: Required.
        :paramtype deadline: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.supplier_id = supplier_id
        self.name = name
        self.username = username
        self.deadline = deadline


class CreateSupplierMapping(_serialization.Model):
    """CreateSupplierMapping.

    All required parameters must be populated in order to send to server.

    :ivar company_id: Required.
    :vartype company_id: str
    :ivar existing_supplier_id: Required.
    :vartype existing_supplier_id: str
    :ivar new_supplier_id: Required.
    :vartype new_supplier_id: str
    """

    _validation = {
        "company_id": {"required": True, "min_length": 1},
        "existing_supplier_id": {"required": True, "min_length": 1},
        "new_supplier_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "company_id": {"key": "companyId", "type": "str"},
        "existing_supplier_id": {"key": "existingSupplierId", "type": "str"},
        "new_supplier_id": {"key": "newSupplierId", "type": "str"},
    }

    def __init__(self, *, company_id: str, existing_supplier_id: str, new_supplier_id: str, **kwargs: Any) -> None:
        """
        :keyword company_id: Required.
        :paramtype company_id: str
        :keyword existing_supplier_id: Required.
        :paramtype existing_supplier_id: str
        :keyword new_supplier_id: Required.
        :paramtype new_supplier_id: str
        """
        super().__init__(**kwargs)
        self.company_id = company_id
        self.existing_supplier_id = existing_supplier_id
        self.new_supplier_id = new_supplier_id


class CreateWorkOrderMapping(_serialization.Model):
    """CreateWorkOrderMapping.

    All required parameters must be populated in order to send to server.

    :ivar existing_work_order_id: Required.
    :vartype existing_work_order_id: str
    :ivar new_work_order_id: Required.
    :vartype new_work_order_id: str
    """

    _validation = {
        "existing_work_order_id": {"required": True, "min_length": 1},
        "new_work_order_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "existing_work_order_id": {"key": "existingWorkOrderId", "type": "str"},
        "new_work_order_id": {"key": "newWorkOrderId", "type": "str"},
    }

    def __init__(self, *, existing_work_order_id: str, new_work_order_id: str, **kwargs: Any) -> None:
        """
        :keyword existing_work_order_id: Required.
        :paramtype existing_work_order_id: str
        :keyword new_work_order_id: Required.
        :paramtype new_work_order_id: str
        """
        super().__init__(**kwargs)
        self.existing_work_order_id = existing_work_order_id
        self.new_work_order_id = new_work_order_id


class CreateWorkspace(_serialization.Model):
    """CreateWorkspace.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, name: str, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description


class CreateWorkspaceFromTemplate(_serialization.Model):
    """CreateWorkspaceFromTemplate.

    All required parameters must be populated in order to send to server.

    :ivar workspace_template_id: Required.
    :vartype workspace_template_id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "workspace_template_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "workspace_template_id": {"key": "workspaceTemplateId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        workspace_template_id: str,
        name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workspace_template_id: Required.
        :paramtype workspace_template_id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.workspace_template_id = workspace_template_id
        self.name = name
        self.description = description


class CreateWorkspaceTemplate(_serialization.Model):
    """CreateWorkspaceTemplate.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, name: str, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description


class CurrentCustomerDto(_serialization.Model):
    """CurrentCustomerDto.

    :ivar name:
    :vartype name: str
    :ivar logo_url:
    :vartype logo_url: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "logo_url": {"key": "logoUrl", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, logo_url: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword logo_url:
        :paramtype logo_url: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.logo_url = logo_url


class CurrentWorkActivityDto(_serialization.Model):
    """CurrentWorkActivityDto.

    All required parameters must be populated in order to send to server.

    :ivar active_work: Required.
    :vartype active_work: list[~ignos.api.client.models.ActiveWorkDto]
    :ivar stopped_work: Required.
    :vartype stopped_work: list[~ignos.api.client.models.StoppedWorkDto]
    """

    _validation = {
        "active_work": {"required": True},
        "stopped_work": {"required": True},
    }

    _attribute_map = {
        "active_work": {"key": "activeWork", "type": "[ActiveWorkDto]"},
        "stopped_work": {"key": "stoppedWork", "type": "[StoppedWorkDto]"},
    }

    def __init__(
        self, *, active_work: List["_models.ActiveWorkDto"], stopped_work: List["_models.StoppedWorkDto"], **kwargs: Any
    ) -> None:
        """
        :keyword active_work: Required.
        :paramtype active_work: list[~ignos.api.client.models.ActiveWorkDto]
        :keyword stopped_work: Required.
        :paramtype stopped_work: list[~ignos.api.client.models.StoppedWorkDto]
        """
        super().__init__(**kwargs)
        self.active_work = active_work
        self.stopped_work = stopped_work


class CurrentWorkDto(_serialization.Model):
    """CurrentWorkDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar upn:
    :vartype upn: str
    :ivar personnel_number: Required.
    :vartype personnel_number: str
    :ivar active: Required.
    :vartype active: bool
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    :ivar user:
    :vartype user: ~ignos.api.client.models.UserDto
    :ivar started_quantity:
    :vartype started_quantity: int
    :ivar work_type: Required. Known values are: "None", "Production", and "Setup".
    :vartype work_type: str or ~ignos.api.client.models.WorkTypeDto
    """

    _validation = {
        "resource_id": {"required": True, "min_length": 1},
        "upn": {"readonly": True},
        "personnel_number": {"required": True, "readonly": True, "min_length": 1},
        "active": {"required": True, "readonly": True},
        "start_time": {"required": True, "readonly": True},
        "end_time": {"readonly": True},
        "user": {"readonly": True},
        "started_quantity": {"readonly": True},
        "work_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "upn": {"key": "upn", "type": "str"},
        "personnel_number": {"key": "personnelNumber", "type": "str"},
        "active": {"key": "active", "type": "bool"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "user": {"key": "user", "type": "UserDto"},
        "started_quantity": {"key": "startedQuantity", "type": "int"},
        "work_type": {"key": "workType", "type": "str"},
    }

    def __init__(self, *, resource_id: str, **kwargs: Any) -> None:
        """
        :keyword resource_id: Required.
        :paramtype resource_id: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.upn = None
        self.personnel_number = None
        self.active = None
        self.start_time = None
        self.end_time = None
        self.user = None
        self.started_quantity = None
        self.work_type = None


class CustomerDto(_serialization.Model):
    """CustomerDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar group_id:
    :vartype group_id: str
    :ivar group_name:
    :vartype group_name: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "group_id": {"key": "groupId", "type": "str"},
        "group_name": {"key": "groupName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        group_id: Optional[str] = None,
        group_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword group_id:
        :paramtype group_id: str
        :keyword group_name:
        :paramtype group_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.group_id = group_id
        self.group_name = group_name


class CustomerDtoPagedResult(_serialization.Model):
    """CustomerDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.CustomerDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[CustomerDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.CustomerDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.CustomerDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class CustomerGroupDto(_serialization.Model):
    """CustomerGroupDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: str, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class CustomerOrderConsumptionRequest(_serialization.Model):
    """CustomerOrderConsumptionRequest.

    :ivar customer_order_lines:
    :vartype customer_order_lines: list[int]
    """

    _attribute_map = {
        "customer_order_lines": {"key": "customerOrderLines", "type": "[int]"},
    }

    def __init__(self, *, customer_order_lines: Optional[List[int]] = None, **kwargs: Any) -> None:
        """
        :keyword customer_order_lines:
        :paramtype customer_order_lines: list[int]
        """
        super().__init__(**kwargs)
        self.customer_order_lines = customer_order_lines


class CustomerOrderDto(_serialization.Model):
    """CustomerOrderDto.

    :ivar id:
    :vartype id: str
    :ivar external_order_number:
    :vartype external_order_number: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        external_order_number: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword external_order_number:
        :paramtype external_order_number: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.external_order_number = external_order_number
        self.customer_id = customer_id
        self.customer_name = customer_name


class CustomerOrderDtoPagedResult(_serialization.Model):
    """CustomerOrderDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.CustomerOrderDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[CustomerOrderDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.CustomerOrderDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.CustomerOrderDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class CustomerOrderInfoDto(_serialization.Model):
    """CustomerOrderInfoDto.

    :ivar id:
    :vartype id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.customer_id = customer_id
        self.customer_name = customer_name


class CustomerOrderLineDto(_serialization.Model):
    """CustomerOrderLineDto.

    All required parameters must be populated in order to send to server.

    :ivar line: Required.
    :vartype line: int
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar remaining_quantity: Required.
    :vartype remaining_quantity: float
    :ivar delivered_quantity: Required.
    :vartype delivered_quantity: float
    :ivar unit: Required.
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed", and
     "Deleted".
    :vartype status: str or ~ignos.api.client.models.CustomerOrderLineStatus
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar delivery_date:
    :vartype delivery_date: ~datetime.datetime
    :ivar workorder_hiearchy: Required.
    :vartype workorder_hiearchy: list[~ignos.api.client.models.WorkorderHierarchyDto]
    """

    _validation = {
        "line": {"required": True},
        "quantity": {"required": True},
        "remaining_quantity": {"required": True},
        "delivered_quantity": {"required": True},
        "unit": {"required": True, "min_length": 1},
        "status": {"required": True},
        "part": {"required": True},
        "workorder_hiearchy": {"required": True},
    }

    _attribute_map = {
        "line": {"key": "line", "type": "int"},
        "quantity": {"key": "quantity", "type": "float"},
        "remaining_quantity": {"key": "remainingQuantity", "type": "float"},
        "delivered_quantity": {"key": "deliveredQuantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "delivery_date": {"key": "deliveryDate", "type": "iso-8601"},
        "workorder_hiearchy": {"key": "workorderHiearchy", "type": "[WorkorderHierarchyDto]"},
    }

    def __init__(
        self,
        *,
        line: int,
        quantity: float,
        remaining_quantity: float,
        delivered_quantity: float,
        unit: str,
        status: Union[str, "_models.CustomerOrderLineStatus"],
        part: "_models.PartDto",
        workorder_hiearchy: List["_models.WorkorderHierarchyDto"],
        delivery_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword line: Required.
        :paramtype line: int
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword remaining_quantity: Required.
        :paramtype remaining_quantity: float
        :keyword delivered_quantity: Required.
        :paramtype delivered_quantity: float
        :keyword unit: Required.
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed", and
         "Deleted".
        :paramtype status: str or ~ignos.api.client.models.CustomerOrderLineStatus
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword delivery_date:
        :paramtype delivery_date: ~datetime.datetime
        :keyword workorder_hiearchy: Required.
        :paramtype workorder_hiearchy: list[~ignos.api.client.models.WorkorderHierarchyDto]
        """
        super().__init__(**kwargs)
        self.line = line
        self.quantity = quantity
        self.remaining_quantity = remaining_quantity
        self.delivered_quantity = delivered_quantity
        self.unit = unit
        self.status = status
        self.part = part
        self.delivery_date = delivery_date
        self.workorder_hiearchy = workorder_hiearchy


class CustomerOrderLineTraceItemDto(_serialization.Model):
    """CustomerOrderLineTraceItemDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order: Required.
    :vartype work_order: str
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar serial_number:
    :vartype serial_number: str
    """

    _validation = {
        "work_order": {"required": True, "min_length": 1},
        "sequence": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "work_order": {"key": "workOrder", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
    }

    def __init__(self, *, work_order: str, sequence: str, serial_number: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword work_order: Required.
        :paramtype work_order: str
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword serial_number:
        :paramtype serial_number: str
        """
        super().__init__(**kwargs)
        self.work_order = work_order
        self.sequence = sequence
        self.serial_number = serial_number


class CustomerOrderLineTraceStatusDto(_serialization.Model):
    """CustomerOrderLineTraceStatusDto.

    All required parameters must be populated in order to send to server.

    :ivar line: Required.
    :vartype line: int
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar work_orders: Required.
    :vartype work_orders:
     list[~ignos.api.client.models.CustomerOrderLineWorkOrderTraceStatusNodeDto]
    """

    _validation = {
        "line": {"required": True},
        "quantity": {"required": True},
        "part": {"required": True},
        "work_orders": {"required": True},
    }

    _attribute_map = {
        "line": {"key": "line", "type": "int"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "work_orders": {"key": "workOrders", "type": "[CustomerOrderLineWorkOrderTraceStatusNodeDto]"},
    }

    def __init__(
        self,
        *,
        line: int,
        quantity: float,
        part: "_models.PartDto",
        work_orders: List["_models.CustomerOrderLineWorkOrderTraceStatusNodeDto"],
        unit: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword line: Required.
        :paramtype line: int
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword work_orders: Required.
        :paramtype work_orders:
         list[~ignos.api.client.models.CustomerOrderLineWorkOrderTraceStatusNodeDto]
        """
        super().__init__(**kwargs)
        self.line = line
        self.quantity = quantity
        self.unit = unit
        self.part = part
        self.work_orders = work_orders


class CustomerOrderLineWorkOrderTraceStatusNodeDto(_serialization.Model):  # pylint: disable=name-too-long
    """CustomerOrderLineWorkOrderTraceStatusNodeDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
    :vartype trace_type: str or ~ignos.api.client.models.TraceType
    :ivar trace_exists: Required.
    :vartype trace_exists: bool
    :ivar trace_status: Required. Known values are: "None", "Unavailable", "NotNeeded", "Partial",
     and "Completed".
    :vartype trace_status: str or ~ignos.api.client.models.TraceStatus
    :ivar work_orders:
    :vartype work_orders:
     list[~ignos.api.client.models.CustomerOrderLineWorkOrderTraceStatusNodeDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "part": {"required": True},
        "trace_type": {"required": True},
        "trace_exists": {"required": True},
        "trace_status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "trace_type": {"key": "traceType", "type": "str"},
        "trace_exists": {"key": "traceExists", "type": "bool"},
        "trace_status": {"key": "traceStatus", "type": "str"},
        "work_orders": {"key": "workOrders", "type": "[CustomerOrderLineWorkOrderTraceStatusNodeDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        part: "_models.PartDto",
        trace_type: Union[str, "_models.TraceType"],
        trace_exists: bool,
        trace_status: Union[str, "_models.TraceStatus"],
        work_orders: Optional[List["_models.CustomerOrderLineWorkOrderTraceStatusNodeDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
        :paramtype trace_type: str or ~ignos.api.client.models.TraceType
        :keyword trace_exists: Required.
        :paramtype trace_exists: bool
        :keyword trace_status: Required. Known values are: "None", "Unavailable", "NotNeeded",
         "Partial", and "Completed".
        :paramtype trace_status: str or ~ignos.api.client.models.TraceStatus
        :keyword work_orders:
        :paramtype work_orders:
         list[~ignos.api.client.models.CustomerOrderLineWorkOrderTraceStatusNodeDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.part = part
        self.trace_type = trace_type
        self.trace_exists = trace_exists
        self.trace_status = trace_status
        self.work_orders = work_orders


class CustomerOrderTraceStatusDto(_serialization.Model):
    """CustomerOrderTraceStatusDto.

    All required parameters must be populated in order to send to server.

    :ivar lines: Required.
    :vartype lines: list[~ignos.api.client.models.CustomerOrderLineTraceStatusDto]
    """

    _validation = {
        "lines": {"required": True},
    }

    _attribute_map = {
        "lines": {"key": "lines", "type": "[CustomerOrderLineTraceStatusDto]"},
    }

    def __init__(self, *, lines: List["_models.CustomerOrderLineTraceStatusDto"], **kwargs: Any) -> None:
        """
        :keyword lines: Required.
        :paramtype lines: list[~ignos.api.client.models.CustomerOrderLineTraceStatusDto]
        """
        super().__init__(**kwargs)
        self.lines = lines


class DataHealthDto(_serialization.Model):
    """DataHealthDto.

    :ivar machines:
    :vartype machines: list[~ignos.api.client.models.MachineDataHealthDto]
    """

    _attribute_map = {
        "machines": {"key": "machines", "type": "[MachineDataHealthDto]"},
    }

    def __init__(self, *, machines: Optional[List["_models.MachineDataHealthDto"]] = None, **kwargs: Any) -> None:
        """
        :keyword machines:
        :paramtype machines: list[~ignos.api.client.models.MachineDataHealthDto]
        """
        super().__init__(**kwargs)
        self.machines = machines


class DeleteMrbTemplateRequest(_serialization.Model):
    """DeleteMrbTemplateRequest.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class DeletePartDrawingRequest(_serialization.Model):
    """DeletePartDrawingRequest.

    All required parameters must be populated in order to send to server.

    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, filename: str, **kwargs: Any) -> None:
        """
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.filename = filename


class DepartmentDto(_serialization.Model):
    """DepartmentDto.

    All required parameters must be populated in order to send to server.

    :ivar number: Required.
    :vartype number: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "number": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "number": {"key": "number", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, number: str, name: str, **kwargs: Any) -> None:
        """
        :keyword number: Required.
        :paramtype number: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.number = number
        self.name = name


class DeprecateToolRequest(_serialization.Model):
    """DeprecateToolRequest.

    :ivar date:
    :vartype date: ~datetime.datetime
    """

    _attribute_map = {
        "date": {"key": "date", "type": "iso-8601"},
    }

    def __init__(self, *, date: Optional[datetime.datetime] = None, **kwargs: Any) -> None:
        """
        :keyword date:
        :paramtype date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.date = date


class DocumentGeneratorTypeDto(_serialization.Model):
    """DocumentGeneratorTypeDto.

    All required parameters must be populated in order to send to server.

    :ivar key: Required.
    :vartype key: str
    :ivar description: Required.
    :vartype description: str
    """

    _validation = {
        "key": {"required": True, "min_length": 1},
        "description": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, key: str, description: str, **kwargs: Any) -> None:
        """
        :keyword key: Required.
        :paramtype key: str
        :keyword description: Required.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.key = key
        self.description = description


class DocumentLinkDto(_serialization.Model):
    """DocumentLinkDto.

    All required parameters must be populated in order to send to server.

    :ivar url: Required.
    :vartype url: str
    """

    _validation = {
        "url": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
    }

    def __init__(self, *, url: str, **kwargs: Any) -> None:
        """
        :keyword url: Required.
        :paramtype url: str
        """
        super().__init__(**kwargs)
        self.url = url


class DocumentRevisionApprovalDto(_serialization.Model):
    """DocumentRevisionApprovalDto.

    All required parameters must be populated in order to send to server.

    :ivar user: Required.
    :vartype user: ~ignos.api.client.models.UserDto
    :ivar approval_date: Required.
    :vartype approval_date: ~datetime.datetime
    """

    _validation = {
        "user": {"required": True},
        "approval_date": {"required": True},
    }

    _attribute_map = {
        "user": {"key": "user", "type": "UserDto"},
        "approval_date": {"key": "approvalDate", "type": "iso-8601"},
    }

    def __init__(self, *, user: "_models.UserDto", approval_date: datetime.datetime, **kwargs: Any) -> None:
        """
        :keyword user: Required.
        :paramtype user: ~ignos.api.client.models.UserDto
        :keyword approval_date: Required.
        :paramtype approval_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.user = user
        self.approval_date = approval_date


class DocumentTagDto(_serialization.Model):
    """DocumentTagDto.

    :ivar key:
    :vartype key: str
    :ivar value:
    :vartype value: str
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, key: Optional[str] = None, value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword value:
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.key = key
        self.value = value


class DocumentTypeDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """DocumentTypeDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar title:
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar active: Required.
    :vartype active: bool
    :ivar number_key: Known values are: "Multiple" and "SingleDocument".
    :vartype number_key: str or ~ignos.api.client.models.DocumentNumberKey
    :ivar document_number_pattern:
    :vartype document_number_pattern: str
    :ivar workflow_type: Required. Known values are: "None", "CustomerProvided",
     "CustomerApproval", and "InternalWithFix".
    :vartype workflow_type: str or ~ignos.api.client.models.DocumentWorkflowType
    :ivar file_type:
    :vartype file_type: str
    :ivar is_internal_document_type: Required.
    :vartype is_internal_document_type: bool
    :ivar is_generated_document_type: Required.
    :vartype is_generated_document_type: bool
    :ivar generated_document_key:
    :vartype generated_document_key: str
    :ivar require_portable_file: Required.
    :vartype require_portable_file: bool
    :ivar category: Required. Known values are: "General", "Procedure", "Drawing", "Report", and
     "Certificate".
    :vartype category: str or ~ignos.api.client.models.DocumentTypeCategory
    :ivar can_assign_document_number: Required.
    :vartype can_assign_document_number: bool
    :ivar import_tag:
    :vartype import_tag: str
    :ivar document_requirement_strategy: Required. Known values are: "None", "WorkOrder", "Lot",
     "Drawing", and "CustomerOrderLine".
    :vartype document_requirement_strategy: str or
     ~ignos.api.client.models.DocumentRequirementStrategy
    :ivar can_link_document: Required.
    :vartype can_link_document: bool
    :ivar require_dc_approval: Required.
    :vartype require_dc_approval: bool
    :ivar search_option: Known values are: "IncludeApproved", "IncludeDraft", and "Exclude".
    :vartype search_option: str or ~ignos.api.client.models.DocumentTypeSearchOption
    :ivar can_have_certificate: Required.
    :vartype can_have_certificate: bool
    :ivar used: Required.
    :vartype used: bool
    :ivar available_document_tags: Required.
    :vartype available_document_tags: list[str]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "active": {"required": True},
        "workflow_type": {"required": True},
        "is_internal_document_type": {"required": True},
        "is_generated_document_type": {"required": True},
        "require_portable_file": {"required": True},
        "category": {"required": True},
        "can_assign_document_number": {"required": True},
        "document_requirement_strategy": {"required": True},
        "can_link_document": {"required": True},
        "require_dc_approval": {"required": True},
        "can_have_certificate": {"required": True},
        "used": {"required": True},
        "available_document_tags": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "active": {"key": "active", "type": "bool"},
        "number_key": {"key": "numberKey", "type": "str"},
        "document_number_pattern": {"key": "documentNumberPattern", "type": "str"},
        "workflow_type": {"key": "workflowType", "type": "str"},
        "file_type": {"key": "fileType", "type": "str"},
        "is_internal_document_type": {"key": "isInternalDocumentType", "type": "bool"},
        "is_generated_document_type": {"key": "isGeneratedDocumentType", "type": "bool"},
        "generated_document_key": {"key": "generatedDocumentKey", "type": "str"},
        "require_portable_file": {"key": "requirePortableFile", "type": "bool"},
        "category": {"key": "category", "type": "str"},
        "can_assign_document_number": {"key": "canAssignDocumentNumber", "type": "bool"},
        "import_tag": {"key": "importTag", "type": "str"},
        "document_requirement_strategy": {"key": "documentRequirementStrategy", "type": "str"},
        "can_link_document": {"key": "canLinkDocument", "type": "bool"},
        "require_dc_approval": {"key": "requireDCApproval", "type": "bool"},
        "search_option": {"key": "searchOption", "type": "str"},
        "can_have_certificate": {"key": "canHaveCertificate", "type": "bool"},
        "used": {"key": "used", "type": "bool"},
        "available_document_tags": {"key": "availableDocumentTags", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        active: bool,
        workflow_type: Union[str, "_models.DocumentWorkflowType"],
        is_internal_document_type: bool,
        is_generated_document_type: bool,
        require_portable_file: bool,
        category: Union[str, "_models.DocumentTypeCategory"],
        can_assign_document_number: bool,
        document_requirement_strategy: Union[str, "_models.DocumentRequirementStrategy"],
        can_link_document: bool,
        require_dc_approval: bool,
        can_have_certificate: bool,
        used: bool,
        available_document_tags: List[str],
        title: Optional[str] = None,
        description: Optional[str] = None,
        number_key: Optional[Union[str, "_models.DocumentNumberKey"]] = None,
        document_number_pattern: Optional[str] = None,
        file_type: Optional[str] = None,
        generated_document_key: Optional[str] = None,
        import_tag: Optional[str] = None,
        search_option: Optional[Union[str, "_models.DocumentTypeSearchOption"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword title:
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword active: Required.
        :paramtype active: bool
        :keyword number_key: Known values are: "Multiple" and "SingleDocument".
        :paramtype number_key: str or ~ignos.api.client.models.DocumentNumberKey
        :keyword document_number_pattern:
        :paramtype document_number_pattern: str
        :keyword workflow_type: Required. Known values are: "None", "CustomerProvided",
         "CustomerApproval", and "InternalWithFix".
        :paramtype workflow_type: str or ~ignos.api.client.models.DocumentWorkflowType
        :keyword file_type:
        :paramtype file_type: str
        :keyword is_internal_document_type: Required.
        :paramtype is_internal_document_type: bool
        :keyword is_generated_document_type: Required.
        :paramtype is_generated_document_type: bool
        :keyword generated_document_key:
        :paramtype generated_document_key: str
        :keyword require_portable_file: Required.
        :paramtype require_portable_file: bool
        :keyword category: Required. Known values are: "General", "Procedure", "Drawing", "Report", and
         "Certificate".
        :paramtype category: str or ~ignos.api.client.models.DocumentTypeCategory
        :keyword can_assign_document_number: Required.
        :paramtype can_assign_document_number: bool
        :keyword import_tag:
        :paramtype import_tag: str
        :keyword document_requirement_strategy: Required. Known values are: "None", "WorkOrder", "Lot",
         "Drawing", and "CustomerOrderLine".
        :paramtype document_requirement_strategy: str or
         ~ignos.api.client.models.DocumentRequirementStrategy
        :keyword can_link_document: Required.
        :paramtype can_link_document: bool
        :keyword require_dc_approval: Required.
        :paramtype require_dc_approval: bool
        :keyword search_option: Known values are: "IncludeApproved", "IncludeDraft", and "Exclude".
        :paramtype search_option: str or ~ignos.api.client.models.DocumentTypeSearchOption
        :keyword can_have_certificate: Required.
        :paramtype can_have_certificate: bool
        :keyword used: Required.
        :paramtype used: bool
        :keyword available_document_tags: Required.
        :paramtype available_document_tags: list[str]
        """
        super().__init__(**kwargs)
        self.id = id
        self.title = title
        self.description = description
        self.active = active
        self.number_key = number_key
        self.document_number_pattern = document_number_pattern
        self.workflow_type = workflow_type
        self.file_type = file_type
        self.is_internal_document_type = is_internal_document_type
        self.is_generated_document_type = is_generated_document_type
        self.generated_document_key = generated_document_key
        self.require_portable_file = require_portable_file
        self.category = category
        self.can_assign_document_number = can_assign_document_number
        self.import_tag = import_tag
        self.document_requirement_strategy = document_requirement_strategy
        self.can_link_document = can_link_document
        self.require_dc_approval = require_dc_approval
        self.search_option = search_option
        self.can_have_certificate = can_have_certificate
        self.used = used
        self.available_document_tags = available_document_tags


class DocumentTypeRuleDto(_serialization.Model):
    """DocumentTypeRuleDto.

    :ivar tag:
    :vartype tag: str
    :ivar requirement: Known values are: "NotAllowed", "Optional", and "Required".
    :vartype requirement: str or ~ignos.api.client.models.DocumentMetadataRequirement
    :ivar mutability: Known values are: "Immutable", "Appendable", and "Mutable".
    :vartype mutability: str or ~ignos.api.client.models.Mutability
    :ivar rule_type: Known values are: "Tag", "Sequences", "OrderLines", and "LotNumbers".
    :vartype rule_type: str or ~ignos.api.client.models.DocumentRuleType
    """

    _attribute_map = {
        "tag": {"key": "tag", "type": "str"},
        "requirement": {"key": "requirement", "type": "str"},
        "mutability": {"key": "mutability", "type": "str"},
        "rule_type": {"key": "ruleType", "type": "str"},
    }

    def __init__(
        self,
        *,
        tag: Optional[str] = None,
        requirement: Optional[Union[str, "_models.DocumentMetadataRequirement"]] = None,
        mutability: Optional[Union[str, "_models.Mutability"]] = None,
        rule_type: Optional[Union[str, "_models.DocumentRuleType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tag:
        :paramtype tag: str
        :keyword requirement: Known values are: "NotAllowed", "Optional", and "Required".
        :paramtype requirement: str or ~ignos.api.client.models.DocumentMetadataRequirement
        :keyword mutability: Known values are: "Immutable", "Appendable", and "Mutable".
        :paramtype mutability: str or ~ignos.api.client.models.Mutability
        :keyword rule_type: Known values are: "Tag", "Sequences", "OrderLines", and "LotNumbers".
        :paramtype rule_type: str or ~ignos.api.client.models.DocumentRuleType
        """
        super().__init__(**kwargs)
        self.tag = tag
        self.requirement = requirement
        self.mutability = mutability
        self.rule_type = rule_type


class DocumentTypeRuleTypeDto(_serialization.Model):
    """DocumentTypeRuleTypeDto.

    :ivar tag:
    :vartype tag: str
    :ivar rule_type: Known values are: "Tag", "Sequences", "OrderLines", and "LotNumbers".
    :vartype rule_type: str or ~ignos.api.client.models.DocumentRuleType
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        "tag": {"key": "tag", "type": "str"},
        "rule_type": {"key": "ruleType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        tag: Optional[str] = None,
        rule_type: Optional[Union[str, "_models.DocumentRuleType"]] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tag:
        :paramtype tag: str
        :keyword rule_type: Known values are: "Tag", "Sequences", "OrderLines", and "LotNumbers".
        :paramtype rule_type: str or ~ignos.api.client.models.DocumentRuleType
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.tag = tag
        self.rule_type = rule_type
        self.description = description


class DownloadDto(_serialization.Model):
    """DownloadDto.

    All required parameters must be populated in order to send to server.

    :ivar url: Required.
    :vartype url: str
    :ivar expires: Required.
    :vartype expires: ~datetime.datetime
    """

    _validation = {
        "url": {"required": True, "min_length": 1},
        "expires": {"required": True},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "expires": {"key": "expires", "type": "iso-8601"},
    }

    def __init__(self, *, url: str, expires: datetime.datetime, **kwargs: Any) -> None:
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword expires: Required.
        :paramtype expires: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.url = url
        self.expires = expires


class DrawingDto(_serialization.Model):
    """DrawingDto.

    All required parameters must be populated in order to send to server.

    :ivar drawing_number: Required.
    :vartype drawing_number: str
    :ivar revision:
    :vartype revision: str
    :ivar status: Required.
    :vartype status: str
    :ivar files: Required.
    :vartype files: list[~ignos.api.client.models.DrawingFileDto]
    """

    _validation = {
        "drawing_number": {"required": True, "min_length": 1},
        "status": {"required": True, "min_length": 1},
        "files": {"required": True},
    }

    _attribute_map = {
        "drawing_number": {"key": "drawingNumber", "type": "str"},
        "revision": {"key": "revision", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "files": {"key": "files", "type": "[DrawingFileDto]"},
    }

    def __init__(
        self,
        *,
        drawing_number: str,
        status: str,
        files: List["_models.DrawingFileDto"],
        revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword drawing_number: Required.
        :paramtype drawing_number: str
        :keyword revision:
        :paramtype revision: str
        :keyword status: Required.
        :paramtype status: str
        :keyword files: Required.
        :paramtype files: list[~ignos.api.client.models.DrawingFileDto]
        """
        super().__init__(**kwargs)
        self.drawing_number = drawing_number
        self.revision = revision
        self.status = status
        self.files = files


class DrawingFileDto(_serialization.Model):
    """DrawingFileDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar name: Required.
    :vartype name: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(
        self, *, id: int, name: str, comment: Optional[str] = None, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.comment = comment


class ElectricalIotConfigDto(_serialization.Model):
    """ElectricalIotConfigDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar type_id: Required.
    :vartype type_id: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar asset_external_id:
    :vartype asset_external_id: str
    :ivar phases:
    :vartype phases: int
    :ivar electrical_asset_id:
    :vartype electrical_asset_id: int
    :ivar electrical_asset_external_id:
    :vartype electrical_asset_external_id: str
    :ivar electrical_timeseries_id:
    :vartype electrical_timeseries_id: int
    :ivar electrical_timeseries_external_id:
    :vartype electrical_timeseries_external_id: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "type_id": {"required": True, "min_length": 1},
        "asset_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type_id": {"key": "typeId", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "asset_id": {"key": "assetId", "type": "int"},
        "asset_external_id": {"key": "assetExternalId", "type": "str"},
        "phases": {"key": "phases", "type": "int"},
        "electrical_asset_id": {"key": "electricalAssetId", "type": "int"},
        "electrical_asset_external_id": {"key": "electricalAssetExternalId", "type": "str"},
        "electrical_timeseries_id": {"key": "electricalTimeseriesId", "type": "int"},
        "electrical_timeseries_external_id": {"key": "electricalTimeseriesExternalId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type_id: str,
        asset_id: int,
        serial_number: Optional[str] = None,
        asset_external_id: Optional[str] = None,
        phases: Optional[int] = None,
        electrical_asset_id: Optional[int] = None,
        electrical_asset_external_id: Optional[str] = None,
        electrical_timeseries_id: Optional[int] = None,
        electrical_timeseries_external_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword type_id: Required.
        :paramtype type_id: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword asset_external_id:
        :paramtype asset_external_id: str
        :keyword phases:
        :paramtype phases: int
        :keyword electrical_asset_id:
        :paramtype electrical_asset_id: int
        :keyword electrical_asset_external_id:
        :paramtype electrical_asset_external_id: str
        :keyword electrical_timeseries_id:
        :paramtype electrical_timeseries_id: int
        :keyword electrical_timeseries_external_id:
        :paramtype electrical_timeseries_external_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.type_id = type_id
        self.serial_number = serial_number
        self.asset_id = asset_id
        self.asset_external_id = asset_external_id
        self.phases = phases
        self.electrical_asset_id = electrical_asset_id
        self.electrical_asset_external_id = electrical_asset_external_id
        self.electrical_timeseries_id = electrical_timeseries_id
        self.electrical_timeseries_external_id = electrical_timeseries_external_id


class EmployeeDto(_serialization.Model):
    """EmployeeDto.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar upn:
    :vartype upn: str
    :ivar azure_ad_object_id:
    :vartype azure_ad_object_id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "upn": {"key": "upn", "type": "str"},
        "azure_ad_object_id": {"key": "azureAdObjectId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        upn: Optional[str] = None,
        azure_ad_object_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword upn:
        :paramtype upn: str
        :keyword azure_ad_object_id:
        :paramtype azure_ad_object_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.upn = upn
        self.azure_ad_object_id = azure_ad_object_id


class ExportDimensionReportRequest(_serialization.Model):
    """ExportDimensionReportRequest.

    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar supplier_edition:
    :vartype supplier_edition: bool
    :ivar include_all_schemas_and_elements:
    :vartype include_all_schemas_and_elements: bool
    :ivar create_blank_report:
    :vartype create_blank_report: bool
    :ivar sequences:
    :vartype sequences: list[str]
    """

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "supplier_edition": {"key": "supplierEdition", "type": "bool"},
        "include_all_schemas_and_elements": {"key": "includeAllSchemasAndElements", "type": "bool"},
        "create_blank_report": {"key": "createBlankReport", "type": "bool"},
        "sequences": {"key": "sequences", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        supplier_edition: Optional[bool] = None,
        include_all_schemas_and_elements: Optional[bool] = None,
        create_blank_report: Optional[bool] = None,
        sequences: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword supplier_edition:
        :paramtype supplier_edition: bool
        :keyword include_all_schemas_and_elements:
        :paramtype include_all_schemas_and_elements: bool
        :keyword create_blank_report:
        :paramtype create_blank_report: bool
        :keyword sequences:
        :paramtype sequences: list[str]
        """
        super().__init__(**kwargs)
        self.tenant_id = tenant_id
        self.supplier_edition = supplier_edition
        self.include_all_schemas_and_elements = include_all_schemas_and_elements
        self.create_blank_report = create_blank_report
        self.sequences = sequences


class ExternalRoleDto(_serialization.Model):
    """ExternalRoleDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: str, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class ExternalServiceCredentialDto(_serialization.Model):
    """ExternalServiceCredentialDto.

    All required parameters must be populated in order to send to server.

    :ivar client_id: Required.
    :vartype client_id: str
    :ivar client_secret: Required.
    :vartype client_secret: str
    """

    _validation = {
        "client_id": {"required": True, "min_length": 1},
        "client_secret": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "client_id": {"key": "clientId", "type": "str"},
        "client_secret": {"key": "clientSecret", "type": "str"},
    }

    def __init__(self, *, client_id: str, client_secret: str, **kwargs: Any) -> None:
        """
        :keyword client_id: Required.
        :paramtype client_id: str
        :keyword client_secret: Required.
        :paramtype client_secret: str
        """
        super().__init__(**kwargs)
        self.client_id = client_id
        self.client_secret = client_secret


class ExternalSupplierDto(_serialization.Model):
    """ExternalSupplierDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar company_id: Required.
    :vartype company_id: str
    :ivar active: Required.
    :vartype active: bool
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "company_id": {"required": True, "min_length": 1},
        "active": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "active": {"key": "active", "type": "bool"},
    }

    def __init__(
        self, *, id: str, name: str, company_id: str, active: bool, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword company_id: Required.
        :paramtype company_id: str
        :keyword active: Required.
        :paramtype active: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.company_id = company_id
        self.active = active


class FactoryUtilizationDto(_serialization.Model):
    """FactoryUtilizationDto.

    All required parameters must be populated in order to send to server.

    :ivar utilization: Required.
    :vartype utilization: ~ignos.api.client.models.UtilizationDto
    """

    _validation = {
        "utilization": {"required": True},
    }

    _attribute_map = {
        "utilization": {"key": "utilization", "type": "UtilizationDto"},
    }

    def __init__(self, *, utilization: "_models.UtilizationDto", **kwargs: Any) -> None:
        """
        :keyword utilization: Required.
        :paramtype utilization: ~ignos.api.client.models.UtilizationDto
        """
        super().__init__(**kwargs)
        self.utilization = utilization


class FileDto(_serialization.Model):
    """FileDto.

    All required parameters must be populated in order to send to server.

    :ivar url: Required.
    :vartype url: str
    :ivar name: Required.
    :vartype name: str
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar file_size: Required.
    :vartype file_size: int
    """

    _validation = {
        "url": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "timestamp": {"required": True},
        "file_size": {"required": True},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
        "file_size": {"key": "fileSize", "type": "int"},
    }

    def __init__(self, *, url: str, name: str, timestamp: datetime.datetime, file_size: int, **kwargs: Any) -> None:
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword name: Required.
        :paramtype name: str
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword file_size: Required.
        :paramtype file_size: int
        """
        super().__init__(**kwargs)
        self.url = url
        self.name = name
        self.timestamp = timestamp
        self.file_size = file_size


class FilterValueWithQuantity(_serialization.Model):
    """FilterValueWithQuantity.

    :ivar value:
    :vartype value: str
    :ivar quantity:
    :vartype quantity: int
    """

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "quantity": {"key": "quantity", "type": "int"},
    }

    def __init__(self, *, value: Optional[str] = None, quantity: Optional[int] = None, **kwargs: Any) -> None:
        """
        :keyword value:
        :paramtype value: str
        :keyword quantity:
        :paramtype quantity: int
        """
        super().__init__(**kwargs)
        self.value = value
        self.quantity = quantity


class FilterWorkorderOperationEvents(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """FilterWorkorderOperationEvents.

    :ivar workorder:
    :vartype workorder: str
    :ivar operation:
    :vartype operation: int
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    :ivar resource_id:
    :vartype resource_id: str
    :ivar external_id_prefix:
    :vartype external_id_prefix: str
    :ivar operator_employee_id:
    :vartype operator_employee_id: str
    :ivar operator_name:
    :vartype operator_name: str
    :ivar customer_order:
    :vartype customer_order: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer:
    :vartype customer: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_name:
    :vartype part_name: str
    :ivar material_part_number:
    :vartype material_part_number: str
    :ivar material_part_name:
    :vartype material_part_name: str
    :ivar material_item_group:
    :vartype material_item_group: str
    :ivar workorder_quantity:
    :vartype workorder_quantity: float
    :ivar is_setup:
    :vartype is_setup: bool
    :ivar company_id:
    :vartype company_id: str
    """

    _attribute_map = {
        "workorder": {"key": "workorder", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "external_id_prefix": {"key": "externalIdPrefix", "type": "str"},
        "operator_employee_id": {"key": "operatorEmployeeId", "type": "str"},
        "operator_name": {"key": "operatorName", "type": "str"},
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer": {"key": "customer", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "material_part_number": {"key": "materialPartNumber", "type": "str"},
        "material_part_name": {"key": "materialPartName", "type": "str"},
        "material_item_group": {"key": "materialItemGroup", "type": "str"},
        "workorder_quantity": {"key": "workorderQuantity", "type": "float"},
        "is_setup": {"key": "isSetup", "type": "bool"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        workorder: Optional[str] = None,
        operation: Optional[int] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        resource_id: Optional[str] = None,
        external_id_prefix: Optional[str] = None,
        operator_employee_id: Optional[str] = None,
        operator_name: Optional[str] = None,
        customer_order: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer: Optional[str] = None,
        part_number: Optional[str] = None,
        part_name: Optional[str] = None,
        material_part_number: Optional[str] = None,
        material_part_name: Optional[str] = None,
        material_item_group: Optional[str] = None,
        workorder_quantity: Optional[float] = None,
        is_setup: Optional[bool] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workorder:
        :paramtype workorder: str
        :keyword operation:
        :paramtype operation: int
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword end_time:
        :paramtype end_time: ~datetime.datetime
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword external_id_prefix:
        :paramtype external_id_prefix: str
        :keyword operator_employee_id:
        :paramtype operator_employee_id: str
        :keyword operator_name:
        :paramtype operator_name: str
        :keyword customer_order:
        :paramtype customer_order: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer:
        :paramtype customer: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword material_part_number:
        :paramtype material_part_number: str
        :keyword material_part_name:
        :paramtype material_part_name: str
        :keyword material_item_group:
        :paramtype material_item_group: str
        :keyword workorder_quantity:
        :paramtype workorder_quantity: float
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.workorder = workorder
        self.operation = operation
        self.start_time = start_time
        self.end_time = end_time
        self.resource_id = resource_id
        self.external_id_prefix = external_id_prefix
        self.operator_employee_id = operator_employee_id
        self.operator_name = operator_name
        self.customer_order = customer_order
        self.customer_id = customer_id
        self.customer = customer
        self.part_number = part_number
        self.part_name = part_name
        self.material_part_number = material_part_number
        self.material_part_name = material_part_name
        self.material_item_group = material_item_group
        self.workorder_quantity = workorder_quantity
        self.is_setup = is_setup
        self.company_id = company_id


class GetAvailableProductionScheduleFiltersRequest(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes,name-too-long
    """GetAvailableProductionScheduleFiltersRequest.

    :ivar resource_group:
    :vartype resource_group: str
    :ivar resource_id:
    :vartype resource_id: str
    :ivar work_order_id:
    :vartype work_order_id: str
    :ivar project_id:
    :vartype project_id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_name:
    :vartype part_name: str
    :ivar material:
    :vartype material: str
    :ivar work_order_ids:
    :vartype work_order_ids: list[str]
    :ivar part_numbers:
    :vartype part_numbers: list[str]
    :ivar part_names:
    :vartype part_names: list[str]
    :ivar project_ids:
    :vartype project_ids: list[str]
    :ivar bom_positions:
    :vartype bom_positions: list[str]
    :ivar materials:
    :vartype materials: list[str]
    :ivar descriptions:
    :vartype descriptions: list[str]
    :ivar available_work:
    :vartype available_work: bool
    :ivar operation_statuses:
    :vartype operation_statuses: list[str or ~ignos.api.client.models.OperationStatusDto]
    :ivar after:
    :vartype after: ~datetime.datetime
    :ivar before:
    :vartype before: ~datetime.datetime
    """

    _attribute_map = {
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "project_id": {"key": "projectId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "work_order_ids": {"key": "workOrderIds", "type": "[str]"},
        "part_numbers": {"key": "partNumbers", "type": "[str]"},
        "part_names": {"key": "partNames", "type": "[str]"},
        "project_ids": {"key": "projectIds", "type": "[str]"},
        "bom_positions": {"key": "bomPositions", "type": "[str]"},
        "materials": {"key": "materials", "type": "[str]"},
        "descriptions": {"key": "descriptions", "type": "[str]"},
        "available_work": {"key": "availableWork", "type": "bool"},
        "operation_statuses": {"key": "operationStatuses", "type": "[str]"},
        "after": {"key": "after", "type": "iso-8601"},
        "before": {"key": "before", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        resource_group: Optional[str] = None,
        resource_id: Optional[str] = None,
        work_order_id: Optional[str] = None,
        project_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_name: Optional[str] = None,
        material: Optional[str] = None,
        work_order_ids: Optional[List[str]] = None,
        part_numbers: Optional[List[str]] = None,
        part_names: Optional[List[str]] = None,
        project_ids: Optional[List[str]] = None,
        bom_positions: Optional[List[str]] = None,
        materials: Optional[List[str]] = None,
        descriptions: Optional[List[str]] = None,
        available_work: Optional[bool] = None,
        operation_statuses: Optional[List[Union[str, "_models.OperationStatusDto"]]] = None,
        after: Optional[datetime.datetime] = None,
        before: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_group:
        :paramtype resource_group: str
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword work_order_id:
        :paramtype work_order_id: str
        :keyword project_id:
        :paramtype project_id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword material:
        :paramtype material: str
        :keyword work_order_ids:
        :paramtype work_order_ids: list[str]
        :keyword part_numbers:
        :paramtype part_numbers: list[str]
        :keyword part_names:
        :paramtype part_names: list[str]
        :keyword project_ids:
        :paramtype project_ids: list[str]
        :keyword bom_positions:
        :paramtype bom_positions: list[str]
        :keyword materials:
        :paramtype materials: list[str]
        :keyword descriptions:
        :paramtype descriptions: list[str]
        :keyword available_work:
        :paramtype available_work: bool
        :keyword operation_statuses:
        :paramtype operation_statuses: list[str or ~ignos.api.client.models.OperationStatusDto]
        :keyword after:
        :paramtype after: ~datetime.datetime
        :keyword before:
        :paramtype before: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.resource_group = resource_group
        self.resource_id = resource_id
        self.work_order_id = work_order_id
        self.project_id = project_id
        self.part_number = part_number
        self.part_name = part_name
        self.material = material
        self.work_order_ids = work_order_ids
        self.part_numbers = part_numbers
        self.part_names = part_names
        self.project_ids = project_ids
        self.bom_positions = bom_positions
        self.materials = materials
        self.descriptions = descriptions
        self.available_work = available_work
        self.operation_statuses = operation_statuses
        self.after = after
        self.before = before


class GetConsumption(_serialization.Model):
    """GetConsumption.

    :ivar asset_id:
    :vartype asset_id: int
    :ivar start:
    :vartype start: ~datetime.datetime
    :ivar end:
    :vartype end: ~datetime.datetime
    """

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "start": {"key": "start", "type": "iso-8601"},
        "end": {"key": "end", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        asset_id: Optional[int] = None,
        start: Optional[datetime.datetime] = None,
        end: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id:
        :paramtype asset_id: int
        :keyword start:
        :paramtype start: ~datetime.datetime
        :keyword end:
        :paramtype end: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.start = start
        self.end = end


class GetPower(_serialization.Model):
    """GetPower.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar granularity:
    :vartype granularity: str
    :ivar start:
    :vartype start: ~datetime.datetime
    :ivar end:
    :vartype end: ~datetime.datetime
    """

    _validation = {
        "asset_id": {"required": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "granularity": {"key": "granularity", "type": "str"},
        "start": {"key": "start", "type": "iso-8601"},
        "end": {"key": "end", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        asset_id: int,
        granularity: Optional[str] = None,
        start: Optional[datetime.datetime] = None,
        end: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword granularity:
        :paramtype granularity: str
        :keyword start:
        :paramtype start: ~datetime.datetime
        :keyword end:
        :paramtype end: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.granularity = granularity
        self.start = start
        self.end = end


class ImageFileDto(_serialization.Model):
    """ImageFileDto.

    All required parameters must be populated in order to send to server.

    :ivar url: Required.
    :vartype url: str
    :ivar name: Required.
    :vartype name: str
    :ivar thumbnail_url:
    :vartype thumbnail_url: str
    """

    _validation = {
        "url": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "thumbnail_url": {"key": "thumbnailUrl", "type": "str"},
    }

    def __init__(self, *, url: str, name: str, thumbnail_url: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword name: Required.
        :paramtype name: str
        :keyword thumbnail_url:
        :paramtype thumbnail_url: str
        """
        super().__init__(**kwargs)
        self.url = url
        self.name = name
        self.thumbnail_url = thumbnail_url


class ImportDocument(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportDocument.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar document_type_id: Required.
    :vartype document_type_id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_group_id:
    :vartype customer_group_id: str
    :ivar override_existing: Required.
    :vartype override_existing: bool
    :ivar document_number: Required.
    :vartype document_number: str
    :ivar comment:
    :vartype comment: str
    :ivar tags: Required.
    :vartype tags: list[~ignos.api.client.models.DocumentTagDto]
    :ivar sequences: Required.
    :vartype sequences: list[str]
    :ivar internal: Required.
    :vartype internal: bool
    :ivar order_lines: Required.
    :vartype order_lines: list[int]
    :ivar lots: Required.
    :vartype lots: list[str]
    :ivar front_page_document_id:
    :vartype front_page_document_id: str
    :ivar document_source: Required. Known values are: 0, 1, 2, and 3.
    :vartype document_source: int or ~ignos.api.client.models.DocumentSource
    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar created_by:
    :vartype created_by: str
    :ivar created_by_id:
    :vartype created_by_id: str
    :ivar updated:
    :vartype updated: ~datetime.datetime
    :ivar updated_by:
    :vartype updated_by: str
    :ivar updated_by_id:
    :vartype updated_by_id: str
    :ivar revisions: Required.
    :vartype revisions: list[~ignos.api.client.models.ImportDocumentRevisionDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "document_type_id": {"required": True, "min_length": 1},
        "override_existing": {"required": True},
        "document_number": {"required": True, "min_length": 1},
        "tags": {"required": True},
        "sequences": {"required": True},
        "internal": {"required": True},
        "order_lines": {"required": True},
        "lots": {"required": True},
        "document_source": {"required": True},
        "upload_key": {"required": True, "min_length": 1},
        "revisions": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "document_type_id": {"key": "documentTypeId", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_group_id": {"key": "customerGroupId", "type": "str"},
        "override_existing": {"key": "overrideExisting", "type": "bool"},
        "document_number": {"key": "documentNumber", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
        "tags": {"key": "tags", "type": "[DocumentTagDto]"},
        "sequences": {"key": "sequences", "type": "[str]"},
        "internal": {"key": "internal", "type": "bool"},
        "order_lines": {"key": "orderLines", "type": "[int]"},
        "lots": {"key": "lots", "type": "[str]"},
        "front_page_document_id": {"key": "frontPageDocumentId", "type": "str"},
        "document_source": {"key": "documentSource", "type": "int"},
        "upload_key": {"key": "uploadKey", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_id": {"key": "createdById", "type": "str"},
        "updated": {"key": "updated", "type": "iso-8601"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "updated_by_id": {"key": "updatedById", "type": "str"},
        "revisions": {"key": "revisions", "type": "[ImportDocumentRevisionDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        document_type_id: str,
        override_existing: bool,
        document_number: str,
        tags: List["_models.DocumentTagDto"],
        sequences: List[str],
        internal: bool,
        order_lines: List[int],
        lots: List[str],
        document_source: Union[int, "_models.DocumentSource"],
        upload_key: str,
        revisions: List["_models.ImportDocumentRevisionDto"],
        customer_id: Optional[str] = None,
        customer_group_id: Optional[str] = None,
        comment: Optional[str] = None,
        front_page_document_id: Optional[str] = None,
        created: Optional[datetime.datetime] = None,
        created_by: Optional[str] = None,
        created_by_id: Optional[str] = None,
        updated: Optional[datetime.datetime] = None,
        updated_by: Optional[str] = None,
        updated_by_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword document_type_id: Required.
        :paramtype document_type_id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_group_id:
        :paramtype customer_group_id: str
        :keyword override_existing: Required.
        :paramtype override_existing: bool
        :keyword document_number: Required.
        :paramtype document_number: str
        :keyword comment:
        :paramtype comment: str
        :keyword tags: Required.
        :paramtype tags: list[~ignos.api.client.models.DocumentTagDto]
        :keyword sequences: Required.
        :paramtype sequences: list[str]
        :keyword internal: Required.
        :paramtype internal: bool
        :keyword order_lines: Required.
        :paramtype order_lines: list[int]
        :keyword lots: Required.
        :paramtype lots: list[str]
        :keyword front_page_document_id:
        :paramtype front_page_document_id: str
        :keyword document_source: Required. Known values are: 0, 1, 2, and 3.
        :paramtype document_source: int or ~ignos.api.client.models.DocumentSource
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword created_by:
        :paramtype created_by: str
        :keyword created_by_id:
        :paramtype created_by_id: str
        :keyword updated:
        :paramtype updated: ~datetime.datetime
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword updated_by_id:
        :paramtype updated_by_id: str
        :keyword revisions: Required.
        :paramtype revisions: list[~ignos.api.client.models.ImportDocumentRevisionDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.document_type_id = document_type_id
        self.customer_id = customer_id
        self.customer_group_id = customer_group_id
        self.override_existing = override_existing
        self.document_number = document_number
        self.comment = comment
        self.tags = tags
        self.sequences = sequences
        self.internal = internal
        self.order_lines = order_lines
        self.lots = lots
        self.front_page_document_id = front_page_document_id
        self.document_source = document_source
        self.upload_key = upload_key
        self.created = created
        self.created_by = created_by
        self.created_by_id = created_by_id
        self.updated = updated
        self.updated_by = updated_by
        self.updated_by_id = updated_by_id
        self.revisions = revisions


class ImportDocumentResultDto(_serialization.Model):
    """ImportDocumentResultDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar document_type: Required.
    :vartype document_type: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "document_type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "document_type": {"key": "documentType", "type": "str"},
    }

    def __init__(self, *, id: str, document_type: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword document_type: Required.
        :paramtype document_type: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.document_type = document_type


class ImportDocumentRevisionContentDto(_serialization.Model):
    """ImportDocumentRevisionContentDto.

    All required parameters must be populated in order to send to server.

    :ivar upload_filename: Required.
    :vartype upload_filename: str
    :ivar original_filename: Required.
    :vartype original_filename: str
    :ivar extension: Required.
    :vartype extension: str
    """

    _validation = {
        "upload_filename": {"required": True, "min_length": 1},
        "original_filename": {"required": True, "min_length": 1},
        "extension": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_filename": {"key": "uploadFilename", "type": "str"},
        "original_filename": {"key": "originalFilename", "type": "str"},
        "extension": {"key": "extension", "type": "str"},
    }

    def __init__(self, *, upload_filename: str, original_filename: str, extension: str, **kwargs: Any) -> None:
        """
        :keyword upload_filename: Required.
        :paramtype upload_filename: str
        :keyword original_filename: Required.
        :paramtype original_filename: str
        :keyword extension: Required.
        :paramtype extension: str
        """
        super().__init__(**kwargs)
        self.upload_filename = upload_filename
        self.original_filename = original_filename
        self.extension = extension


class ImportDocumentRevisionDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportDocumentRevisionDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar revision:
    :vartype revision: str
    :ivar status: Required. Known values are: "None", "Draft", "ForInternalApproval",
     "InternalRejected", "Approved", and "Voided".
    :vartype status: str or ~ignos.api.client.models.DocumentStatus
    :ivar status_date: Required.
    :vartype status_date: ~datetime.datetime
    :ivar description:
    :vartype description: str
    :ivar import_reference:
    :vartype import_reference: str
    :ivar signed_by_document_id:
    :vartype signed_by_document_id: str
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar created_by:
    :vartype created_by: str
    :ivar created_by_id:
    :vartype created_by_id: str
    :ivar updated:
    :vartype updated: ~datetime.datetime
    :ivar updated_by:
    :vartype updated_by: str
    :ivar updated_by_id:
    :vartype updated_by_id: str
    :ivar contents: Required.
    :vartype contents: list[~ignos.api.client.models.ImportDocumentRevisionContentDto]
    :ivar approvals: Required.
    :vartype approvals: list[~ignos.api.client.models.DocumentRevisionApprovalDto]
    """

    _validation = {
        "id": {"required": True},
        "status": {"required": True},
        "status_date": {"required": True},
        "contents": {"required": True},
        "approvals": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "revision": {"key": "revision", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "status_date": {"key": "statusDate", "type": "iso-8601"},
        "description": {"key": "description", "type": "str"},
        "import_reference": {"key": "importReference", "type": "str"},
        "signed_by_document_id": {"key": "signedByDocumentId", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_id": {"key": "createdById", "type": "str"},
        "updated": {"key": "updated", "type": "iso-8601"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "updated_by_id": {"key": "updatedById", "type": "str"},
        "contents": {"key": "contents", "type": "[ImportDocumentRevisionContentDto]"},
        "approvals": {"key": "approvals", "type": "[DocumentRevisionApprovalDto]"},
    }

    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.DocumentStatus"],
        status_date: datetime.datetime,
        contents: List["_models.ImportDocumentRevisionContentDto"],
        approvals: List["_models.DocumentRevisionApprovalDto"],
        revision: Optional[str] = None,
        description: Optional[str] = None,
        import_reference: Optional[str] = None,
        signed_by_document_id: Optional[str] = None,
        created: Optional[datetime.datetime] = None,
        created_by: Optional[str] = None,
        created_by_id: Optional[str] = None,
        updated: Optional[datetime.datetime] = None,
        updated_by: Optional[str] = None,
        updated_by_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword revision:
        :paramtype revision: str
        :keyword status: Required. Known values are: "None", "Draft", "ForInternalApproval",
         "InternalRejected", "Approved", and "Voided".
        :paramtype status: str or ~ignos.api.client.models.DocumentStatus
        :keyword status_date: Required.
        :paramtype status_date: ~datetime.datetime
        :keyword description:
        :paramtype description: str
        :keyword import_reference:
        :paramtype import_reference: str
        :keyword signed_by_document_id:
        :paramtype signed_by_document_id: str
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword created_by:
        :paramtype created_by: str
        :keyword created_by_id:
        :paramtype created_by_id: str
        :keyword updated:
        :paramtype updated: ~datetime.datetime
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword updated_by_id:
        :paramtype updated_by_id: str
        :keyword contents: Required.
        :paramtype contents: list[~ignos.api.client.models.ImportDocumentRevisionContentDto]
        :keyword approvals: Required.
        :paramtype approvals: list[~ignos.api.client.models.DocumentRevisionApprovalDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.revision = revision
        self.status = status
        self.status_date = status_date
        self.description = description
        self.import_reference = import_reference
        self.signed_by_document_id = signed_by_document_id
        self.created = created
        self.created_by = created_by
        self.created_by_id = created_by_id
        self.updated = updated
        self.updated_by = updated_by
        self.updated_by_id = updated_by_id
        self.contents = contents
        self.approvals = approvals


class ImportedCalibration(_serialization.Model):
    """ImportedCalibration.

    All required parameters must be populated in order to send to server.

    :ivar tool_id: Required.
    :vartype tool_id: str
    :ivar last_calibration_date: Required.
    :vartype last_calibration_date: ~datetime.datetime
    """

    _validation = {
        "tool_id": {"required": True, "min_length": 1},
        "last_calibration_date": {"required": True},
    }

    _attribute_map = {
        "tool_id": {"key": "toolId", "type": "str"},
        "last_calibration_date": {"key": "lastCalibrationDate", "type": "iso-8601"},
    }

    def __init__(self, *, tool_id: str, last_calibration_date: datetime.datetime, **kwargs: Any) -> None:
        """
        :keyword tool_id: Required.
        :paramtype tool_id: str
        :keyword last_calibration_date: Required.
        :paramtype last_calibration_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.tool_id = tool_id
        self.last_calibration_date = last_calibration_date


class ImportMeasurementFormInstanceRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportMeasurementFormInstanceRequest.

    All required parameters must be populated in order to send to server.

    :ivar part_info: Required.
    :vartype part_info: ~ignos.api.client.models.ImportMeasurementFormPartDto
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_group_id:
    :vartype customer_group_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar external_order_number:
    :vartype external_order_number: str
    :ivar quantity: Required.
    :vartype quantity: int
    :ivar sequences: Required.
    :vartype sequences: list[~ignos.api.client.models.WorkorderImportTraceItemDto]
    :ivar status: Required. Known values are: "Active", "Cancelled", "Completed", and "Approved".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
    :ivar status_changed_by:
    :vartype status_changed_by: str
    :ivar status_changed_date:
    :vartype status_changed_date: ~datetime.datetime
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar created_by:
    :vartype created_by: str
    :ivar updated_by:
    :vartype updated_by: str
    :ivar schemas: Required.
    :vartype schemas: list[~ignos.api.client.models.ImportMeasurementSchemaInstanceDto]
    """

    _validation = {
        "part_info": {"required": True},
        "quantity": {"required": True},
        "sequences": {"required": True},
        "status": {"required": True},
        "created": {"required": True},
        "schemas": {"required": True},
    }

    _attribute_map = {
        "part_info": {"key": "partInfo", "type": "ImportMeasurementFormPartDto"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_group_id": {"key": "customerGroupId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
        "quantity": {"key": "quantity", "type": "int"},
        "sequences": {"key": "sequences", "type": "[WorkorderImportTraceItemDto]"},
        "status": {"key": "status", "type": "str"},
        "status_changed_by": {"key": "statusChangedBy", "type": "str"},
        "status_changed_date": {"key": "statusChangedDate", "type": "iso-8601"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "schemas": {"key": "schemas", "type": "[ImportMeasurementSchemaInstanceDto]"},
    }

    def __init__(
        self,
        *,
        part_info: "_models.ImportMeasurementFormPartDto",
        quantity: int,
        sequences: List["_models.WorkorderImportTraceItemDto"],
        status: Union[str, "_models.MeasurementFormInstanceStatus"],
        created: datetime.datetime,
        schemas: List["_models.ImportMeasurementSchemaInstanceDto"],
        customer_id: Optional[str] = None,
        customer_group_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        external_order_number: Optional[str] = None,
        status_changed_by: Optional[str] = None,
        status_changed_date: Optional[datetime.datetime] = None,
        created_by: Optional[str] = None,
        updated_by: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword part_info: Required.
        :paramtype part_info: ~ignos.api.client.models.ImportMeasurementFormPartDto
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_group_id:
        :paramtype customer_group_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword external_order_number:
        :paramtype external_order_number: str
        :keyword quantity: Required.
        :paramtype quantity: int
        :keyword sequences: Required.
        :paramtype sequences: list[~ignos.api.client.models.WorkorderImportTraceItemDto]
        :keyword status: Required. Known values are: "Active", "Cancelled", "Completed", and
         "Approved".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
        :keyword status_changed_by:
        :paramtype status_changed_by: str
        :keyword status_changed_date:
        :paramtype status_changed_date: ~datetime.datetime
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword created_by:
        :paramtype created_by: str
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword schemas: Required.
        :paramtype schemas: list[~ignos.api.client.models.ImportMeasurementSchemaInstanceDto]
        """
        super().__init__(**kwargs)
        self.part_info = part_info
        self.customer_id = customer_id
        self.customer_group_id = customer_group_id
        self.customer_name = customer_name
        self.external_order_number = external_order_number
        self.quantity = quantity
        self.sequences = sequences
        self.status = status
        self.status_changed_by = status_changed_by
        self.status_changed_date = status_changed_date
        self.created = created
        self.created_by = created_by
        self.updated_by = updated_by
        self.schemas = schemas


class ImportMeasurementFormPartDto(_serialization.Model):
    """ImportMeasurementFormPartDto.

    All required parameters must be populated in order to send to server.

    :ivar part_number:
    :vartype part_number: str
    :ivar part_name:
    :vartype part_name: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing: Required.
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    """

    _validation = {
        "drawing": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "part_number": {"key": "partNumber", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
    }

    def __init__(
        self,
        *,
        drawing: str,
        part_number: Optional[str] = None,
        part_name: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing: Required.
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        """
        super().__init__(**kwargs)
        self.part_number = part_number
        self.part_name = part_name
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision


class ImportMeasurementFormSchema(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportMeasurementFormSchema.

    All required parameters must be populated in order to send to server.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number: Required.
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar include_tools_in_report: Required.
    :vartype include_tools_in_report: bool
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar created_by:
    :vartype created_by: str
    :ivar updated_by:
    :vartype updated_by: str
    :ivar exclude_from_customer_documentation: Required.
    :vartype exclude_from_customer_documentation: bool
    :ivar source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and "Manual".
    :vartype source: str or ~ignos.api.client.models.MeasurementFormSource
    :ivar extra_schemas:
    :vartype extra_schemas: list[~ignos.api.client.models.MeasurementFormImportLinkedSchemaDto]
    :ivar versions: Required.
    :vartype versions: list[~ignos.api.client.models.MeasurementFormVersionImportDto]
    """

    _validation = {
        "part_number": {"required": True, "min_length": 1},
        "include_tools_in_report": {"required": True},
        "exclude_from_customer_documentation": {"required": True},
        "source": {"required": True},
        "versions": {"required": True},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "include_tools_in_report": {"key": "includeToolsInReport", "type": "bool"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "exclude_from_customer_documentation": {"key": "excludeFromCustomerDocumentation", "type": "bool"},
        "source": {"key": "source", "type": "str"},
        "extra_schemas": {"key": "extraSchemas", "type": "[MeasurementFormImportLinkedSchemaDto]"},
        "versions": {"key": "versions", "type": "[MeasurementFormVersionImportDto]"},
    }

    def __init__(
        self,
        *,
        part_number: str,
        include_tools_in_report: bool,
        exclude_from_customer_documentation: bool,
        source: Union[str, "_models.MeasurementFormSource"],
        versions: List["_models.MeasurementFormVersionImportDto"],
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        created: Optional[datetime.datetime] = None,
        created_by: Optional[str] = None,
        updated_by: Optional[str] = None,
        extra_schemas: Optional[List["_models.MeasurementFormImportLinkedSchemaDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword include_tools_in_report: Required.
        :paramtype include_tools_in_report: bool
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword created_by:
        :paramtype created_by: str
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword exclude_from_customer_documentation: Required.
        :paramtype exclude_from_customer_documentation: bool
        :keyword source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and
         "Manual".
        :paramtype source: str or ~ignos.api.client.models.MeasurementFormSource
        :keyword extra_schemas:
        :paramtype extra_schemas: list[~ignos.api.client.models.MeasurementFormImportLinkedSchemaDto]
        :keyword versions: Required.
        :paramtype versions: list[~ignos.api.client.models.MeasurementFormVersionImportDto]
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.include_tools_in_report = include_tools_in_report
        self.created = created
        self.created_by = created_by
        self.updated_by = updated_by
        self.exclude_from_customer_documentation = exclude_from_customer_documentation
        self.source = source
        self.extra_schemas = extra_schemas
        self.versions = versions


class ImportMeasurementSchemaInstanceDto(_serialization.Model):
    """ImportMeasurementSchemaInstanceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar version: Required.
    :vartype version: int
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "version": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "version": {"key": "version", "type": "int"},
    }

    def __init__(self, *, id: str, version: int, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword version: Required.
        :paramtype version: int
        """
        super().__init__(**kwargs)
        self.id = id
        self.version = version


class ImportMeasuringTool(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportMeasuringTool.

    All required parameters must be populated in order to send to server.

    :ivar tool_id: Required.
    :vartype tool_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar manufacturer: Required.
    :vartype manufacturer: str
    :ivar type_id: Required.
    :vartype type_id: str
    :ivar sub_type_id:
    :vartype sub_type_id: str
    :ivar unit_id:
    :vartype unit_id: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar non_calibration_tool: Required.
    :vartype non_calibration_tool: bool
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    :ivar serial_number:
    :vartype serial_number: str
    :ivar default_location:
    :vartype default_location: str
    :ivar precision:
    :vartype precision: str
    :ivar last_calibration_date:
    :vartype last_calibration_date: ~datetime.datetime
    :ivar deprecated_date:
    :vartype deprecated_date: ~datetime.datetime
    :ivar last_location:
    :vartype last_location: str
    :ivar last_location_date:
    :vartype last_location_date: ~datetime.datetime
    :ivar calibrations: Required.
    :vartype calibrations: list[~ignos.api.client.models.MeasuringToolCalibrationImportDto]
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar updated:
    :vartype updated: ~datetime.datetime
    :ivar updated_by:
    :vartype updated_by: str
    """

    _validation = {
        "tool_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "manufacturer": {"required": True, "min_length": 1},
        "type_id": {"required": True},
        "non_calibration_tool": {"required": True},
        "calibrations": {"required": True},
        "created": {"required": True},
        "created_by": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tool_id": {"key": "toolId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "str"},
        "type_id": {"key": "typeId", "type": "str"},
        "sub_type_id": {"key": "subTypeId", "type": "str"},
        "unit_id": {"key": "unitId", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "non_calibration_tool": {"key": "nonCalibrationTool", "type": "bool"},
        "min": {"key": "min", "type": "float"},
        "max": {"key": "max", "type": "float"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "default_location": {"key": "defaultLocation", "type": "str"},
        "precision": {"key": "precision", "type": "str"},
        "last_calibration_date": {"key": "lastCalibrationDate", "type": "iso-8601"},
        "deprecated_date": {"key": "deprecatedDate", "type": "iso-8601"},
        "last_location": {"key": "lastLocation", "type": "str"},
        "last_location_date": {"key": "lastLocationDate", "type": "iso-8601"},
        "calibrations": {"key": "calibrations", "type": "[MeasuringToolCalibrationImportDto]"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "updated": {"key": "updated", "type": "iso-8601"},
        "updated_by": {"key": "updatedBy", "type": "str"},
    }

    def __init__(
        self,
        *,
        tool_id: str,
        name: str,
        manufacturer: str,
        type_id: str,
        non_calibration_tool: bool,
        calibrations: List["_models.MeasuringToolCalibrationImportDto"],
        created: datetime.datetime,
        created_by: str,
        sub_type_id: Optional[str] = None,
        unit_id: Optional[str] = None,
        calibration_interval: Optional[int] = None,
        min: Optional[float] = None,  # pylint: disable=redefined-builtin
        max: Optional[float] = None,  # pylint: disable=redefined-builtin
        serial_number: Optional[str] = None,
        default_location: Optional[str] = None,
        precision: Optional[str] = None,
        last_calibration_date: Optional[datetime.datetime] = None,
        deprecated_date: Optional[datetime.datetime] = None,
        last_location: Optional[str] = None,
        last_location_date: Optional[datetime.datetime] = None,
        updated: Optional[datetime.datetime] = None,
        updated_by: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tool_id: Required.
        :paramtype tool_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword manufacturer: Required.
        :paramtype manufacturer: str
        :keyword type_id: Required.
        :paramtype type_id: str
        :keyword sub_type_id:
        :paramtype sub_type_id: str
        :keyword unit_id:
        :paramtype unit_id: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword non_calibration_tool: Required.
        :paramtype non_calibration_tool: bool
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword default_location:
        :paramtype default_location: str
        :keyword precision:
        :paramtype precision: str
        :keyword last_calibration_date:
        :paramtype last_calibration_date: ~datetime.datetime
        :keyword deprecated_date:
        :paramtype deprecated_date: ~datetime.datetime
        :keyword last_location:
        :paramtype last_location: str
        :keyword last_location_date:
        :paramtype last_location_date: ~datetime.datetime
        :keyword calibrations: Required.
        :paramtype calibrations: list[~ignos.api.client.models.MeasuringToolCalibrationImportDto]
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword updated:
        :paramtype updated: ~datetime.datetime
        :keyword updated_by:
        :paramtype updated_by: str
        """
        super().__init__(**kwargs)
        self.tool_id = tool_id
        self.name = name
        self.manufacturer = manufacturer
        self.type_id = type_id
        self.sub_type_id = sub_type_id
        self.unit_id = unit_id
        self.calibration_interval = calibration_interval
        self.non_calibration_tool = non_calibration_tool
        self.min = min
        self.max = max
        self.serial_number = serial_number
        self.default_location = default_location
        self.precision = precision
        self.last_calibration_date = last_calibration_date
        self.deprecated_date = deprecated_date
        self.last_location = last_location
        self.last_location_date = last_location_date
        self.calibrations = calibrations
        self.created = created
        self.created_by = created_by
        self.updated = updated
        self.updated_by = updated_by


class ImportOperationWithTool(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportOperationWithTool.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar cnc_part_id: Required.
    :vartype cnc_part_id: str
    :ivar operation:
    :vartype operation: int
    :ivar machine_id: Required.
    :vartype machine_id: str
    :ivar title:
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar chuck_jaws:
    :vartype chuck_jaws: str
    :ivar chuck_pressure:
    :vartype chuck_pressure: str
    :ivar tailstock:
    :vartype tailstock: str
    :ivar tailstock_pressure:
    :vartype tailstock_pressure: str
    :ivar fixture:
    :vartype fixture: str
    :ivar tools:
    :vartype tools: list[~ignos.api.client.models.ImportToolDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "cnc_part_id": {"required": True, "min_length": 1},
        "machine_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "cnc_part_id": {"key": "cncPartId", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "machine_id": {"key": "machineId", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "chuck_jaws": {"key": "chuckJaws", "type": "str"},
        "chuck_pressure": {"key": "chuckPressure", "type": "str"},
        "tailstock": {"key": "tailstock", "type": "str"},
        "tailstock_pressure": {"key": "tailstockPressure", "type": "str"},
        "fixture": {"key": "fixture", "type": "str"},
        "tools": {"key": "tools", "type": "[ImportToolDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        cnc_part_id: str,
        machine_id: str,
        operation: Optional[int] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        chuck_jaws: Optional[str] = None,
        chuck_pressure: Optional[str] = None,
        tailstock: Optional[str] = None,
        tailstock_pressure: Optional[str] = None,
        fixture: Optional[str] = None,
        tools: Optional[List["_models.ImportToolDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword cnc_part_id: Required.
        :paramtype cnc_part_id: str
        :keyword operation:
        :paramtype operation: int
        :keyword machine_id: Required.
        :paramtype machine_id: str
        :keyword title:
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword chuck_jaws:
        :paramtype chuck_jaws: str
        :keyword chuck_pressure:
        :paramtype chuck_pressure: str
        :keyword tailstock:
        :paramtype tailstock: str
        :keyword tailstock_pressure:
        :paramtype tailstock_pressure: str
        :keyword fixture:
        :paramtype fixture: str
        :keyword tools:
        :paramtype tools: list[~ignos.api.client.models.ImportToolDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.cnc_part_id = cnc_part_id
        self.operation = operation
        self.machine_id = machine_id
        self.title = title
        self.description = description
        self.chuck_jaws = chuck_jaws
        self.chuck_pressure = chuck_pressure
        self.tailstock = tailstock
        self.tailstock_pressure = tailstock_pressure
        self.fixture = fixture
        self.tools = tools


class ImportSupplier(_serialization.Model):
    """ImportSupplier.

    All required parameters must be populated in order to send to server.

    :ivar supplier_id: Required.
    :vartype supplier_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar organization_number:
    :vartype organization_number: str
    :ivar three_letter_iso_country: Required.
    :vartype three_letter_iso_country: str
    :ivar users: Required.
    :vartype users: list[~ignos.api.client.models.ImportSupplierUserDto]
    """

    _validation = {
        "supplier_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "three_letter_iso_country": {"required": True, "min_length": 1},
        "users": {"required": True},
    }

    _attribute_map = {
        "supplier_id": {"key": "supplierId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "organization_number": {"key": "organizationNumber", "type": "str"},
        "three_letter_iso_country": {"key": "threeLetterIsoCountry", "type": "str"},
        "users": {"key": "users", "type": "[ImportSupplierUserDto]"},
    }

    def __init__(
        self,
        *,
        supplier_id: str,
        name: str,
        three_letter_iso_country: str,
        users: List["_models.ImportSupplierUserDto"],
        organization_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword supplier_id: Required.
        :paramtype supplier_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword organization_number:
        :paramtype organization_number: str
        :keyword three_letter_iso_country: Required.
        :paramtype three_letter_iso_country: str
        :keyword users: Required.
        :paramtype users: list[~ignos.api.client.models.ImportSupplierUserDto]
        """
        super().__init__(**kwargs)
        self.supplier_id = supplier_id
        self.name = name
        self.organization_number = organization_number
        self.three_letter_iso_country = three_letter_iso_country
        self.users = users


class ImportSupplierUserDto(_serialization.Model):
    """ImportSupplierUserDto.

    All required parameters must be populated in order to send to server.

    :ivar username: Required.
    :vartype username: str
    :ivar name: Required.
    :vartype name: str
    :ivar roles: Required.
    :vartype roles: list[str]
    """

    _validation = {
        "username": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "roles": {"required": True},
    }

    _attribute_map = {
        "username": {"key": "username", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "roles": {"key": "roles", "type": "[str]"},
    }

    def __init__(self, *, username: str, name: str, roles: List[str], **kwargs: Any) -> None:
        """
        :keyword username: Required.
        :paramtype username: str
        :keyword name: Required.
        :paramtype name: str
        :keyword roles: Required.
        :paramtype roles: list[str]
        """
        super().__init__(**kwargs)
        self.username = username
        self.name = name
        self.roles = roles


class ImportToolDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ImportToolDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar tool_type_id: Required.
    :vartype tool_type_id: str
    :ivar tool_sub_type_id: Required.
    :vartype tool_sub_type_id: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar tool_suffix:
    :vartype tool_suffix: str
    :ivar description:
    :vartype description: str
    :ivar holder_description:
    :vartype holder_description: str
    :ivar geometry:
    :vartype geometry: str
    :ivar size:
    :vartype size: str
    :ivar diameter:
    :vartype diameter: float
    :ivar grade:
    :vartype grade: str
    :ivar radius:
    :vartype radius: float
    :ivar width:
    :vartype width: float
    :ivar pitch:
    :vartype pitch: str
    :ivar length:
    :vartype length: float
    :ivar kapr:
    :vartype kapr: float
    :ivar teeth:
    :vartype teeth: int
    :ivar apmx:
    :vartype apmx: float
    :ivar usable_length:
    :vartype usable_length: float
    :ivar audit_info: Required.
    :vartype audit_info: ~ignos.api.client.models.CncSetupAuditDto
    """

    _validation = {
        "id": {"required": True},
        "tool_type_id": {"required": True, "min_length": 1},
        "tool_sub_type_id": {"required": True, "min_length": 1},
        "audit_info": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "tool_type_id": {"key": "toolTypeId", "type": "str"},
        "tool_sub_type_id": {"key": "toolSubTypeId", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "tool_suffix": {"key": "toolSuffix", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "holder_description": {"key": "holderDescription", "type": "str"},
        "geometry": {"key": "geometry", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "diameter": {"key": "diameter", "type": "float"},
        "grade": {"key": "grade", "type": "str"},
        "radius": {"key": "radius", "type": "float"},
        "width": {"key": "width", "type": "float"},
        "pitch": {"key": "pitch", "type": "str"},
        "length": {"key": "length", "type": "float"},
        "kapr": {"key": "kapr", "type": "float"},
        "teeth": {"key": "teeth", "type": "int"},
        "apmx": {"key": "apmx", "type": "float"},
        "usable_length": {"key": "usableLength", "type": "float"},
        "audit_info": {"key": "auditInfo", "type": "CncSetupAuditDto"},
    }

    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        tool_type_id: str,
        tool_sub_type_id: str,
        audit_info: "_models.CncSetupAuditDto",
        tool_number: Optional[str] = None,
        tool_suffix: Optional[str] = None,
        description: Optional[str] = None,
        holder_description: Optional[str] = None,
        geometry: Optional[str] = None,
        size: Optional[str] = None,
        diameter: Optional[float] = None,
        grade: Optional[str] = None,
        radius: Optional[float] = None,
        width: Optional[float] = None,
        pitch: Optional[str] = None,
        length: Optional[float] = None,
        kapr: Optional[float] = None,
        teeth: Optional[int] = None,
        apmx: Optional[float] = None,
        usable_length: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword tool_type_id: Required.
        :paramtype tool_type_id: str
        :keyword tool_sub_type_id: Required.
        :paramtype tool_sub_type_id: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword tool_suffix:
        :paramtype tool_suffix: str
        :keyword description:
        :paramtype description: str
        :keyword holder_description:
        :paramtype holder_description: str
        :keyword geometry:
        :paramtype geometry: str
        :keyword size:
        :paramtype size: str
        :keyword diameter:
        :paramtype diameter: float
        :keyword grade:
        :paramtype grade: str
        :keyword radius:
        :paramtype radius: float
        :keyword width:
        :paramtype width: float
        :keyword pitch:
        :paramtype pitch: str
        :keyword length:
        :paramtype length: float
        :keyword kapr:
        :paramtype kapr: float
        :keyword teeth:
        :paramtype teeth: int
        :keyword apmx:
        :paramtype apmx: float
        :keyword usable_length:
        :paramtype usable_length: float
        :keyword audit_info: Required.
        :paramtype audit_info: ~ignos.api.client.models.CncSetupAuditDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.tool_type_id = tool_type_id
        self.tool_sub_type_id = tool_sub_type_id
        self.tool_number = tool_number
        self.tool_suffix = tool_suffix
        self.description = description
        self.holder_description = holder_description
        self.geometry = geometry
        self.size = size
        self.diameter = diameter
        self.grade = grade
        self.radius = radius
        self.width = width
        self.pitch = pitch
        self.length = length
        self.kapr = kapr
        self.teeth = teeth
        self.apmx = apmx
        self.usable_length = usable_length
        self.audit_info = audit_info


class IncludeExcludeMrbRevisionContentRequest(_serialization.Model):
    """IncludeExcludeMrbRevisionContentRequest.

    All required parameters must be populated in order to send to server.

    :ivar ids: Required.
    :vartype ids: list[str]
    """

    _validation = {
        "ids": {"required": True},
    }

    _attribute_map = {
        "ids": {"key": "ids", "type": "[str]"},
    }

    def __init__(self, *, ids: List[str], **kwargs: Any) -> None:
        """
        :keyword ids: Required.
        :paramtype ids: list[str]
        """
        super().__init__(**kwargs)
        self.ids = ids


class InventoryDto(_serialization.Model):
    """InventoryDto.

    All required parameters must be populated in order to send to server.

    :ivar site_id: Required.
    :vartype site_id: str
    :ivar warehouse_id: Required.
    :vartype warehouse_id: str
    :ivar location_id: Required.
    :vartype location_id: str
    :ivar batch_number:
    :vartype batch_number: str
    :ivar vendor_batch:
    :vartype vendor_batch: str
    :ivar available: Required.
    :vartype available: float
    """

    _validation = {
        "site_id": {"required": True, "min_length": 1},
        "warehouse_id": {"required": True, "min_length": 1},
        "location_id": {"required": True, "min_length": 1},
        "available": {"required": True},
    }

    _attribute_map = {
        "site_id": {"key": "siteId", "type": "str"},
        "warehouse_id": {"key": "warehouseId", "type": "str"},
        "location_id": {"key": "locationId", "type": "str"},
        "batch_number": {"key": "batchNumber", "type": "str"},
        "vendor_batch": {"key": "vendorBatch", "type": "str"},
        "available": {"key": "available", "type": "float"},
    }

    def __init__(
        self,
        *,
        site_id: str,
        warehouse_id: str,
        location_id: str,
        available: float,
        batch_number: Optional[str] = None,
        vendor_batch: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword site_id: Required.
        :paramtype site_id: str
        :keyword warehouse_id: Required.
        :paramtype warehouse_id: str
        :keyword location_id: Required.
        :paramtype location_id: str
        :keyword batch_number:
        :paramtype batch_number: str
        :keyword vendor_batch:
        :paramtype vendor_batch: str
        :keyword available: Required.
        :paramtype available: float
        """
        super().__init__(**kwargs)
        self.site_id = site_id
        self.warehouse_id = warehouse_id
        self.location_id = location_id
        self.batch_number = batch_number
        self.vendor_batch = vendor_batch
        self.available = available


class InviteDto(_serialization.Model):
    """InviteDto.

    All required parameters must be populated in order to send to server.

    :ivar tenant_id: Required.
    :vartype tenant_id: str
    :ivar company_name: Required.
    :vartype company_name: str
    :ivar id: Required.
    :vartype id: str
    :ivar supplier_id: Required.
    :vartype supplier_id: str
    :ivar supplier_name: Required.
    :vartype supplier_name: str
    :ivar username: Required.
    :vartype username: str
    :ivar deadline: Required.
    :vartype deadline: ~datetime.datetime
    :ivar created_time: Required.
    :vartype created_time: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    """

    _validation = {
        "tenant_id": {"required": True, "min_length": 1},
        "company_name": {"required": True, "min_length": 1},
        "id": {"required": True, "min_length": 1},
        "supplier_id": {"required": True, "min_length": 1},
        "supplier_name": {"required": True, "min_length": 1},
        "username": {"required": True, "min_length": 1},
        "deadline": {"required": True},
        "created_time": {"required": True},
        "created_by": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "company_name": {"key": "companyName", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "supplier_id": {"key": "supplierId", "type": "str"},
        "supplier_name": {"key": "supplierName", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "deadline": {"key": "deadline", "type": "iso-8601"},
        "created_time": {"key": "createdTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
    }

    def __init__(
        self,
        *,
        tenant_id: str,
        company_name: str,
        id: str,  # pylint: disable=redefined-builtin
        supplier_id: str,
        supplier_name: str,
        username: str,
        deadline: datetime.datetime,
        created_time: datetime.datetime,
        created_by: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id: Required.
        :paramtype tenant_id: str
        :keyword company_name: Required.
        :paramtype company_name: str
        :keyword id: Required.
        :paramtype id: str
        :keyword supplier_id: Required.
        :paramtype supplier_id: str
        :keyword supplier_name: Required.
        :paramtype supplier_name: str
        :keyword username: Required.
        :paramtype username: str
        :keyword deadline: Required.
        :paramtype deadline: ~datetime.datetime
        :keyword created_time: Required.
        :paramtype created_time: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        """
        super().__init__(**kwargs)
        self.tenant_id = tenant_id
        self.company_name = company_name
        self.id = id
        self.supplier_id = supplier_id
        self.supplier_name = supplier_name
        self.username = username
        self.deadline = deadline
        self.created_time = created_time
        self.created_by = created_by


class IotTypeSourceDto(_serialization.Model):
    """IotTypeSourceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: str, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class LinkDto(_serialization.Model):
    """LinkDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar uri: Required.
    :vartype uri: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar new_tab:
    :vartype new_tab: bool
    :ivar color:
    :vartype color: str
    :ivar icon_name:
    :vartype icon_name: str
    :ivar scope:
    :vartype scope: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "uri": {"required": True},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "uri": {"key": "uri", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "new_tab": {"key": "newTab", "type": "bool"},
        "color": {"key": "color", "type": "str"},
        "icon_name": {"key": "iconName", "type": "str"},
        "scope": {"key": "scope", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        uri: str,
        name: str,
        description: Optional[str] = None,
        new_tab: Optional[bool] = None,
        color: Optional[str] = None,
        icon_name: Optional[str] = None,
        scope: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword uri: Required.
        :paramtype uri: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword new_tab:
        :paramtype new_tab: bool
        :keyword color:
        :paramtype color: str
        :keyword icon_name:
        :paramtype icon_name: str
        :keyword scope:
        :paramtype scope: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.uri = uri
        self.name = name
        self.description = description
        self.new_tab = new_tab
        self.color = color
        self.icon_name = icon_name
        self.scope = scope


class ListCncMachineOperationsRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ListCncMachineOperationsRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar cnc_machine_id:
    :vartype cnc_machine_id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar filter_deleted: Known values are: "NoneDeleted", "OnlyDeleted", and "All".
    :vartype filter_deleted: str or ~ignos.api.client.models.CncFilterDeletedDto
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "cnc_machine_id": {"key": "cncMachineId", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "filter_deleted": {"key": "filterDeleted", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        cnc_machine_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        filter_deleted: Optional[Union[str, "_models.CncFilterDeletedDto"]] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword cnc_machine_id:
        :paramtype cnc_machine_id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword filter_deleted: Known values are: "NoneDeleted", "OnlyDeleted", and "All".
        :paramtype filter_deleted: str or ~ignos.api.client.models.CncFilterDeletedDto
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.cnc_machine_id = cnc_machine_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.filter_deleted = filter_deleted
        self.filter = filter
        self.continuation_token = continuation_token


class ListCncPartsRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ListCncPartsRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar filter_deleted: Known values are: "NoneDeleted", "OnlyDeleted", and "All".
    :vartype filter_deleted: str or ~ignos.api.client.models.CncFilterDeletedDto
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "filter_deleted": {"key": "filterDeleted", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        filter_deleted: Optional[Union[str, "_models.CncFilterDeletedDto"]] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword filter_deleted: Known values are: "NoneDeleted", "OnlyDeleted", and "All".
        :paramtype filter_deleted: str or ~ignos.api.client.models.CncFilterDeletedDto
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.filter_deleted = filter_deleted
        self.filter = filter
        self.continuation_token = continuation_token


class ListCustomerOrdersRequest(_serialization.Model):
    """ListCustomerOrdersRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.filter = filter
        self.continuation_token = continuation_token


class ListCustomersRequest(_serialization.Model):
    """ListCustomersRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.filter = filter
        self.continuation_token = continuation_token


class ListLinkableMeasurementFormSchemasRequest(_serialization.Model):  # pylint: disable=name-too-long
    """ListLinkableMeasurementFormSchemasRequest.

    All required parameters must be populated in order to send to server.

    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar page_size:
    :vartype page_size: int
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "schema_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "schema_id": {"key": "schemaId", "type": "str"},
        "page_size": {"key": "pageSize", "type": "int"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        schema_id: str,
        page_size: Optional[int] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword page_size:
        :paramtype page_size: int
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.schema_id = schema_id
        self.page_size = page_size
        self.filter = filter
        self.continuation_token = continuation_token


class ListMachineUptimesTodayRequest(_serialization.Model):
    """ListMachineUptimesTodayRequest.

    :ivar machine_external_ids:
    :vartype machine_external_ids: list[str]
    :ivar utc_offset:
    :vartype utc_offset: float
    :ivar limit:
    :vartype limit: int
    :ivar cursor:
    :vartype cursor: str
    """

    _attribute_map = {
        "machine_external_ids": {"key": "machineExternalIds", "type": "[str]"},
        "utc_offset": {"key": "utcOffset", "type": "float"},
        "limit": {"key": "limit", "type": "int"},
        "cursor": {"key": "cursor", "type": "str"},
    }

    def __init__(
        self,
        *,
        machine_external_ids: Optional[List[str]] = None,
        utc_offset: Optional[float] = None,
        limit: Optional[int] = None,
        cursor: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword machine_external_ids:
        :paramtype machine_external_ids: list[str]
        :keyword utc_offset:
        :paramtype utc_offset: float
        :keyword limit:
        :paramtype limit: int
        :keyword cursor:
        :paramtype cursor: str
        """
        super().__init__(**kwargs)
        self.machine_external_ids = machine_external_ids
        self.utc_offset = utc_offset
        self.limit = limit
        self.cursor = cursor


class ListMeasurementFormInstanceSchemaFeedbackRequest(_serialization.Model):  # pylint: disable=name-too-long
    """ListMeasurementFormInstanceSchemaFeedbackRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar search:
    :vartype search: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "search": {"key": "search", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        search: Optional[str] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword search:
        :paramtype search: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.search = search
        self.continuation_token = continuation_token


class ListMeasurementFormNeedsRequest(_serialization.Model):
    """ListMeasurementFormNeedsRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    :ivar only_without_drawing_url:
    :vartype only_without_drawing_url: bool
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "only_without_drawing_url": {"key": "onlyWithoutDrawingUrl", "type": "bool"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        only_without_drawing_url: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        :keyword only_without_drawing_url:
        :paramtype only_without_drawing_url: bool
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.filter = filter
        self.continuation_token = continuation_token
        self.only_without_drawing_url = only_without_drawing_url


class ListMeasurementFormsByStatusRequest(_serialization.Model):
    """ListMeasurementFormsByStatusRequest.

    :ivar status: Known values are: "Active", "Cancelled", "Completed", and "Approved".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
    :ivar status_changed_since:
    :vartype status_changed_since: ~datetime.datetime
    :ivar only_with_reports:
    :vartype only_with_reports: bool
    :ivar page_size:
    :vartype page_size: int
    :ivar search:
    :vartype search: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "status_changed_since": {"key": "statusChangedSince", "type": "iso-8601"},
        "only_with_reports": {"key": "onlyWithReports", "type": "bool"},
        "page_size": {"key": "pageSize", "type": "int"},
        "search": {"key": "search", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.MeasurementFormInstanceStatus"]] = None,
        status_changed_since: Optional[datetime.datetime] = None,
        only_with_reports: Optional[bool] = None,
        page_size: Optional[int] = None,
        search: Optional[str] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Known values are: "Active", "Cancelled", "Completed", and "Approved".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
        :keyword status_changed_since:
        :paramtype status_changed_since: ~datetime.datetime
        :keyword only_with_reports:
        :paramtype only_with_reports: bool
        :keyword page_size:
        :paramtype page_size: int
        :keyword search:
        :paramtype search: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.status_changed_since = status_changed_since
        self.only_with_reports = only_with_reports
        self.page_size = page_size
        self.search = search
        self.continuation_token = continuation_token


class ListMeasurementFormSchemasNotNeededRequest(_serialization.Model):  # pylint: disable=name-too-long
    """ListMeasurementFormSchemasNotNeededRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.filter = filter
        self.continuation_token = continuation_token


class ListMeasurementFormSchemasRequest(_serialization.Model):
    """ListMeasurementFormSchemasRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.filter = filter
        self.continuation_token = continuation_token


class ListMeasurementFormSchemasWithHistoryRequest(_serialization.Model):  # pylint: disable=name-too-long
    """ListMeasurementFormSchemasWithHistoryRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar version:
    :vartype version: int
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "version": {"key": "version", "type": "int"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        customer_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        version: Optional[int] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword version:
        :paramtype version: int
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.customer_id = customer_id
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.version = version
        self.continuation_token = continuation_token


class ListMeasurementFormsRequest(_serialization.Model):
    """ListMeasurementFormsRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar search:
    :vartype search: str
    :ivar continuation_token:
    :vartype continuation_token: str
    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar inactive:
    :vartype inactive: bool
    :ivar include_inactive_supplier_access:
    :vartype include_inactive_supplier_access: bool
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "search": {"key": "search", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "inactive": {"key": "inactive", "type": "bool"},
        "include_inactive_supplier_access": {"key": "includeInactiveSupplierAccess", "type": "bool"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        search: Optional[str] = None,
        continuation_token: Optional[str] = None,
        tenant_id: Optional[str] = None,
        inactive: Optional[bool] = None,
        include_inactive_supplier_access: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword search:
        :paramtype search: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword inactive:
        :paramtype inactive: bool
        :keyword include_inactive_supplier_access:
        :paramtype include_inactive_supplier_access: bool
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.search = search
        self.continuation_token = continuation_token
        self.tenant_id = tenant_id
        self.inactive = inactive
        self.include_inactive_supplier_access = include_inactive_supplier_access


class ListMrbInstanceReportsRequest(_serialization.Model):
    """ListMrbInstanceReportsRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, page_size: Optional[int] = None, continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.continuation_token = continuation_token


class ListOrderScheduleRequest(_serialization.Model):
    """ListOrderScheduleRequest.

    :ivar project_id:
    :vartype project_id: str
    :ivar planner:
    :vartype planner: str
    :ivar page_size:
    :vartype page_size: int
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "project_id": {"key": "projectId", "type": "str"},
        "planner": {"key": "planner", "type": "str"},
        "page_size": {"key": "pageSize", "type": "int"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        project_id: Optional[str] = None,
        planner: Optional[str] = None,
        page_size: Optional[int] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword project_id:
        :paramtype project_id: str
        :keyword planner:
        :paramtype planner: str
        :keyword page_size:
        :paramtype page_size: int
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.project_id = project_id
        self.planner = planner
        self.page_size = page_size
        self.continuation_token = continuation_token


class ListProductionScheduleOperationsRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ListProductionScheduleOperationsRequest.

    :ivar resource_group:
    :vartype resource_group: str
    :ivar resource_id:
    :vartype resource_id: str
    :ivar page_size:
    :vartype page_size: int
    :ivar continuation_token:
    :vartype continuation_token: str
    :ivar work_order_id:
    :vartype work_order_id: str
    :ivar project_id:
    :vartype project_id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_name:
    :vartype part_name: str
    :ivar material:
    :vartype material: str
    :ivar work_order_ids:
    :vartype work_order_ids: list[str]
    :ivar part_numbers:
    :vartype part_numbers: list[str]
    :ivar part_names:
    :vartype part_names: list[str]
    :ivar project_ids:
    :vartype project_ids: list[str]
    :ivar bom_positions:
    :vartype bom_positions: list[str]
    :ivar materials:
    :vartype materials: list[str]
    :ivar descriptions:
    :vartype descriptions: list[str]
    :ivar available_work:
    :vartype available_work: bool
    :ivar operation_statuses:
    :vartype operation_statuses: list[str or ~ignos.api.client.models.OperationStatusDto]
    :ivar after:
    :vartype after: ~datetime.datetime
    :ivar before:
    :vartype before: ~datetime.datetime
    """

    _attribute_map = {
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "page_size": {"key": "pageSize", "type": "int"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "project_id": {"key": "projectId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "work_order_ids": {"key": "workOrderIds", "type": "[str]"},
        "part_numbers": {"key": "partNumbers", "type": "[str]"},
        "part_names": {"key": "partNames", "type": "[str]"},
        "project_ids": {"key": "projectIds", "type": "[str]"},
        "bom_positions": {"key": "bomPositions", "type": "[str]"},
        "materials": {"key": "materials", "type": "[str]"},
        "descriptions": {"key": "descriptions", "type": "[str]"},
        "available_work": {"key": "availableWork", "type": "bool"},
        "operation_statuses": {"key": "operationStatuses", "type": "[str]"},
        "after": {"key": "after", "type": "iso-8601"},
        "before": {"key": "before", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        resource_group: Optional[str] = None,
        resource_id: Optional[str] = None,
        page_size: Optional[int] = None,
        continuation_token: Optional[str] = None,
        work_order_id: Optional[str] = None,
        project_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_name: Optional[str] = None,
        material: Optional[str] = None,
        work_order_ids: Optional[List[str]] = None,
        part_numbers: Optional[List[str]] = None,
        part_names: Optional[List[str]] = None,
        project_ids: Optional[List[str]] = None,
        bom_positions: Optional[List[str]] = None,
        materials: Optional[List[str]] = None,
        descriptions: Optional[List[str]] = None,
        available_work: Optional[bool] = None,
        operation_statuses: Optional[List[Union[str, "_models.OperationStatusDto"]]] = None,
        after: Optional[datetime.datetime] = None,
        before: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_group:
        :paramtype resource_group: str
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword page_size:
        :paramtype page_size: int
        :keyword continuation_token:
        :paramtype continuation_token: str
        :keyword work_order_id:
        :paramtype work_order_id: str
        :keyword project_id:
        :paramtype project_id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword material:
        :paramtype material: str
        :keyword work_order_ids:
        :paramtype work_order_ids: list[str]
        :keyword part_numbers:
        :paramtype part_numbers: list[str]
        :keyword part_names:
        :paramtype part_names: list[str]
        :keyword project_ids:
        :paramtype project_ids: list[str]
        :keyword bom_positions:
        :paramtype bom_positions: list[str]
        :keyword materials:
        :paramtype materials: list[str]
        :keyword descriptions:
        :paramtype descriptions: list[str]
        :keyword available_work:
        :paramtype available_work: bool
        :keyword operation_statuses:
        :paramtype operation_statuses: list[str or ~ignos.api.client.models.OperationStatusDto]
        :keyword after:
        :paramtype after: ~datetime.datetime
        :keyword before:
        :paramtype before: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.resource_group = resource_group
        self.resource_id = resource_id
        self.page_size = page_size
        self.continuation_token = continuation_token
        self.work_order_id = work_order_id
        self.project_id = project_id
        self.part_number = part_number
        self.part_name = part_name
        self.material = material
        self.work_order_ids = work_order_ids
        self.part_numbers = part_numbers
        self.part_names = part_names
        self.project_ids = project_ids
        self.bom_positions = bom_positions
        self.materials = materials
        self.descriptions = descriptions
        self.available_work = available_work
        self.operation_statuses = operation_statuses
        self.after = after
        self.before = before


class ListProjectsRequest(_serialization.Model):
    """ListProjectsRequest.

    :ivar project_query:
    :vartype project_query: str
    :ivar page_size:
    :vartype page_size: int
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "project_query": {"key": "projectQuery", "type": "str"},
        "page_size": {"key": "pageSize", "type": "int"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        project_query: Optional[str] = None,
        page_size: Optional[int] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword project_query:
        :paramtype project_query: str
        :keyword page_size:
        :paramtype page_size: int
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.project_query = project_query
        self.page_size = page_size
        self.continuation_token = continuation_token


class ListTraceWorkordersRequest(_serialization.Model):
    """ListTraceWorkordersRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar search:
    :vartype search: str
    :ivar company_id:
    :vartype company_id: str
    :ivar search_type: Known values are: "Contains", "StartsWith", "EndsWith", and "Equals".
    :vartype search_type: str or ~ignos.api.client.models.SearchTypeDto
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "search": {"key": "search", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "search_type": {"key": "searchType", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        search: Optional[str] = None,
        company_id: Optional[str] = None,
        search_type: Optional[Union[str, "_models.SearchTypeDto"]] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword search:
        :paramtype search: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword search_type: Known values are: "Contains", "StartsWith", "EndsWith", and "Equals".
        :paramtype search_type: str or ~ignos.api.client.models.SearchTypeDto
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.search = search
        self.company_id = company_id
        self.search_type = search_type
        self.continuation_token = continuation_token


class ListUsersRequest(_serialization.Model):
    """ListUsersRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar filter:
    :vartype filter: str
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "filter": {"key": "filter", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword filter:
        :paramtype filter: str
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.filter = filter
        self.continuation_token = continuation_token


class ListWorkOrdersRequest(_serialization.Model):
    """ListWorkOrdersRequest.

    :ivar page_size:
    :vartype page_size: int
    :ivar search:
    :vartype search: str
    :ivar company_id:
    :vartype company_id: str
    :ivar active_orders:
    :vartype active_orders: bool
    :ivar search_type: Known values are: "Contains", "StartsWith", "EndsWith", and "Equals".
    :vartype search_type: str or ~ignos.api.client.models.SearchTypeDto
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _attribute_map = {
        "page_size": {"key": "pageSize", "type": "int"},
        "search": {"key": "search", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "active_orders": {"key": "activeOrders", "type": "bool"},
        "search_type": {"key": "searchType", "type": "str"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        page_size: Optional[int] = None,
        search: Optional[str] = None,
        company_id: Optional[str] = None,
        active_orders: Optional[bool] = None,
        search_type: Optional[Union[str, "_models.SearchTypeDto"]] = None,
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_size:
        :paramtype page_size: int
        :keyword search:
        :paramtype search: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword active_orders:
        :paramtype active_orders: bool
        :keyword search_type: Known values are: "Contains", "StartsWith", "EndsWith", and "Equals".
        :paramtype search_type: str or ~ignos.api.client.models.SearchTypeDto
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.page_size = page_size
        self.search = search
        self.company_id = company_id
        self.active_orders = active_orders
        self.search_type = search_type
        self.continuation_token = continuation_token


class LocationDto(_serialization.Model):
    """LocationDto.

    All required parameters must be populated in order to send to server.

    :ivar location_id: Required.
    :vartype location_id: str
    :ivar location_name: Required.
    :vartype location_name: str
    :ivar kind: Required. Known values are: "Warehouse", "Zone", and "Location".
    :vartype kind: str or ~ignos.api.client.models.LocationKindDto
    :ivar profile:
    :vartype profile: str
    """

    _validation = {
        "location_id": {"required": True, "min_length": 1},
        "location_name": {"required": True, "min_length": 1},
        "kind": {"required": True},
    }

    _attribute_map = {
        "location_id": {"key": "locationId", "type": "str"},
        "location_name": {"key": "locationName", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "profile": {"key": "profile", "type": "str"},
    }

    def __init__(
        self,
        *,
        location_id: str,
        location_name: str,
        kind: Union[str, "_models.LocationKindDto"],
        profile: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword location_id: Required.
        :paramtype location_id: str
        :keyword location_name: Required.
        :paramtype location_name: str
        :keyword kind: Required. Known values are: "Warehouse", "Zone", and "Location".
        :paramtype kind: str or ~ignos.api.client.models.LocationKindDto
        :keyword profile:
        :paramtype profile: str
        """
        super().__init__(**kwargs)
        self.location_id = location_id
        self.location_name = location_name
        self.kind = kind
        self.profile = profile


class Machine(_serialization.Model):
    """Machine.

    :ivar external_id:
    :vartype external_id: str
    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar datapoints:
    :vartype datapoints: list[~ignos.api.client.models.NumericNullableValueWithTimestamp]
    """

    _attribute_map = {
        "external_id": {"key": "externalId", "type": "str"},
        "id": {"key": "id", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "datapoints": {"key": "datapoints", "type": "[NumericNullableValueWithTimestamp]"},
    }

    def __init__(
        self,
        *,
        external_id: Optional[str] = None,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        description: Optional[str] = None,
        datapoints: Optional[List["_models.NumericNullableValueWithTimestamp"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword id:
        :paramtype id: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword datapoints:
        :paramtype datapoints: list[~ignos.api.client.models.NumericNullableValueWithTimestamp]
        """
        super().__init__(**kwargs)
        self.external_id = external_id
        self.id = id
        self.name = name
        self.description = description
        self.datapoints = datapoints


class MachineAlarmCountDto(_serialization.Model):
    """MachineAlarmCountDto.

    All required parameters must be populated in order to send to server.

    :ivar type: Required. Known values are: "Fault" and "Warning".
    :vartype type: str or ~ignos.api.client.models.MachineAlarmType
    :ivar count: Required.
    :vartype count: int
    """

    _validation = {
        "type": {"required": True},
        "count": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "count": {"key": "count", "type": "int"},
    }

    def __init__(self, *, type: Union[str, "_models.MachineAlarmType"], count: int, **kwargs: Any) -> None:
        """
        :keyword type: Required. Known values are: "Fault" and "Warning".
        :paramtype type: str or ~ignos.api.client.models.MachineAlarmType
        :keyword count: Required.
        :paramtype count: int
        """
        super().__init__(**kwargs)
        self.type = type
        self.count = count


class MachineAlarmDetailsDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MachineAlarmDetailsDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    :ivar native_code:
    :vartype native_code: str
    :ivar native_severity:
    :vartype native_severity: int
    :ivar description: Required.
    :vartype description: str
    :ivar name:
    :vartype name: str
    :ivar type: Required. Known values are: "Fault" and "Warning".
    :vartype type: str or ~ignos.api.client.models.MachineAlarmType
    :ivar machine_name:
    :vartype machine_name: str
    :ivar asset_external_id: Required.
    :vartype asset_external_id: str
    :ivar timeseries_groups: Required.
    :vartype timeseries_groups: list[~ignos.api.client.models.MachineAlarmTimeseriesGroupDto]
    :ivar cnc_program_info:
    :vartype cnc_program_info: ~ignos.api.client.models.CncProgramInfoDto
    :ivar alarm_code:
    :vartype alarm_code: str
    :ivar plc_address:
    :vartype plc_address: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "start_time": {"required": True, "readonly": True},
        "end_time": {"readonly": True},
        "native_code": {"readonly": True},
        "native_severity": {"readonly": True},
        "description": {"required": True, "readonly": True, "min_length": 1},
        "name": {"readonly": True},
        "type": {"required": True},
        "asset_external_id": {"required": True, "min_length": 1},
        "timeseries_groups": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "native_code": {"key": "nativeCode", "type": "str"},
        "native_severity": {"key": "nativeSeverity", "type": "int"},
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "machine_name": {"key": "machineName", "type": "str"},
        "asset_external_id": {"key": "assetExternalId", "type": "str"},
        "timeseries_groups": {"key": "timeseriesGroups", "type": "[MachineAlarmTimeseriesGroupDto]"},
        "cnc_program_info": {"key": "cncProgramInfo", "type": "CncProgramInfoDto"},
        "alarm_code": {"key": "alarmCode", "type": "str"},
        "plc_address": {"key": "plcAddress", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.MachineAlarmType"],
        asset_external_id: str,
        timeseries_groups: List["_models.MachineAlarmTimeseriesGroupDto"],
        machine_name: Optional[str] = None,
        cnc_program_info: Optional["_models.CncProgramInfoDto"] = None,
        alarm_code: Optional[str] = None,
        plc_address: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Required. Known values are: "Fault" and "Warning".
        :paramtype type: str or ~ignos.api.client.models.MachineAlarmType
        :keyword machine_name:
        :paramtype machine_name: str
        :keyword asset_external_id: Required.
        :paramtype asset_external_id: str
        :keyword timeseries_groups: Required.
        :paramtype timeseries_groups: list[~ignos.api.client.models.MachineAlarmTimeseriesGroupDto]
        :keyword cnc_program_info:
        :paramtype cnc_program_info: ~ignos.api.client.models.CncProgramInfoDto
        :keyword alarm_code:
        :paramtype alarm_code: str
        :keyword plc_address:
        :paramtype plc_address: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.start_time = None
        self.end_time = None
        self.native_code = None
        self.native_severity = None
        self.description = None
        self.name = None
        self.type = type
        self.machine_name = machine_name
        self.asset_external_id = asset_external_id
        self.timeseries_groups = timeseries_groups
        self.cnc_program_info = cnc_program_info
        self.alarm_code = alarm_code
        self.plc_address = plc_address


class MachineAlarmDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MachineAlarmDto.

    All required parameters must be populated in order to send to server.

    :ivar alarm_type: Required. Known values are: "Fault" and "Warning".
    :vartype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
    :ivar id: Required.
    :vartype id: int
    :ivar type: Required.
    :vartype type: str
    :ivar sub_type: Required.
    :vartype sub_type: str
    :ivar description:
    :vartype description: str
    :ivar native_code: Required.
    :vartype native_code: str
    :ivar native_severity:
    :vartype native_severity: int
    :ivar name:
    :vartype name: str
    :ivar sequence:
    :vartype sequence: str
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        "alarm_type": {"required": True},
        "id": {"required": True},
        "type": {"required": True, "min_length": 1},
        "sub_type": {"required": True, "min_length": 1},
        "native_code": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "alarm_type": {"key": "alarmType", "type": "str"},
        "id": {"key": "id", "type": "int"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "native_code": {"key": "nativeCode", "type": "str"},
        "native_severity": {"key": "nativeSeverity", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        alarm_type: Union[str, "_models.MachineAlarmType"],
        id: int,  # pylint: disable=redefined-builtin
        type: str,
        sub_type: str,
        native_code: str,
        description: Optional[str] = None,
        native_severity: Optional[int] = None,
        name: Optional[str] = None,
        sequence: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword alarm_type: Required. Known values are: "Fault" and "Warning".
        :paramtype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
        :keyword id: Required.
        :paramtype id: int
        :keyword type: Required.
        :paramtype type: str
        :keyword sub_type: Required.
        :paramtype sub_type: str
        :keyword description:
        :paramtype description: str
        :keyword native_code: Required.
        :paramtype native_code: str
        :keyword native_severity:
        :paramtype native_severity: int
        :keyword name:
        :paramtype name: str
        :keyword sequence:
        :paramtype sequence: str
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword end_time:
        :paramtype end_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.alarm_type = alarm_type
        self.id = id
        self.type = type
        self.sub_type = sub_type
        self.description = description
        self.native_code = native_code
        self.native_severity = native_severity
        self.name = name
        self.sequence = sequence
        self.start_time = start_time
        self.end_time = end_time


class MachineAlarmDtoPagedResult(_serialization.Model):
    """MachineAlarmDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MachineAlarmDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MachineAlarmDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.MachineAlarmDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MachineAlarmDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MachineAlarmSeverityOccurenceDto(_serialization.Model):
    """MachineAlarmSeverityOccurenceDto.

    All required parameters must be populated in order to send to server.

    :ivar native_severity: Required.
    :vartype native_severity: int
    :ivar quantity: Required.
    :vartype quantity: int
    :ivar alarm_type: Required. Known values are: "Fault" and "Warning".
    :vartype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
    """

    _validation = {
        "native_severity": {"required": True},
        "quantity": {"required": True},
        "alarm_type": {"required": True},
    }

    _attribute_map = {
        "native_severity": {"key": "nativeSeverity", "type": "int"},
        "quantity": {"key": "quantity", "type": "int"},
        "alarm_type": {"key": "alarmType", "type": "str"},
    }

    def __init__(
        self, *, native_severity: int, quantity: int, alarm_type: Union[str, "_models.MachineAlarmType"], **kwargs: Any
    ) -> None:
        """
        :keyword native_severity: Required.
        :paramtype native_severity: int
        :keyword quantity: Required.
        :paramtype quantity: int
        :keyword alarm_type: Required. Known values are: "Fault" and "Warning".
        :paramtype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
        """
        super().__init__(**kwargs)
        self.native_severity = native_severity
        self.quantity = quantity
        self.alarm_type = alarm_type


class MachineAlarmSummaryDto(_serialization.Model):
    """MachineAlarmSummaryDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar asset_name: Required.
    :vartype asset_name: str
    :ivar asset_external_id:
    :vartype asset_external_id: str
    :ivar warning_duration: Required.
    :vartype warning_duration: int
    :ivar warning_quantity: Required.
    :vartype warning_quantity: int
    :ivar warning_quantity_open: Required.
    :vartype warning_quantity_open: int
    :ivar fault_duration: Required.
    :vartype fault_duration: int
    :ivar fault_quantity: Required.
    :vartype fault_quantity: int
    :ivar fault_quantity_open: Required.
    :vartype fault_quantity_open: int
    """

    _validation = {
        "asset_id": {"required": True, "readonly": True},
        "asset_name": {"required": True, "readonly": True, "min_length": 1},
        "asset_external_id": {"readonly": True},
        "warning_duration": {"required": True, "readonly": True},
        "warning_quantity": {"required": True, "readonly": True},
        "warning_quantity_open": {"required": True, "readonly": True},
        "fault_duration": {"required": True, "readonly": True},
        "fault_quantity": {"required": True, "readonly": True},
        "fault_quantity_open": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "asset_name": {"key": "assetName", "type": "str"},
        "asset_external_id": {"key": "assetExternalId", "type": "str"},
        "warning_duration": {"key": "warningDuration", "type": "int"},
        "warning_quantity": {"key": "warningQuantity", "type": "int"},
        "warning_quantity_open": {"key": "warningQuantityOpen", "type": "int"},
        "fault_duration": {"key": "faultDuration", "type": "int"},
        "fault_quantity": {"key": "faultQuantity", "type": "int"},
        "fault_quantity_open": {"key": "faultQuantityOpen", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.asset_id = None
        self.asset_name = None
        self.asset_external_id = None
        self.warning_duration = None
        self.warning_quantity = None
        self.warning_quantity_open = None
        self.fault_duration = None
        self.fault_quantity = None
        self.fault_quantity_open = None


class MachineAlarmTimeserieDto(_serialization.Model):
    """MachineAlarmTimeserieDto.

    :ivar label:
    :vartype label: str
    :ivar unit:
    :vartype unit: str
    :ivar data_points:
    :vartype data_points: list[~ignos.api.client.models.NumericDataPointDto]
    """

    _attribute_map = {
        "label": {"key": "label", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "data_points": {"key": "dataPoints", "type": "[NumericDataPointDto]"},
    }

    def __init__(
        self,
        *,
        label: Optional[str] = None,
        unit: Optional[str] = None,
        data_points: Optional[List["_models.NumericDataPointDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword label:
        :paramtype label: str
        :keyword unit:
        :paramtype unit: str
        :keyword data_points:
        :paramtype data_points: list[~ignos.api.client.models.NumericDataPointDto]
        """
        super().__init__(**kwargs)
        self.label = label
        self.unit = unit
        self.data_points = data_points


class MachineAlarmTimeseriesGroupDto(_serialization.Model):
    """MachineAlarmTimeseriesGroupDto.

    All required parameters must be populated in order to send to server.

    :ivar title: Required.
    :vartype title: str
    :ivar timeseries:
    :vartype timeseries: list[~ignos.api.client.models.MachineAlarmTimeserieDto]
    """

    _validation = {
        "title": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "timeseries": {"key": "timeseries", "type": "[MachineAlarmTimeserieDto]"},
    }

    def __init__(
        self, *, title: str, timeseries: Optional[List["_models.MachineAlarmTimeserieDto"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword title: Required.
        :paramtype title: str
        :keyword timeseries:
        :paramtype timeseries: list[~ignos.api.client.models.MachineAlarmTimeserieDto]
        """
        super().__init__(**kwargs)
        self.title = title
        self.timeseries = timeseries


class MachineDataHealthDto(_serialization.Model):
    """MachineDataHealthDto.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar state:
    :vartype state: str
    :ivar machine_state: Known values are: "InCycle", "MasterCam", "MdiCycle", "CamCycle", "Idle",
     "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
     "EStop", "Alarm", and "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar machine_state_timestamp:
    :vartype machine_state_timestamp: ~datetime.datetime
    :ivar power_consumption:
    :vartype power_consumption: float
    :ivar power_consumption_timestamp:
    :vartype power_consumption_timestamp: ~datetime.datetime
    :ivar warning: Required.
    :vartype warning: bool
    """

    _validation = {
        "asset_id": {"required": True},
        "name": {"required": True, "min_length": 1},
        "warning": {"required": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "machine_state": {"key": "machineState", "type": "str"},
        "machine_state_timestamp": {"key": "machineStateTimestamp", "type": "iso-8601"},
        "power_consumption": {"key": "powerConsumption", "type": "float"},
        "power_consumption_timestamp": {"key": "powerConsumptionTimestamp", "type": "iso-8601"},
        "warning": {"key": "warning", "type": "bool"},
    }

    def __init__(
        self,
        *,
        asset_id: int,
        name: str,
        warning: bool,
        description: Optional[str] = None,
        state: Optional[str] = None,
        machine_state: Optional[Union[str, "_models.MachineState"]] = None,
        machine_state_timestamp: Optional[datetime.datetime] = None,
        power_consumption: Optional[float] = None,
        power_consumption_timestamp: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword state:
        :paramtype state: str
        :keyword machine_state: Known values are: "InCycle", "MasterCam", "MdiCycle", "CamCycle",
         "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
         "EStop", "Alarm", and "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword machine_state_timestamp:
        :paramtype machine_state_timestamp: ~datetime.datetime
        :keyword power_consumption:
        :paramtype power_consumption: float
        :keyword power_consumption_timestamp:
        :paramtype power_consumption_timestamp: ~datetime.datetime
        :keyword warning: Required.
        :paramtype warning: bool
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.name = name
        self.description = description
        self.state = state
        self.machine_state = machine_state
        self.machine_state_timestamp = machine_state_timestamp
        self.power_consumption = power_consumption
        self.power_consumption_timestamp = power_consumption_timestamp
        self.warning = warning


class MachineDto(_serialization.Model):
    """MachineDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar external_id: Required.
    :vartype external_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar type:
    :vartype type: str
    :ivar work_order_asset_external_id:
    :vartype work_order_asset_external_id: str
    :ivar has_live_machine_state: Required.
    :vartype has_live_machine_state: bool
    :ivar company_id:
    :vartype company_id: str
    :ivar resource_id: Required.
    :vartype resource_id: str
    """

    _validation = {
        "id": {"required": True},
        "external_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "has_live_machine_state": {"required": True},
        "resource_id": {"required": True, "readonly": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "external_id": {"key": "externalId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "work_order_asset_external_id": {"key": "workOrderAssetExternalId", "type": "str"},
        "has_live_machine_state": {"key": "hasLiveMachineState", "type": "bool"},
        "company_id": {"key": "companyId", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        external_id: str,
        name: str,
        has_live_machine_state: bool,
        description: Optional[str] = None,
        type: Optional[str] = None,
        work_order_asset_external_id: Optional[str] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword external_id: Required.
        :paramtype external_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword type:
        :paramtype type: str
        :keyword work_order_asset_external_id:
        :paramtype work_order_asset_external_id: str
        :keyword has_live_machine_state: Required.
        :paramtype has_live_machine_state: bool
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.external_id = external_id
        self.name = name
        self.description = description
        self.type = type
        self.work_order_asset_external_id = work_order_asset_external_id
        self.has_live_machine_state = has_live_machine_state
        self.company_id = company_id
        self.resource_id = None


class MachineErpDataDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MachineErpDataDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar operation: Required.
    :vartype operation: int
    :ivar planned_time: Required.
    :vartype planned_time: float
    :ivar used_time: Required.
    :vartype used_time: float
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar unit:
    :vartype unit: str
    :ivar customer_order_reference:
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    :ivar work_order_description:
    :vartype work_order_description: str
    :ivar operation_description:
    :vartype operation_description: str
    :ivar project:
    :vartype project: ~ignos.api.client.models.WorkOrderProjectDto
    """

    _validation = {
        "work_order_id": {"required": True, "min_length": 1},
        "part": {"required": True},
        "quantity": {"required": True},
        "operation": {"required": True},
        "planned_time": {"required": True},
        "used_time": {"required": True},
        "start_time": {"required": True},
    }

    _attribute_map = {
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "operation": {"key": "operation", "type": "int"},
        "planned_time": {"key": "plannedTime", "type": "float"},
        "used_time": {"key": "usedTime", "type": "float"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "unit": {"key": "unit", "type": "str"},
        "customer_order_reference": {"key": "customerOrderReference", "type": "WorkorderCustomerOrderReferenceDto"},
        "work_order_description": {"key": "workOrderDescription", "type": "str"},
        "operation_description": {"key": "operationDescription", "type": "str"},
        "project": {"key": "project", "type": "WorkOrderProjectDto"},
    }

    def __init__(
        self,
        *,
        work_order_id: str,
        part: "_models.PartDto",
        quantity: float,
        operation: int,
        planned_time: float,
        used_time: float,
        start_time: datetime.datetime,
        unit: Optional[str] = None,
        customer_order_reference: Optional["_models.WorkorderCustomerOrderReferenceDto"] = None,
        work_order_description: Optional[str] = None,
        operation_description: Optional[str] = None,
        project: Optional["_models.WorkOrderProjectDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword operation: Required.
        :paramtype operation: int
        :keyword planned_time: Required.
        :paramtype planned_time: float
        :keyword used_time: Required.
        :paramtype used_time: float
        :keyword start_time: Required.
        :paramtype start_time: ~datetime.datetime
        :keyword unit:
        :paramtype unit: str
        :keyword customer_order_reference:
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        :keyword work_order_description:
        :paramtype work_order_description: str
        :keyword operation_description:
        :paramtype operation_description: str
        :keyword project:
        :paramtype project: ~ignos.api.client.models.WorkOrderProjectDto
        """
        super().__init__(**kwargs)
        self.work_order_id = work_order_id
        self.part = part
        self.quantity = quantity
        self.operation = operation
        self.planned_time = planned_time
        self.used_time = used_time
        self.start_time = start_time
        self.unit = unit
        self.customer_order_reference = customer_order_reference
        self.work_order_description = work_order_description
        self.operation_description = operation_description
        self.project = project


class MachineErpDataListDto(_serialization.Model):
    """MachineErpDataListDto.

    :ivar machines:
    :vartype machines: list[~ignos.api.client.models.SingleMachineErpDataListDto]
    """

    _attribute_map = {
        "machines": {"key": "machines", "type": "[SingleMachineErpDataListDto]"},
    }

    def __init__(
        self, *, machines: Optional[List["_models.SingleMachineErpDataListDto"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword machines:
        :paramtype machines: list[~ignos.api.client.models.SingleMachineErpDataListDto]
        """
        super().__init__(**kwargs)
        self.machines = machines


class MachineGroupDto(_serialization.Model):
    """MachineGroupDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar company_id:
    :vartype company_id: str
    :ivar machines: Required.
    :vartype machines: list[~ignos.api.client.models.MachineGroupMemberDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "machines": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "machines": {"key": "machines", "type": "[MachineGroupMemberDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        machines: List["_models.MachineGroupMemberDto"],
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword machines: Required.
        :paramtype machines: list[~ignos.api.client.models.MachineGroupMemberDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.company_id = company_id
        self.machines = machines


class MachineGroupMemberDto(_serialization.Model):
    """MachineGroupMemberDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar external_id: Required.
    :vartype external_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar type:
    :vartype type: str
    """

    _validation = {
        "id": {"required": True},
        "external_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "external_id": {"key": "externalId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        external_id: str,
        name: str,
        description: Optional[str] = None,
        type: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword external_id: Required.
        :paramtype external_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.external_id = external_id
        self.name = name
        self.description = description
        self.type = type


class MachineGroupUtilizationDto(_serialization.Model):
    """MachineGroupUtilizationDto.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar utilization: Required.
    :vartype utilization: ~ignos.api.client.models.UtilizationDto
    :ivar machines: Required.
    :vartype machines: list[~ignos.api.client.models.MachineUtilizationV2Dto]
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "utilization": {"required": True},
        "machines": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "utilization": {"key": "utilization", "type": "UtilizationDto"},
        "machines": {"key": "machines", "type": "[MachineUtilizationV2Dto]"},
    }

    def __init__(
        self,
        *,
        name: str,
        utilization: "_models.UtilizationDto",
        machines: List["_models.MachineUtilizationV2Dto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword utilization: Required.
        :paramtype utilization: ~ignos.api.client.models.UtilizationDto
        :keyword machines: Required.
        :paramtype machines: list[~ignos.api.client.models.MachineUtilizationV2Dto]
        """
        super().__init__(**kwargs)
        self.name = name
        self.utilization = utilization
        self.machines = machines


class MachineInactivityAlertTypeDto(_serialization.Model):
    """MachineInactivityAlertTypeDto.

    :ivar type:
    :vartype type: str
    :ivar category:
    :vartype category: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "category": {"key": "category", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        category: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type:
        :paramtype type: str
        :keyword category:
        :paramtype category: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.category = category
        self.name = name
        self.description = description


class MachineInactivityCriteriaDto(_serialization.Model):
    """MachineInactivityCriteriaDto.

    All required parameters must be populated in order to send to server.

    :ivar machine_external_id: Required.
    :vartype machine_external_id: str
    :ivar inactivity_period_in_minutes: Required.
    :vartype inactivity_period_in_minutes: int
    """

    _validation = {
        "machine_external_id": {"required": True, "max_length": 50, "min_length": 1},
        "inactivity_period_in_minutes": {"required": True, "maximum": 180, "minimum": 1},
    }

    _attribute_map = {
        "machine_external_id": {"key": "machineExternalId", "type": "str"},
        "inactivity_period_in_minutes": {"key": "inactivityPeriodInMinutes", "type": "int"},
    }

    def __init__(self, *, machine_external_id: str, inactivity_period_in_minutes: int, **kwargs: Any) -> None:
        """
        :keyword machine_external_id: Required.
        :paramtype machine_external_id: str
        :keyword inactivity_period_in_minutes: Required.
        :paramtype inactivity_period_in_minutes: int
        """
        super().__init__(**kwargs)
        self.machine_external_id = machine_external_id
        self.inactivity_period_in_minutes = inactivity_period_in_minutes


class MachineInactivityCriteriaDtoAlertSubscriptionDto(_serialization.Model):  # pylint: disable=name-too-long
    """MachineInactivityCriteriaDtoAlertSubscriptionDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar alert_type: Required.
    :vartype alert_type: str
    :ivar alert_category: Required.
    :vartype alert_category: str
    :ivar alert_name: Required.
    :vartype alert_name: str
    :ivar description:
    :vartype description: str
    :ivar source:
    :vartype source: str
    :ivar subscriber: Required.
    :vartype subscriber: ~ignos.api.client.models.SubscriberDto
    :ivar notification_channel: Required. "Teams"
    :vartype notification_channel: str or ~ignos.api.client.models.NotificationChannelDto
    :ivar criteria: Required.
    :vartype criteria: ~ignos.api.client.models.MachineInactivityCriteriaDto
    :ivar enabled:
    :vartype enabled: bool
    """

    _validation = {
        "id": {"required": True, "max_length": 50, "min_length": 1},
        "alert_type": {"required": True, "max_length": 50, "min_length": 1},
        "alert_category": {"required": True, "max_length": 50, "min_length": 1},
        "alert_name": {"required": True, "max_length": 50, "min_length": 1},
        "description": {"max_length": 3000},
        "source": {"max_length": 50},
        "subscriber": {"required": True},
        "notification_channel": {"required": True},
        "criteria": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "alert_type": {"key": "alertType", "type": "str"},
        "alert_category": {"key": "alertCategory", "type": "str"},
        "alert_name": {"key": "alertName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "source": {"key": "source", "type": "str"},
        "subscriber": {"key": "subscriber", "type": "SubscriberDto"},
        "notification_channel": {"key": "notificationChannel", "type": "str"},
        "criteria": {"key": "criteria", "type": "MachineInactivityCriteriaDto"},
        "enabled": {"key": "enabled", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        alert_type: str,
        alert_category: str,
        alert_name: str,
        subscriber: "_models.SubscriberDto",
        notification_channel: Union[str, "_models.NotificationChannelDto"],
        criteria: "_models.MachineInactivityCriteriaDto",
        description: Optional[str] = None,
        source: Optional[str] = None,
        enabled: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword alert_type: Required.
        :paramtype alert_type: str
        :keyword alert_category: Required.
        :paramtype alert_category: str
        :keyword alert_name: Required.
        :paramtype alert_name: str
        :keyword description:
        :paramtype description: str
        :keyword source:
        :paramtype source: str
        :keyword subscriber: Required.
        :paramtype subscriber: ~ignos.api.client.models.SubscriberDto
        :keyword notification_channel: Required. "Teams"
        :paramtype notification_channel: str or ~ignos.api.client.models.NotificationChannelDto
        :keyword criteria: Required.
        :paramtype criteria: ~ignos.api.client.models.MachineInactivityCriteriaDto
        :keyword enabled:
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.alert_type = alert_type
        self.alert_category = alert_category
        self.alert_name = alert_name
        self.description = description
        self.source = source
        self.subscriber = subscriber
        self.notification_channel = notification_channel
        self.criteria = criteria
        self.enabled = enabled


class MachineStateDatapoint(_serialization.Model):
    """MachineStateDatapoint.

    All required parameters must be populated in order to send to server.

    :ivar machine_state_text: Required.
    :vartype machine_state_text: str
    :ivar machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
     "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
     "ManualMode", "EStop", "Alarm", and "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar timestamp: Required.
    :vartype timestamp: int
    """

    _validation = {
        "machine_state_text": {"required": True, "min_length": 1},
        "machine_state": {"required": True},
        "timestamp": {"required": True},
    }

    _attribute_map = {
        "machine_state_text": {"key": "machineStateText", "type": "str"},
        "machine_state": {"key": "machineState", "type": "str"},
        "timestamp": {"key": "timestamp", "type": "int"},
    }

    def __init__(
        self,
        *,
        machine_state_text: str,
        machine_state: Union[str, "_models.MachineState"],
        timestamp: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword machine_state_text: Required.
        :paramtype machine_state_text: str
        :keyword machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
         "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
         "ManualMode", "EStop", "Alarm", and "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword timestamp: Required.
        :paramtype timestamp: int
        """
        super().__init__(**kwargs)
        self.machine_state_text = machine_state_text
        self.machine_state = machine_state
        self.timestamp = timestamp


class MachineStateDto(_serialization.Model):
    """MachineStateDto.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar state: Required.
    :vartype state: str
    :ivar machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
     "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
     "ManualMode", "EStop", "Alarm", and "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        "asset_id": {"required": True},
        "name": {"required": True, "min_length": 1},
        "state": {"required": True, "min_length": 1},
        "machine_state": {"required": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "machine_state": {"key": "machineState", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        asset_id: int,
        name: str,
        state: str,
        machine_state: Union[str, "_models.MachineState"],
        description: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword state: Required.
        :paramtype state: str
        :keyword machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
         "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
         "ManualMode", "EStop", "Alarm", and "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.name = name
        self.description = description
        self.state = state
        self.machine_state = machine_state
        self.start_time = start_time


class MachineStateListDto(_serialization.Model):
    """MachineStateListDto.

    :ivar machines:
    :vartype machines: list[~ignos.api.client.models.MachineStateDto]
    """

    _attribute_map = {
        "machines": {"key": "machines", "type": "[MachineStateDto]"},
    }

    def __init__(self, *, machines: Optional[List["_models.MachineStateDto"]] = None, **kwargs: Any) -> None:
        """
        :keyword machines:
        :paramtype machines: list[~ignos.api.client.models.MachineStateDto]
        """
        super().__init__(**kwargs)
        self.machines = machines


class MachineStatesSummaryDto(_serialization.Model):
    """MachineStatesSummaryDto.

    All required parameters must be populated in order to send to server.

    :ivar states: Required.
    :vartype states: list[~ignos.api.client.models.StateDto]
    """

    _validation = {
        "states": {"required": True},
    }

    _attribute_map = {
        "states": {"key": "states", "type": "[StateDto]"},
    }

    def __init__(self, *, states: List["_models.StateDto"], **kwargs: Any) -> None:
        """
        :keyword states: Required.
        :paramtype states: list[~ignos.api.client.models.StateDto]
        """
        super().__init__(**kwargs)
        self.states = states


class MachineUptimeDto(_serialization.Model):
    """MachineUptimeDto.

    All required parameters must be populated in order to send to server.

    :ivar asset_external_id: Required.
    :vartype asset_external_id: str
    :ivar percent: Required.
    :vartype percent: int
    :ivar number_of_seconds: Required.
    :vartype number_of_seconds: int
    """

    _validation = {
        "asset_external_id": {"required": True, "min_length": 1},
        "percent": {"required": True},
        "number_of_seconds": {"required": True},
    }

    _attribute_map = {
        "asset_external_id": {"key": "assetExternalId", "type": "str"},
        "percent": {"key": "percent", "type": "int"},
        "number_of_seconds": {"key": "numberOfSeconds", "type": "int"},
    }

    def __init__(self, *, asset_external_id: str, percent: int, number_of_seconds: int, **kwargs: Any) -> None:
        """
        :keyword asset_external_id: Required.
        :paramtype asset_external_id: str
        :keyword percent: Required.
        :paramtype percent: int
        :keyword number_of_seconds: Required.
        :paramtype number_of_seconds: int
        """
        super().__init__(**kwargs)
        self.asset_external_id = asset_external_id
        self.percent = percent
        self.number_of_seconds = number_of_seconds


class MachineUptimesAggregateDto(_serialization.Model):
    """MachineUptimesAggregateDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar machine_uptimes: Required.
    :vartype machine_uptimes: list[~ignos.api.client.models.MachineUptimeDto]
    :ivar sum: Required.
    :vartype sum: ~ignos.api.client.models.MachineUptimeSumDto
    """

    _validation = {
        "machine_uptimes": {"required": True, "readonly": True},
        "sum": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "machine_uptimes": {"key": "machineUptimes", "type": "[MachineUptimeDto]"},
        "sum": {"key": "sum", "type": "MachineUptimeSumDto"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.machine_uptimes = None
        self.sum = None


class MachineUptimeSumDto(_serialization.Model):
    """MachineUptimeSumDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar percent: Required.
    :vartype percent: int
    :ivar number_of_seconds: Required.
    :vartype number_of_seconds: int
    """

    _validation = {
        "percent": {"required": True, "readonly": True},
        "number_of_seconds": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "percent": {"key": "percent", "type": "int"},
        "number_of_seconds": {"key": "numberOfSeconds", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.percent = None
        self.number_of_seconds = None


class MachineUtilizationDto(_serialization.Model):
    """MachineUtilizationDto.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar state: Required.
    :vartype state: str
    :ivar machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
     "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
     "ManualMode", "EStop", "Alarm", and "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar workorder:
    :vartype workorder: ~ignos.api.client.models.UtilizationWorkorderDto
    :ivar power_on:
    :vartype power_on: ~ignos.api.client.models.PowerOnUtilizationDto
    """

    _validation = {
        "asset_id": {"required": True},
        "name": {"required": True, "min_length": 1},
        "state": {"required": True, "min_length": 1},
        "machine_state": {"required": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "machine_state": {"key": "machineState", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "workorder": {"key": "workorder", "type": "UtilizationWorkorderDto"},
        "power_on": {"key": "powerOn", "type": "PowerOnUtilizationDto"},
    }

    def __init__(
        self,
        *,
        asset_id: int,
        name: str,
        state: str,
        machine_state: Union[str, "_models.MachineState"],
        description: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        workorder: Optional["_models.UtilizationWorkorderDto"] = None,
        power_on: Optional["_models.PowerOnUtilizationDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword state: Required.
        :paramtype state: str
        :keyword machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
         "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
         "ManualMode", "EStop", "Alarm", and "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword workorder:
        :paramtype workorder: ~ignos.api.client.models.UtilizationWorkorderDto
        :keyword power_on:
        :paramtype power_on: ~ignos.api.client.models.PowerOnUtilizationDto
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.name = name
        self.description = description
        self.state = state
        self.machine_state = machine_state
        self.start_time = start_time
        self.workorder = workorder
        self.power_on = power_on


class MachineUtilizationV2Dto(_serialization.Model):
    """MachineUtilizationV2Dto.

    All required parameters must be populated in order to send to server.

    :ivar id:
    :vartype id: int
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar utilization: Required.
    :vartype utilization: ~ignos.api.client.models.UtilizationDto
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "utilization": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "utilization": {"key": "utilization", "type": "UtilizationDto"},
    }

    def __init__(
        self,
        *,
        name: str,
        utilization: "_models.UtilizationDto",
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword utilization: Required.
        :paramtype utilization: ~ignos.api.client.models.UtilizationDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.utilization = utilization


class ManufacturerDto(_serialization.Model):
    """ManufacturerDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: str, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class MaterialConsumptionDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MaterialConsumptionDto.

    All required parameters must be populated in order to send to server.

    :ivar operation:
    :vartype operation: int
    :ivar material_line:
    :vartype material_line: int
    :ivar material: Required.
    :vartype material: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
    :vartype trace_type: str or ~ignos.api.client.models.TraceType
    :ivar trace_number:
    :vartype trace_number: str
    :ivar lot:
    :vartype lot: str
    :ivar vendor_batch:
    :vartype vendor_batch: str
    :ivar supplier_id:
    :vartype supplier_id: str
    :ivar procurement_order:
    :vartype procurement_order: str
    :ivar procurement_order_line:
    :vartype procurement_order_line: int
    :ivar source_work_order:
    :vartype source_work_order: str
    :ivar source_sequence:
    :vartype source_sequence: str
    :ivar label: Required.
    :vartype label: str
    :ivar reference:
    :vartype reference: str
    """

    _validation = {
        "material": {"required": True},
        "quantity": {"required": True},
        "trace_type": {"required": True},
        "label": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "material_line": {"key": "materialLine", "type": "int"},
        "material": {"key": "material", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "trace_type": {"key": "traceType", "type": "str"},
        "trace_number": {"key": "traceNumber", "type": "str"},
        "lot": {"key": "lot", "type": "str"},
        "vendor_batch": {"key": "vendorBatch", "type": "str"},
        "supplier_id": {"key": "supplierId", "type": "str"},
        "procurement_order": {"key": "procurementOrder", "type": "str"},
        "procurement_order_line": {"key": "procurementOrderLine", "type": "int"},
        "source_work_order": {"key": "sourceWorkOrder", "type": "str"},
        "source_sequence": {"key": "sourceSequence", "type": "str"},
        "label": {"key": "label", "type": "str"},
        "reference": {"key": "reference", "type": "str"},
    }

    def __init__(
        self,
        *,
        material: "_models.PartDto",
        quantity: float,
        trace_type: Union[str, "_models.TraceType"],
        label: str,
        operation: Optional[int] = None,
        material_line: Optional[int] = None,
        unit: Optional[str] = None,
        trace_number: Optional[str] = None,
        lot: Optional[str] = None,
        vendor_batch: Optional[str] = None,
        supplier_id: Optional[str] = None,
        procurement_order: Optional[str] = None,
        procurement_order_line: Optional[int] = None,
        source_work_order: Optional[str] = None,
        source_sequence: Optional[str] = None,
        reference: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation:
        :paramtype operation: int
        :keyword material_line:
        :paramtype material_line: int
        :keyword material: Required.
        :paramtype material: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
        :paramtype trace_type: str or ~ignos.api.client.models.TraceType
        :keyword trace_number:
        :paramtype trace_number: str
        :keyword lot:
        :paramtype lot: str
        :keyword vendor_batch:
        :paramtype vendor_batch: str
        :keyword supplier_id:
        :paramtype supplier_id: str
        :keyword procurement_order:
        :paramtype procurement_order: str
        :keyword procurement_order_line:
        :paramtype procurement_order_line: int
        :keyword source_work_order:
        :paramtype source_work_order: str
        :keyword source_sequence:
        :paramtype source_sequence: str
        :keyword label: Required.
        :paramtype label: str
        :keyword reference:
        :paramtype reference: str
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.material_line = material_line
        self.material = material
        self.quantity = quantity
        self.unit = unit
        self.trace_type = trace_type
        self.trace_number = trace_number
        self.lot = lot
        self.vendor_batch = vendor_batch
        self.supplier_id = supplier_id
        self.procurement_order = procurement_order
        self.procurement_order_line = procurement_order_line
        self.source_work_order = source_work_order
        self.source_sequence = source_sequence
        self.label = label
        self.reference = reference


class MaterialMassDensityDto(_serialization.Model):
    """MaterialMassDensityDto.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar weight_in_kg_per_dm3: Required.
    :vartype weight_in_kg_per_dm3: float
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "weight_in_kg_per_dm3": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "weight_in_kg_per_dm3": {"key": "weightInKgPerDm3", "type": "float"},
    }

    def __init__(self, *, name: str, weight_in_kg_per_dm3: float, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword weight_in_kg_per_dm3: Required.
        :paramtype weight_in_kg_per_dm3: float
        """
        super().__init__(**kwargs)
        self.name = name
        self.weight_in_kg_per_dm3 = weight_in_kg_per_dm3


class MaterialPickListResultDto(_serialization.Model):
    """MaterialPickListResultDto.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MaterialPickListResultEntryDto]
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MaterialPickListResultEntryDto]"},
    }

    def __init__(self, *, results: List["_models.MaterialPickListResultEntryDto"], **kwargs: Any) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MaterialPickListResultEntryDto]
        """
        super().__init__(**kwargs)
        self.results = results


class MaterialPickListResultEntryDto(_serialization.Model):
    """MaterialPickListResultEntryDto.

    All required parameters must be populated in order to send to server.

    :ivar company_id: Required.
    :vartype company_id: str
    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar part_number: Required.
    :vartype part_number: str
    :ivar remaining_bom_line_quantity: Required.
    :vartype remaining_bom_line_quantity: float
    :ivar posted: Required.
    :vartype posted: bool
    """

    _validation = {
        "company_id": {"required": True, "min_length": 1},
        "work_order_id": {"required": True, "min_length": 1},
        "part_number": {"required": True, "min_length": 1},
        "remaining_bom_line_quantity": {"required": True},
        "posted": {"required": True},
    }

    _attribute_map = {
        "company_id": {"key": "companyId", "type": "str"},
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "remaining_bom_line_quantity": {"key": "remainingBomLineQuantity", "type": "float"},
        "posted": {"key": "posted", "type": "bool"},
    }

    def __init__(
        self,
        *,
        company_id: str,
        work_order_id: str,
        part_number: str,
        remaining_bom_line_quantity: float,
        posted: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword company_id: Required.
        :paramtype company_id: str
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword remaining_bom_line_quantity: Required.
        :paramtype remaining_bom_line_quantity: float
        :keyword posted: Required.
        :paramtype posted: bool
        """
        super().__init__(**kwargs)
        self.company_id = company_id
        self.work_order_id = work_order_id
        self.part_number = part_number
        self.remaining_bom_line_quantity = remaining_bom_line_quantity
        self.posted = posted


class MaterialsPrerequisiteDto(_serialization.Model):
    """MaterialsPrerequisiteDto.

    :ivar number_of_parts_covered_by_on_hand:
    :vartype number_of_parts_covered_by_on_hand: int
    :ivar material_status: Known values are: "NotRequired", "NotAvailable", "PartiallyAvailable",
     "Available", "FullyConsumed", and "Unknown".
    :vartype material_status: str or ~ignos.api.client.models.MaterialStatusDto
    """

    _attribute_map = {
        "number_of_parts_covered_by_on_hand": {"key": "numberOfPartsCoveredByOnHand", "type": "int"},
        "material_status": {"key": "materialStatus", "type": "str"},
    }

    def __init__(
        self,
        *,
        number_of_parts_covered_by_on_hand: Optional[int] = None,
        material_status: Optional[Union[str, "_models.MaterialStatusDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword number_of_parts_covered_by_on_hand:
        :paramtype number_of_parts_covered_by_on_hand: int
        :keyword material_status: Known values are: "NotRequired", "NotAvailable",
         "PartiallyAvailable", "Available", "FullyConsumed", and "Unknown".
        :paramtype material_status: str or ~ignos.api.client.models.MaterialStatusDto
        """
        super().__init__(**kwargs)
        self.number_of_parts_covered_by_on_hand = number_of_parts_covered_by_on_hand
        self.material_status = material_status


class MaterialWeightDto(_serialization.Model):
    """MaterialWeightDto.

    All required parameters must be populated in order to send to server.

    :ivar weight: Required.
    :vartype weight: float
    :ivar volume: Required.
    :vartype volume: float
    """

    _validation = {
        "weight": {"required": True},
        "volume": {"required": True},
    }

    _attribute_map = {
        "weight": {"key": "weight", "type": "float"},
        "volume": {"key": "volume", "type": "float"},
    }

    def __init__(self, *, weight: float, volume: float, **kwargs: Any) -> None:
        """
        :keyword weight: Required.
        :paramtype weight: float
        :keyword volume: Required.
        :paramtype volume: float
        """
        super().__init__(**kwargs)
        self.weight = weight
        self.volume = volume


class MeasurementFormBalloonMappingDto(_serialization.Model):
    """MeasurementFormBalloonMappingDto.

    All required parameters must be populated in order to send to server.

    :ivar balloon: Required.
    :vartype balloon: ~ignos.api.client.models.MeasurementFormGroupedElementDto
    :ivar mapped_balloon_id:
    :vartype mapped_balloon_id: str
    :ivar mapping_score_percent:
    :vartype mapping_score_percent: int
    """

    _validation = {
        "balloon": {"required": True},
    }

    _attribute_map = {
        "balloon": {"key": "balloon", "type": "MeasurementFormGroupedElementDto"},
        "mapped_balloon_id": {"key": "mappedBalloonId", "type": "str"},
        "mapping_score_percent": {"key": "mappingScorePercent", "type": "int"},
    }

    def __init__(
        self,
        *,
        balloon: "_models.MeasurementFormGroupedElementDto",
        mapped_balloon_id: Optional[str] = None,
        mapping_score_percent: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword balloon: Required.
        :paramtype balloon: ~ignos.api.client.models.MeasurementFormGroupedElementDto
        :keyword mapped_balloon_id:
        :paramtype mapped_balloon_id: str
        :keyword mapping_score_percent:
        :paramtype mapping_score_percent: int
        """
        super().__init__(**kwargs)
        self.balloon = balloon
        self.mapped_balloon_id = mapped_balloon_id
        self.mapping_score_percent = mapping_score_percent


class MeasurementFormBalloonMappingRequestDto(_serialization.Model):
    """MeasurementFormBalloonMappingRequestDto.

    All required parameters must be populated in order to send to server.

    :ivar source_balloon_id: Required.
    :vartype source_balloon_id: str
    :ivar target_balloon_id: Required.
    :vartype target_balloon_id: str
    :ivar mapping_score_percent:
    :vartype mapping_score_percent: int
    """

    _validation = {
        "source_balloon_id": {"required": True, "min_length": 1},
        "target_balloon_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "source_balloon_id": {"key": "sourceBalloonId", "type": "str"},
        "target_balloon_id": {"key": "targetBalloonId", "type": "str"},
        "mapping_score_percent": {"key": "mappingScorePercent", "type": "int"},
    }

    def __init__(
        self,
        *,
        source_balloon_id: str,
        target_balloon_id: str,
        mapping_score_percent: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source_balloon_id: Required.
        :paramtype source_balloon_id: str
        :keyword target_balloon_id: Required.
        :paramtype target_balloon_id: str
        :keyword mapping_score_percent:
        :paramtype mapping_score_percent: int
        """
        super().__init__(**kwargs)
        self.source_balloon_id = source_balloon_id
        self.target_balloon_id = target_balloon_id
        self.mapping_score_percent = mapping_score_percent


class MeasurementFormCustomerSettingsDto(_serialization.Model):
    """MeasurementFormCustomerSettingsDto.

    All required parameters must be populated in order to send to server.

    :ivar customer_id: Required.
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar include_tools_in_report: Required.
    :vartype include_tools_in_report: bool
    :ivar validation_rule_id:
    :vartype validation_rule_id: str
    :ivar require_calibrated_tools: Required.
    :vartype require_calibrated_tools: bool
    """

    _validation = {
        "customer_id": {"required": True, "min_length": 1},
        "include_tools_in_report": {"required": True},
        "require_calibrated_tools": {"required": True},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "include_tools_in_report": {"key": "includeToolsInReport", "type": "bool"},
        "validation_rule_id": {"key": "validationRuleId", "type": "str"},
        "require_calibrated_tools": {"key": "requireCalibratedTools", "type": "bool"},
    }

    def __init__(
        self,
        *,
        customer_id: str,
        include_tools_in_report: bool,
        require_calibrated_tools: bool,
        customer_name: Optional[str] = None,
        validation_rule_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id: Required.
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword include_tools_in_report: Required.
        :paramtype include_tools_in_report: bool
        :keyword validation_rule_id:
        :paramtype validation_rule_id: str
        :keyword require_calibrated_tools: Required.
        :paramtype require_calibrated_tools: bool
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.include_tools_in_report = include_tools_in_report
        self.validation_rule_id = validation_rule_id
        self.require_calibrated_tools = require_calibrated_tools


class MeasurementFormDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar version_id: Required.
    :vartype version_id: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing: Required.
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar status: Required. Known values are: "Draft", "Released", and "Revoked".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormStatus
    :ivar source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and "Manual".
    :vartype source: str or ~ignos.api.client.models.MeasurementFormSource
    :ivar extra_schemas: Required.
    :vartype extra_schemas: list[~ignos.api.client.models.MeasurementFormLinkedSchemaDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "schema_id": {"required": True, "min_length": 1},
        "version_id": {"required": True},
        "drawing": {"required": True, "min_length": 1},
        "created_by": {"required": True, "min_length": 1},
        "created": {"required": True},
        "status": {"required": True},
        "source": {"required": True},
        "extra_schemas": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "version_id": {"key": "versionId", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "source": {"key": "source", "type": "str"},
        "extra_schemas": {"key": "extraSchemas", "type": "[MeasurementFormLinkedSchemaDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        schema_id: str,
        version_id: int,
        drawing: str,
        created_by: str,
        created: datetime.datetime,
        status: Union[str, "_models.MeasurementFormStatus"],
        source: Union[str, "_models.MeasurementFormSource"],
        extra_schemas: List["_models.MeasurementFormLinkedSchemaDto"],
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword version_id: Required.
        :paramtype version_id: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing: Required.
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword status: Required. Known values are: "Draft", "Released", and "Revoked".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormStatus
        :keyword source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and
         "Manual".
        :paramtype source: str or ~ignos.api.client.models.MeasurementFormSource
        :keyword extra_schemas: Required.
        :paramtype extra_schemas: list[~ignos.api.client.models.MeasurementFormLinkedSchemaDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.schema_id = schema_id
        self.version_id = version_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.created_by = created_by
        self.created = created
        self.status = status
        self.source = source
        self.extra_schemas = extra_schemas


class MeasurementFormElementDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormElementDto.

    :ivar id:
    :vartype id: str
    :ivar image_url:
    :vartype image_url: str
    :ivar thumbnail_url:
    :vartype thumbnail_url: str
    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar section:
    :vartype section: str
    :ivar page_number:
    :vartype page_number: int
    :ivar sheet_zone:
    :vartype sheet_zone: str
    :ivar places:
    :vartype places: int
    :ivar nominal:
    :vartype nominal: float
    :ivar nominal_text:
    :vartype nominal_text: str
    :ivar type:
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar unit_of_measure:
    :vartype unit_of_measure: str
    :ivar type_character:
    :vartype type_character: str
    :ivar plus_tolerance:
    :vartype plus_tolerance: float
    :ivar minus_tolerance:
    :vartype minus_tolerance: float
    :ivar upper_limit:
    :vartype upper_limit: float
    :ivar lower_limit:
    :vartype lower_limit: float
    :ivar comments:
    :vartype comments: str
    :ivar updated_by_user:
    :vartype updated_by_user: str
    :ivar updated_date:
    :vartype updated_date: ~datetime.datetime
    :ivar created_by_user:
    :vartype created_by_user: str
    :ivar created_date:
    :vartype created_date: ~datetime.datetime
    :ivar frequency: Known values are: "All", "FirstArticle", "NFirst", "NPercent", "ISO2859",
     "Nth", and "None".
    :vartype frequency: str or ~ignos.api.client.models.MeasurementFrequency
    :ivar frequency_parameter:
    :vartype frequency_parameter: int
    :ivar include_in_customer_documentation:
    :vartype include_in_customer_documentation: bool
    :ivar is_documented_externally:
    :vartype is_documented_externally: bool
    :ivar balloon_sequence:
    :vartype balloon_sequence: int
    :ivar balloon_quantity:
    :vartype balloon_quantity: int
    :ivar plus_tolerance_text:
    :vartype plus_tolerance_text: str
    :ivar minus_tolerance_text:
    :vartype minus_tolerance_text: str
    :ivar coating_thickness:
    :vartype coating_thickness: int
    :ivar can_copy:
    :vartype can_copy: bool
    :ivar value_type: Known values are: "None", "Bool", "Decimal", and "String".
    :vartype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
    :ivar bonus_type: Known values are: "None", "Positive", and "PositiveAndNegative".
    :vartype bonus_type: str or ~ignos.api.client.models.BonusType
    :ivar lower_warning_threshold:
    :vartype lower_warning_threshold: float
    :ivar upper_warning_threshold:
    :vartype upper_warning_threshold: float
    :ivar machining_dimension:
    :vartype machining_dimension: float
    :ivar nominal_inch:
    :vartype nominal_inch: float
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "image_url": {"key": "imageUrl", "type": "str"},
        "thumbnail_url": {"key": "thumbnailUrl", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "page_number": {"key": "pageNumber", "type": "int"},
        "sheet_zone": {"key": "sheetZone", "type": "str"},
        "places": {"key": "places", "type": "int"},
        "nominal": {"key": "nominal", "type": "float"},
        "nominal_text": {"key": "nominalText", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "unit_of_measure": {"key": "unitOfMeasure", "type": "str"},
        "type_character": {"key": "typeCharacter", "type": "str"},
        "plus_tolerance": {"key": "plusTolerance", "type": "float"},
        "minus_tolerance": {"key": "minusTolerance", "type": "float"},
        "upper_limit": {"key": "upperLimit", "type": "float"},
        "lower_limit": {"key": "lowerLimit", "type": "float"},
        "comments": {"key": "comments", "type": "str"},
        "updated_by_user": {"key": "updatedByUser", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "created_by_user": {"key": "createdByUser", "type": "str"},
        "created_date": {"key": "createdDate", "type": "iso-8601"},
        "frequency": {"key": "frequency", "type": "str"},
        "frequency_parameter": {"key": "frequencyParameter", "type": "int"},
        "include_in_customer_documentation": {"key": "includeInCustomerDocumentation", "type": "bool"},
        "is_documented_externally": {"key": "isDocumentedExternally", "type": "bool"},
        "balloon_sequence": {"key": "balloonSequence", "type": "int"},
        "balloon_quantity": {"key": "balloonQuantity", "type": "int"},
        "plus_tolerance_text": {"key": "plusToleranceText", "type": "str"},
        "minus_tolerance_text": {"key": "minusToleranceText", "type": "str"},
        "coating_thickness": {"key": "coatingThickness", "type": "int"},
        "can_copy": {"key": "canCopy", "type": "bool"},
        "value_type": {"key": "valueType", "type": "str"},
        "bonus_type": {"key": "bonusType", "type": "str"},
        "lower_warning_threshold": {"key": "lowerWarningThreshold", "type": "float"},
        "upper_warning_threshold": {"key": "upperWarningThreshold", "type": "float"},
        "machining_dimension": {"key": "machiningDimension", "type": "float"},
        "nominal_inch": {"key": "nominalInch", "type": "float"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        image_url: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        balloon_id: Optional[str] = None,
        section: Optional[str] = None,
        page_number: Optional[int] = None,
        sheet_zone: Optional[str] = None,
        places: Optional[int] = None,
        nominal: Optional[float] = None,
        nominal_text: Optional[str] = None,
        type: Optional[str] = None,
        sub_type: Optional[str] = None,
        unit_of_measure: Optional[str] = None,
        type_character: Optional[str] = None,
        plus_tolerance: Optional[float] = None,
        minus_tolerance: Optional[float] = None,
        upper_limit: Optional[float] = None,
        lower_limit: Optional[float] = None,
        comments: Optional[str] = None,
        updated_by_user: Optional[str] = None,
        updated_date: Optional[datetime.datetime] = None,
        created_by_user: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency: Optional[Union[str, "_models.MeasurementFrequency"]] = None,
        frequency_parameter: Optional[int] = None,
        include_in_customer_documentation: Optional[bool] = None,
        is_documented_externally: Optional[bool] = None,
        balloon_sequence: Optional[int] = None,
        balloon_quantity: Optional[int] = None,
        plus_tolerance_text: Optional[str] = None,
        minus_tolerance_text: Optional[str] = None,
        coating_thickness: Optional[int] = None,
        can_copy: Optional[bool] = None,
        value_type: Optional[Union[str, "_models.MeasurementFormValueType"]] = None,
        bonus_type: Optional[Union[str, "_models.BonusType"]] = None,
        lower_warning_threshold: Optional[float] = None,
        upper_warning_threshold: Optional[float] = None,
        machining_dimension: Optional[float] = None,
        nominal_inch: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword image_url:
        :paramtype image_url: str
        :keyword thumbnail_url:
        :paramtype thumbnail_url: str
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword section:
        :paramtype section: str
        :keyword page_number:
        :paramtype page_number: int
        :keyword sheet_zone:
        :paramtype sheet_zone: str
        :keyword places:
        :paramtype places: int
        :keyword nominal:
        :paramtype nominal: float
        :keyword nominal_text:
        :paramtype nominal_text: str
        :keyword type:
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword unit_of_measure:
        :paramtype unit_of_measure: str
        :keyword type_character:
        :paramtype type_character: str
        :keyword plus_tolerance:
        :paramtype plus_tolerance: float
        :keyword minus_tolerance:
        :paramtype minus_tolerance: float
        :keyword upper_limit:
        :paramtype upper_limit: float
        :keyword lower_limit:
        :paramtype lower_limit: float
        :keyword comments:
        :paramtype comments: str
        :keyword updated_by_user:
        :paramtype updated_by_user: str
        :keyword updated_date:
        :paramtype updated_date: ~datetime.datetime
        :keyword created_by_user:
        :paramtype created_by_user: str
        :keyword created_date:
        :paramtype created_date: ~datetime.datetime
        :keyword frequency: Known values are: "All", "FirstArticle", "NFirst", "NPercent", "ISO2859",
         "Nth", and "None".
        :paramtype frequency: str or ~ignos.api.client.models.MeasurementFrequency
        :keyword frequency_parameter:
        :paramtype frequency_parameter: int
        :keyword include_in_customer_documentation:
        :paramtype include_in_customer_documentation: bool
        :keyword is_documented_externally:
        :paramtype is_documented_externally: bool
        :keyword balloon_sequence:
        :paramtype balloon_sequence: int
        :keyword balloon_quantity:
        :paramtype balloon_quantity: int
        :keyword plus_tolerance_text:
        :paramtype plus_tolerance_text: str
        :keyword minus_tolerance_text:
        :paramtype minus_tolerance_text: str
        :keyword coating_thickness:
        :paramtype coating_thickness: int
        :keyword can_copy:
        :paramtype can_copy: bool
        :keyword value_type: Known values are: "None", "Bool", "Decimal", and "String".
        :paramtype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
        :keyword bonus_type: Known values are: "None", "Positive", and "PositiveAndNegative".
        :paramtype bonus_type: str or ~ignos.api.client.models.BonusType
        :keyword lower_warning_threshold:
        :paramtype lower_warning_threshold: float
        :keyword upper_warning_threshold:
        :paramtype upper_warning_threshold: float
        :keyword machining_dimension:
        :paramtype machining_dimension: float
        :keyword nominal_inch:
        :paramtype nominal_inch: float
        """
        super().__init__(**kwargs)
        self.id = id
        self.image_url = image_url
        self.thumbnail_url = thumbnail_url
        self.balloon_id = balloon_id
        self.section = section
        self.page_number = page_number
        self.sheet_zone = sheet_zone
        self.places = places
        self.nominal = nominal
        self.nominal_text = nominal_text
        self.type = type
        self.sub_type = sub_type
        self.unit_of_measure = unit_of_measure
        self.type_character = type_character
        self.plus_tolerance = plus_tolerance
        self.minus_tolerance = minus_tolerance
        self.upper_limit = upper_limit
        self.lower_limit = lower_limit
        self.comments = comments
        self.updated_by_user = updated_by_user
        self.updated_date = updated_date
        self.created_by_user = created_by_user
        self.created_date = created_date
        self.frequency = frequency
        self.frequency_parameter = frequency_parameter
        self.include_in_customer_documentation = include_in_customer_documentation
        self.is_documented_externally = is_documented_externally
        self.balloon_sequence = balloon_sequence
        self.balloon_quantity = balloon_quantity
        self.plus_tolerance_text = plus_tolerance_text
        self.minus_tolerance_text = minus_tolerance_text
        self.coating_thickness = coating_thickness
        self.can_copy = can_copy
        self.value_type = value_type
        self.bonus_type = bonus_type
        self.lower_warning_threshold = lower_warning_threshold
        self.upper_warning_threshold = upper_warning_threshold
        self.machining_dimension = machining_dimension
        self.nominal_inch = nominal_inch


class MeasurementFormElementImportDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormElementImportDto.

    :ivar id:
    :vartype id: str
    :ivar image_url:
    :vartype image_url: str
    :ivar thumbnail_url:
    :vartype thumbnail_url: str
    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar section:
    :vartype section: str
    :ivar page_number:
    :vartype page_number: int
    :ivar sheet_zone:
    :vartype sheet_zone: str
    :ivar places:
    :vartype places: int
    :ivar nominal:
    :vartype nominal: float
    :ivar nominal_text:
    :vartype nominal_text: str
    :ivar type:
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar unit_of_measure:
    :vartype unit_of_measure: str
    :ivar type_character:
    :vartype type_character: str
    :ivar plus_tolerance:
    :vartype plus_tolerance: float
    :ivar minus_tolerance:
    :vartype minus_tolerance: float
    :ivar upper_limit:
    :vartype upper_limit: float
    :ivar lower_limit:
    :vartype lower_limit: float
    :ivar comments:
    :vartype comments: str
    :ivar updated_by_user:
    :vartype updated_by_user: str
    :ivar updated_date:
    :vartype updated_date: ~datetime.datetime
    :ivar created_by_user:
    :vartype created_by_user: str
    :ivar created_date:
    :vartype created_date: ~datetime.datetime
    :ivar frequency: Known values are: "All", "FirstArticle", "NFirst", "NPercent", "ISO2859",
     "Nth", and "None".
    :vartype frequency: str or ~ignos.api.client.models.MeasurementFrequency
    :ivar frequency_parameter:
    :vartype frequency_parameter: int
    :ivar include_in_customer_documentation:
    :vartype include_in_customer_documentation: bool
    :ivar balloon_sequence:
    :vartype balloon_sequence: int
    :ivar balloon_quantity:
    :vartype balloon_quantity: int
    :ivar plus_tolerance_text:
    :vartype plus_tolerance_text: str
    :ivar minus_tolerance_text:
    :vartype minus_tolerance_text: str
    :ivar coating_thickness:
    :vartype coating_thickness: int
    :ivar can_copy:
    :vartype can_copy: bool
    :ivar value_type: Known values are: "None", "Bool", "Decimal", and "String".
    :vartype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
    :ivar inspection_method:
    :vartype inspection_method: str
    :ivar process:
    :vartype process: str
    :ivar classification:
    :vartype classification: str
    :ivar fit_grade:
    :vartype fit_grade: str
    :ivar fit_type:
    :vartype fit_type: int
    :ivar for_reference:
    :vartype for_reference: bool
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "image_url": {"key": "imageUrl", "type": "str"},
        "thumbnail_url": {"key": "thumbnailUrl", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "page_number": {"key": "pageNumber", "type": "int"},
        "sheet_zone": {"key": "sheetZone", "type": "str"},
        "places": {"key": "places", "type": "int"},
        "nominal": {"key": "nominal", "type": "float"},
        "nominal_text": {"key": "nominalText", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "unit_of_measure": {"key": "unitOfMeasure", "type": "str"},
        "type_character": {"key": "typeCharacter", "type": "str"},
        "plus_tolerance": {"key": "plusTolerance", "type": "float"},
        "minus_tolerance": {"key": "minusTolerance", "type": "float"},
        "upper_limit": {"key": "upperLimit", "type": "float"},
        "lower_limit": {"key": "lowerLimit", "type": "float"},
        "comments": {"key": "comments", "type": "str"},
        "updated_by_user": {"key": "updatedByUser", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "created_by_user": {"key": "createdByUser", "type": "str"},
        "created_date": {"key": "createdDate", "type": "iso-8601"},
        "frequency": {"key": "frequency", "type": "str"},
        "frequency_parameter": {"key": "frequencyParameter", "type": "int"},
        "include_in_customer_documentation": {"key": "includeInCustomerDocumentation", "type": "bool"},
        "balloon_sequence": {"key": "balloonSequence", "type": "int"},
        "balloon_quantity": {"key": "balloonQuantity", "type": "int"},
        "plus_tolerance_text": {"key": "plusToleranceText", "type": "str"},
        "minus_tolerance_text": {"key": "minusToleranceText", "type": "str"},
        "coating_thickness": {"key": "coatingThickness", "type": "int"},
        "can_copy": {"key": "canCopy", "type": "bool"},
        "value_type": {"key": "valueType", "type": "str"},
        "inspection_method": {"key": "inspectionMethod", "type": "str"},
        "process": {"key": "process", "type": "str"},
        "classification": {"key": "classification", "type": "str"},
        "fit_grade": {"key": "fitGrade", "type": "str"},
        "fit_type": {"key": "fitType", "type": "int"},
        "for_reference": {"key": "forReference", "type": "bool"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        image_url: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        balloon_id: Optional[str] = None,
        section: Optional[str] = None,
        page_number: Optional[int] = None,
        sheet_zone: Optional[str] = None,
        places: Optional[int] = None,
        nominal: Optional[float] = None,
        nominal_text: Optional[str] = None,
        type: Optional[str] = None,
        sub_type: Optional[str] = None,
        unit_of_measure: Optional[str] = None,
        type_character: Optional[str] = None,
        plus_tolerance: Optional[float] = None,
        minus_tolerance: Optional[float] = None,
        upper_limit: Optional[float] = None,
        lower_limit: Optional[float] = None,
        comments: Optional[str] = None,
        updated_by_user: Optional[str] = None,
        updated_date: Optional[datetime.datetime] = None,
        created_by_user: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency: Optional[Union[str, "_models.MeasurementFrequency"]] = None,
        frequency_parameter: Optional[int] = None,
        include_in_customer_documentation: Optional[bool] = None,
        balloon_sequence: Optional[int] = None,
        balloon_quantity: Optional[int] = None,
        plus_tolerance_text: Optional[str] = None,
        minus_tolerance_text: Optional[str] = None,
        coating_thickness: Optional[int] = None,
        can_copy: Optional[bool] = None,
        value_type: Optional[Union[str, "_models.MeasurementFormValueType"]] = None,
        inspection_method: Optional[str] = None,
        process: Optional[str] = None,
        classification: Optional[str] = None,
        fit_grade: Optional[str] = None,
        fit_type: Optional[int] = None,
        for_reference: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword image_url:
        :paramtype image_url: str
        :keyword thumbnail_url:
        :paramtype thumbnail_url: str
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword section:
        :paramtype section: str
        :keyword page_number:
        :paramtype page_number: int
        :keyword sheet_zone:
        :paramtype sheet_zone: str
        :keyword places:
        :paramtype places: int
        :keyword nominal:
        :paramtype nominal: float
        :keyword nominal_text:
        :paramtype nominal_text: str
        :keyword type:
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword unit_of_measure:
        :paramtype unit_of_measure: str
        :keyword type_character:
        :paramtype type_character: str
        :keyword plus_tolerance:
        :paramtype plus_tolerance: float
        :keyword minus_tolerance:
        :paramtype minus_tolerance: float
        :keyword upper_limit:
        :paramtype upper_limit: float
        :keyword lower_limit:
        :paramtype lower_limit: float
        :keyword comments:
        :paramtype comments: str
        :keyword updated_by_user:
        :paramtype updated_by_user: str
        :keyword updated_date:
        :paramtype updated_date: ~datetime.datetime
        :keyword created_by_user:
        :paramtype created_by_user: str
        :keyword created_date:
        :paramtype created_date: ~datetime.datetime
        :keyword frequency: Known values are: "All", "FirstArticle", "NFirst", "NPercent", "ISO2859",
         "Nth", and "None".
        :paramtype frequency: str or ~ignos.api.client.models.MeasurementFrequency
        :keyword frequency_parameter:
        :paramtype frequency_parameter: int
        :keyword include_in_customer_documentation:
        :paramtype include_in_customer_documentation: bool
        :keyword balloon_sequence:
        :paramtype balloon_sequence: int
        :keyword balloon_quantity:
        :paramtype balloon_quantity: int
        :keyword plus_tolerance_text:
        :paramtype plus_tolerance_text: str
        :keyword minus_tolerance_text:
        :paramtype minus_tolerance_text: str
        :keyword coating_thickness:
        :paramtype coating_thickness: int
        :keyword can_copy:
        :paramtype can_copy: bool
        :keyword value_type: Known values are: "None", "Bool", "Decimal", and "String".
        :paramtype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
        :keyword inspection_method:
        :paramtype inspection_method: str
        :keyword process:
        :paramtype process: str
        :keyword classification:
        :paramtype classification: str
        :keyword fit_grade:
        :paramtype fit_grade: str
        :keyword fit_type:
        :paramtype fit_type: int
        :keyword for_reference:
        :paramtype for_reference: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.image_url = image_url
        self.thumbnail_url = thumbnail_url
        self.balloon_id = balloon_id
        self.section = section
        self.page_number = page_number
        self.sheet_zone = sheet_zone
        self.places = places
        self.nominal = nominal
        self.nominal_text = nominal_text
        self.type = type
        self.sub_type = sub_type
        self.unit_of_measure = unit_of_measure
        self.type_character = type_character
        self.plus_tolerance = plus_tolerance
        self.minus_tolerance = minus_tolerance
        self.upper_limit = upper_limit
        self.lower_limit = lower_limit
        self.comments = comments
        self.updated_by_user = updated_by_user
        self.updated_date = updated_date
        self.created_by_user = created_by_user
        self.created_date = created_date
        self.frequency = frequency
        self.frequency_parameter = frequency_parameter
        self.include_in_customer_documentation = include_in_customer_documentation
        self.balloon_sequence = balloon_sequence
        self.balloon_quantity = balloon_quantity
        self.plus_tolerance_text = plus_tolerance_text
        self.minus_tolerance_text = minus_tolerance_text
        self.coating_thickness = coating_thickness
        self.can_copy = can_copy
        self.value_type = value_type
        self.inspection_method = inspection_method
        self.process = process
        self.classification = classification
        self.fit_grade = fit_grade
        self.fit_type = fit_type
        self.for_reference = for_reference


class MeasurementFormElementValueAuditDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormElementValueAuditDto.

    All required parameters must be populated in order to send to server.

    :ivar workorder:
    :vartype workorder: str
    :ivar operation:
    :vartype operation: int
    :ivar resource_name:
    :vartype resource_name: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar value:
    :vartype value: str
    :ivar bonus:
    :vartype bonus: float
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar element_id: Required.
    :vartype element_id: str
    :ivar updated_by_user: Required.
    :vartype updated_by_user: str
    :ivar updated_date: Required.
    :vartype updated_date: ~datetime.datetime
    :ivar tools: Required.
    :vartype tools: list[~ignos.api.client.models.MeasurementFormToolValueDto]
    """

    _validation = {
        "schema_id": {"required": True, "min_length": 1},
        "sequence": {"required": True, "min_length": 1},
        "element_id": {"required": True, "min_length": 1},
        "updated_by_user": {"required": True, "min_length": 1},
        "updated_date": {"required": True},
        "tools": {"required": True},
    }

    _attribute_map = {
        "workorder": {"key": "workorder", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "bonus": {"key": "bonus", "type": "float"},
        "sequence": {"key": "sequence", "type": "str"},
        "element_id": {"key": "elementId", "type": "str"},
        "updated_by_user": {"key": "updatedByUser", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "tools": {"key": "tools", "type": "[MeasurementFormToolValueDto]"},
    }

    def __init__(
        self,
        *,
        schema_id: str,
        sequence: str,
        element_id: str,
        updated_by_user: str,
        updated_date: datetime.datetime,
        tools: List["_models.MeasurementFormToolValueDto"],
        workorder: Optional[str] = None,
        operation: Optional[int] = None,
        resource_name: Optional[str] = None,
        value: Optional[str] = None,
        bonus: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workorder:
        :paramtype workorder: str
        :keyword operation:
        :paramtype operation: int
        :keyword resource_name:
        :paramtype resource_name: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword value:
        :paramtype value: str
        :keyword bonus:
        :paramtype bonus: float
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword element_id: Required.
        :paramtype element_id: str
        :keyword updated_by_user: Required.
        :paramtype updated_by_user: str
        :keyword updated_date: Required.
        :paramtype updated_date: ~datetime.datetime
        :keyword tools: Required.
        :paramtype tools: list[~ignos.api.client.models.MeasurementFormToolValueDto]
        """
        super().__init__(**kwargs)
        self.workorder = workorder
        self.operation = operation
        self.resource_name = resource_name
        self.schema_id = schema_id
        self.value = value
        self.bonus = bonus
        self.sequence = sequence
        self.element_id = element_id
        self.updated_by_user = updated_by_user
        self.updated_date = updated_date
        self.tools = tools


class MeasurementFormElementValueDto(_serialization.Model):
    """MeasurementFormElementValueDto.

    All required parameters must be populated in order to send to server.

    :ivar bonus:
    :vartype bonus: str
    :ivar completed: Required.
    :vartype completed: bool
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar value:
    :vartype value: str
    :ivar updated_by_user: Required.
    :vartype updated_by_user: str
    :ivar updated_date: Required.
    :vartype updated_date: ~datetime.datetime
    :ivar tools: Required.
    :vartype tools: list[~ignos.api.client.models.MeasurementFormToolValueDto]
    :ivar comment:
    :vartype comment: str
    :ivar is_outside_tolerances: Required.
    :vartype is_outside_tolerances: bool
    :ivar is_close_to_tolerances: Required.
    :vartype is_close_to_tolerances: bool
    """

    _validation = {
        "completed": {"required": True},
        "sequence": {"required": True, "min_length": 1},
        "updated_by_user": {"required": True, "min_length": 1},
        "updated_date": {"required": True},
        "tools": {"required": True},
        "is_outside_tolerances": {"required": True},
        "is_close_to_tolerances": {"required": True},
    }

    _attribute_map = {
        "bonus": {"key": "bonus", "type": "str"},
        "completed": {"key": "completed", "type": "bool"},
        "sequence": {"key": "sequence", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "updated_by_user": {"key": "updatedByUser", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "tools": {"key": "tools", "type": "[MeasurementFormToolValueDto]"},
        "comment": {"key": "comment", "type": "str"},
        "is_outside_tolerances": {"key": "isOutsideTolerances", "type": "bool"},
        "is_close_to_tolerances": {"key": "isCloseToTolerances", "type": "bool"},
    }

    def __init__(
        self,
        *,
        completed: bool,
        sequence: str,
        updated_by_user: str,
        updated_date: datetime.datetime,
        tools: List["_models.MeasurementFormToolValueDto"],
        is_outside_tolerances: bool,
        is_close_to_tolerances: bool,
        bonus: Optional[str] = None,
        value: Optional[str] = None,
        comment: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword bonus:
        :paramtype bonus: str
        :keyword completed: Required.
        :paramtype completed: bool
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword value:
        :paramtype value: str
        :keyword updated_by_user: Required.
        :paramtype updated_by_user: str
        :keyword updated_date: Required.
        :paramtype updated_date: ~datetime.datetime
        :keyword tools: Required.
        :paramtype tools: list[~ignos.api.client.models.MeasurementFormToolValueDto]
        :keyword comment:
        :paramtype comment: str
        :keyword is_outside_tolerances: Required.
        :paramtype is_outside_tolerances: bool
        :keyword is_close_to_tolerances: Required.
        :paramtype is_close_to_tolerances: bool
        """
        super().__init__(**kwargs)
        self.bonus = bonus
        self.completed = completed
        self.sequence = sequence
        self.value = value
        self.updated_by_user = updated_by_user
        self.updated_date = updated_date
        self.tools = tools
        self.comment = comment
        self.is_outside_tolerances = is_outside_tolerances
        self.is_close_to_tolerances = is_close_to_tolerances


class MeasurementFormGroupedElementDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormGroupedElementDto.

    All required parameters must be populated in order to send to server.

    :ivar image_url:
    :vartype image_url: str
    :ivar thumbnail_url:
    :vartype thumbnail_url: str
    :ivar balloon_id: Required.
    :vartype balloon_id: str
    :ivar section:
    :vartype section: str
    :ivar page_number:
    :vartype page_number: int
    :ivar sheet_zone:
    :vartype sheet_zone: str
    :ivar places:
    :vartype places: int
    :ivar nominal:
    :vartype nominal: float
    :ivar nominal_text:
    :vartype nominal_text: str
    :ivar type:
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar unit_of_measure:
    :vartype unit_of_measure: str
    :ivar type_character:
    :vartype type_character: str
    :ivar plus_tolerance:
    :vartype plus_tolerance: float
    :ivar minus_tolerance:
    :vartype minus_tolerance: float
    :ivar upper_limit:
    :vartype upper_limit: float
    :ivar lower_limit:
    :vartype lower_limit: float
    :ivar comments:
    :vartype comments: str
    :ivar updated_by_user:
    :vartype updated_by_user: str
    :ivar updated_date:
    :vartype updated_date: ~datetime.datetime
    :ivar created_by_user:
    :vartype created_by_user: str
    :ivar created_date:
    :vartype created_date: ~datetime.datetime
    :ivar frequency: Required. Known values are: "All", "FirstArticle", "NFirst", "NPercent",
     "ISO2859", "Nth", and "None".
    :vartype frequency: str or ~ignos.api.client.models.MeasurementFrequency
    :ivar frequency_parameter:
    :vartype frequency_parameter: int
    :ivar include_in_customer_documentation: Required.
    :vartype include_in_customer_documentation: bool
    :ivar is_documented_externally: Required.
    :vartype is_documented_externally: bool
    :ivar balloon_quantity:
    :vartype balloon_quantity: int
    :ivar plus_tolerance_text:
    :vartype plus_tolerance_text: str
    :ivar minus_tolerance_text:
    :vartype minus_tolerance_text: str
    :ivar coating_thickness:
    :vartype coating_thickness: int
    :ivar can_copy: Required.
    :vartype can_copy: bool
    :ivar value_type: Known values are: "None", "Bool", "Decimal", and "String".
    :vartype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
    :ivar bonus_type: Known values are: "None", "Positive", and "PositiveAndNegative".
    :vartype bonus_type: str or ~ignos.api.client.models.BonusType
    :ivar lower_warning_threshold:
    :vartype lower_warning_threshold: float
    :ivar upper_warning_threshold:
    :vartype upper_warning_threshold: float
    :ivar machining_dimension:
    :vartype machining_dimension: float
    :ivar nominal_inch:
    :vartype nominal_inch: float
    :ivar is_valid: Required.
    :vartype is_valid: bool
    """

    _validation = {
        "balloon_id": {"required": True, "min_length": 1},
        "frequency": {"required": True},
        "include_in_customer_documentation": {"required": True},
        "is_documented_externally": {"required": True},
        "can_copy": {"required": True},
        "is_valid": {"required": True},
    }

    _attribute_map = {
        "image_url": {"key": "imageUrl", "type": "str"},
        "thumbnail_url": {"key": "thumbnailUrl", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "page_number": {"key": "pageNumber", "type": "int"},
        "sheet_zone": {"key": "sheetZone", "type": "str"},
        "places": {"key": "places", "type": "int"},
        "nominal": {"key": "nominal", "type": "float"},
        "nominal_text": {"key": "nominalText", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "unit_of_measure": {"key": "unitOfMeasure", "type": "str"},
        "type_character": {"key": "typeCharacter", "type": "str"},
        "plus_tolerance": {"key": "plusTolerance", "type": "float"},
        "minus_tolerance": {"key": "minusTolerance", "type": "float"},
        "upper_limit": {"key": "upperLimit", "type": "float"},
        "lower_limit": {"key": "lowerLimit", "type": "float"},
        "comments": {"key": "comments", "type": "str"},
        "updated_by_user": {"key": "updatedByUser", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "created_by_user": {"key": "createdByUser", "type": "str"},
        "created_date": {"key": "createdDate", "type": "iso-8601"},
        "frequency": {"key": "frequency", "type": "str"},
        "frequency_parameter": {"key": "frequencyParameter", "type": "int"},
        "include_in_customer_documentation": {"key": "includeInCustomerDocumentation", "type": "bool"},
        "is_documented_externally": {"key": "isDocumentedExternally", "type": "bool"},
        "balloon_quantity": {"key": "balloonQuantity", "type": "int"},
        "plus_tolerance_text": {"key": "plusToleranceText", "type": "str"},
        "minus_tolerance_text": {"key": "minusToleranceText", "type": "str"},
        "coating_thickness": {"key": "coatingThickness", "type": "int"},
        "can_copy": {"key": "canCopy", "type": "bool"},
        "value_type": {"key": "valueType", "type": "str"},
        "bonus_type": {"key": "bonusType", "type": "str"},
        "lower_warning_threshold": {"key": "lowerWarningThreshold", "type": "float"},
        "upper_warning_threshold": {"key": "upperWarningThreshold", "type": "float"},
        "machining_dimension": {"key": "machiningDimension", "type": "float"},
        "nominal_inch": {"key": "nominalInch", "type": "float"},
        "is_valid": {"key": "isValid", "type": "bool"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        balloon_id: str,
        frequency: Union[str, "_models.MeasurementFrequency"],
        include_in_customer_documentation: bool,
        is_documented_externally: bool,
        can_copy: bool,
        is_valid: bool,
        image_url: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        section: Optional[str] = None,
        page_number: Optional[int] = None,
        sheet_zone: Optional[str] = None,
        places: Optional[int] = None,
        nominal: Optional[float] = None,
        nominal_text: Optional[str] = None,
        type: Optional[str] = None,
        sub_type: Optional[str] = None,
        unit_of_measure: Optional[str] = None,
        type_character: Optional[str] = None,
        plus_tolerance: Optional[float] = None,
        minus_tolerance: Optional[float] = None,
        upper_limit: Optional[float] = None,
        lower_limit: Optional[float] = None,
        comments: Optional[str] = None,
        updated_by_user: Optional[str] = None,
        updated_date: Optional[datetime.datetime] = None,
        created_by_user: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency_parameter: Optional[int] = None,
        balloon_quantity: Optional[int] = None,
        plus_tolerance_text: Optional[str] = None,
        minus_tolerance_text: Optional[str] = None,
        coating_thickness: Optional[int] = None,
        value_type: Optional[Union[str, "_models.MeasurementFormValueType"]] = None,
        bonus_type: Optional[Union[str, "_models.BonusType"]] = None,
        lower_warning_threshold: Optional[float] = None,
        upper_warning_threshold: Optional[float] = None,
        machining_dimension: Optional[float] = None,
        nominal_inch: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword image_url:
        :paramtype image_url: str
        :keyword thumbnail_url:
        :paramtype thumbnail_url: str
        :keyword balloon_id: Required.
        :paramtype balloon_id: str
        :keyword section:
        :paramtype section: str
        :keyword page_number:
        :paramtype page_number: int
        :keyword sheet_zone:
        :paramtype sheet_zone: str
        :keyword places:
        :paramtype places: int
        :keyword nominal:
        :paramtype nominal: float
        :keyword nominal_text:
        :paramtype nominal_text: str
        :keyword type:
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword unit_of_measure:
        :paramtype unit_of_measure: str
        :keyword type_character:
        :paramtype type_character: str
        :keyword plus_tolerance:
        :paramtype plus_tolerance: float
        :keyword minus_tolerance:
        :paramtype minus_tolerance: float
        :keyword upper_limit:
        :paramtype upper_limit: float
        :keyword lower_limit:
        :paramtype lower_limit: float
        :keyword comments:
        :paramtype comments: str
        :keyword updated_by_user:
        :paramtype updated_by_user: str
        :keyword updated_date:
        :paramtype updated_date: ~datetime.datetime
        :keyword created_by_user:
        :paramtype created_by_user: str
        :keyword created_date:
        :paramtype created_date: ~datetime.datetime
        :keyword frequency: Required. Known values are: "All", "FirstArticle", "NFirst", "NPercent",
         "ISO2859", "Nth", and "None".
        :paramtype frequency: str or ~ignos.api.client.models.MeasurementFrequency
        :keyword frequency_parameter:
        :paramtype frequency_parameter: int
        :keyword include_in_customer_documentation: Required.
        :paramtype include_in_customer_documentation: bool
        :keyword is_documented_externally: Required.
        :paramtype is_documented_externally: bool
        :keyword balloon_quantity:
        :paramtype balloon_quantity: int
        :keyword plus_tolerance_text:
        :paramtype plus_tolerance_text: str
        :keyword minus_tolerance_text:
        :paramtype minus_tolerance_text: str
        :keyword coating_thickness:
        :paramtype coating_thickness: int
        :keyword can_copy: Required.
        :paramtype can_copy: bool
        :keyword value_type: Known values are: "None", "Bool", "Decimal", and "String".
        :paramtype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
        :keyword bonus_type: Known values are: "None", "Positive", and "PositiveAndNegative".
        :paramtype bonus_type: str or ~ignos.api.client.models.BonusType
        :keyword lower_warning_threshold:
        :paramtype lower_warning_threshold: float
        :keyword upper_warning_threshold:
        :paramtype upper_warning_threshold: float
        :keyword machining_dimension:
        :paramtype machining_dimension: float
        :keyword nominal_inch:
        :paramtype nominal_inch: float
        :keyword is_valid: Required.
        :paramtype is_valid: bool
        """
        super().__init__(**kwargs)
        self.image_url = image_url
        self.thumbnail_url = thumbnail_url
        self.balloon_id = balloon_id
        self.section = section
        self.page_number = page_number
        self.sheet_zone = sheet_zone
        self.places = places
        self.nominal = nominal
        self.nominal_text = nominal_text
        self.type = type
        self.sub_type = sub_type
        self.unit_of_measure = unit_of_measure
        self.type_character = type_character
        self.plus_tolerance = plus_tolerance
        self.minus_tolerance = minus_tolerance
        self.upper_limit = upper_limit
        self.lower_limit = lower_limit
        self.comments = comments
        self.updated_by_user = updated_by_user
        self.updated_date = updated_date
        self.created_by_user = created_by_user
        self.created_date = created_date
        self.frequency = frequency
        self.frequency_parameter = frequency_parameter
        self.include_in_customer_documentation = include_in_customer_documentation
        self.is_documented_externally = is_documented_externally
        self.balloon_quantity = balloon_quantity
        self.plus_tolerance_text = plus_tolerance_text
        self.minus_tolerance_text = minus_tolerance_text
        self.coating_thickness = coating_thickness
        self.can_copy = can_copy
        self.value_type = value_type
        self.bonus_type = bonus_type
        self.lower_warning_threshold = lower_warning_threshold
        self.upper_warning_threshold = upper_warning_threshold
        self.machining_dimension = machining_dimension
        self.nominal_inch = nominal_inch
        self.is_valid = is_valid


class MeasurementFormImportLinkedSchemaDto(_serialization.Model):
    """MeasurementFormImportLinkedSchemaDto.

    All required parameters must be populated in order to send to server.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing: Required.
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar schema_id:
    :vartype schema_id: str
    """

    _validation = {
        "drawing": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
    }

    def __init__(
        self,
        *,
        drawing: str,
        customer_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        schema_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing: Required.
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword schema_id:
        :paramtype schema_id: str
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.schema_id = schema_id


class MeasurementFormImportStatusDto(_serialization.Model):
    """MeasurementFormImportStatusDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar progress: Required.
    :vartype progress: int
    :ivar total_elements: Required.
    :vartype total_elements: int
    :ivar error_message: Required.
    :vartype error_message: str
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    """

    _validation = {
        "progress": {"required": True, "readonly": True},
        "total_elements": {"required": True, "readonly": True},
        "error_message": {"required": True, "readonly": True, "min_length": 1},
        "timestamp": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "progress": {"key": "progress", "type": "int"},
        "total_elements": {"key": "totalElements", "type": "int"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.progress = None
        self.total_elements = None
        self.error_message = None
        self.timestamp = None


class MeasurementFormInstanceDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormInstanceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar readonly: Required.
    :vartype readonly: bool
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar quantity: Required.
    :vartype quantity: int
    :ivar status: Required. Known values are: "Active", "Cancelled", "Completed", and "Approved".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
    :ivar status_changed_date:
    :vartype status_changed_date: ~datetime.datetime
    :ivar schemas: Required.
    :vartype schemas: list[~ignos.api.client.models.MeasurementFormWorkorderSchemaDto]
    :ivar sequences: Required.
    :vartype sequences: list[~ignos.api.client.models.MeasurementFormWorkorderSequenceDto]
    :ivar suppliers: Required.
    :vartype suppliers: list[~ignos.api.client.models.MeasurementFormWorkorderSupplierDto]
    :ivar progress: Required.
    :vartype progress: ~ignos.api.client.models.MeasurementFormProgressDto
    :ivar approved_report_url:
    :vartype approved_report_url: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "readonly": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
        "schemas": {"required": True},
        "sequences": {"required": True},
        "suppliers": {"required": True},
        "progress": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "readonly": {"key": "readonly", "type": "bool"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "quantity": {"key": "quantity", "type": "int"},
        "status": {"key": "status", "type": "str"},
        "status_changed_date": {"key": "statusChangedDate", "type": "iso-8601"},
        "schemas": {"key": "schemas", "type": "[MeasurementFormWorkorderSchemaDto]"},
        "sequences": {"key": "sequences", "type": "[MeasurementFormWorkorderSequenceDto]"},
        "suppliers": {"key": "suppliers", "type": "[MeasurementFormWorkorderSupplierDto]"},
        "progress": {"key": "progress", "type": "MeasurementFormProgressDto"},
        "approved_report_url": {"key": "approvedReportUrl", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        readonly: bool,
        quantity: int,
        status: Union[str, "_models.MeasurementFormInstanceStatus"],
        schemas: List["_models.MeasurementFormWorkorderSchemaDto"],
        sequences: List["_models.MeasurementFormWorkorderSequenceDto"],
        suppliers: List["_models.MeasurementFormWorkorderSupplierDto"],
        progress: "_models.MeasurementFormProgressDto",
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        status_changed_date: Optional[datetime.datetime] = None,
        approved_report_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword readonly: Required.
        :paramtype readonly: bool
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword quantity: Required.
        :paramtype quantity: int
        :keyword status: Required. Known values are: "Active", "Cancelled", "Completed", and
         "Approved".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
        :keyword status_changed_date:
        :paramtype status_changed_date: ~datetime.datetime
        :keyword schemas: Required.
        :paramtype schemas: list[~ignos.api.client.models.MeasurementFormWorkorderSchemaDto]
        :keyword sequences: Required.
        :paramtype sequences: list[~ignos.api.client.models.MeasurementFormWorkorderSequenceDto]
        :keyword suppliers: Required.
        :paramtype suppliers: list[~ignos.api.client.models.MeasurementFormWorkorderSupplierDto]
        :keyword progress: Required.
        :paramtype progress: ~ignos.api.client.models.MeasurementFormProgressDto
        :keyword approved_report_url:
        :paramtype approved_report_url: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.readonly = readonly
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.quantity = quantity
        self.status = status
        self.status_changed_date = status_changed_date
        self.schemas = schemas
        self.sequences = sequences
        self.suppliers = suppliers
        self.progress = progress
        self.approved_report_url = approved_report_url


class MeasurementFormInstanceDtoPagedResult(_serialization.Model):
    """MeasurementFormInstanceDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MeasurementFormInstanceDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MeasurementFormInstanceDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.MeasurementFormInstanceDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MeasurementFormInstanceDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MeasurementFormInstanceElementDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormInstanceElementDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar image_url:
    :vartype image_url: str
    :ivar thumbnail_url:
    :vartype thumbnail_url: str
    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar section:
    :vartype section: str
    :ivar page_number:
    :vartype page_number: int
    :ivar sheet_zone:
    :vartype sheet_zone: str
    :ivar completed: Required.
    :vartype completed: bool
    :ivar places:
    :vartype places: int
    :ivar nominal:
    :vartype nominal: str
    :ivar type:
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar unit_of_measure:
    :vartype unit_of_measure: str
    :ivar type_character:
    :vartype type_character: str
    :ivar upper_limit:
    :vartype upper_limit: float
    :ivar lower_limit:
    :vartype lower_limit: float
    :ivar comments:
    :vartype comments: str
    :ivar updated_by_user:
    :vartype updated_by_user: str
    :ivar updated_date:
    :vartype updated_date: ~datetime.datetime
    :ivar created_by_user:
    :vartype created_by_user: str
    :ivar created_date:
    :vartype created_date: ~datetime.datetime
    :ivar frequency: Required. Known values are: "All", "FirstArticle", "NFirst", "NPercent",
     "ISO2859", "Nth", and "None".
    :vartype frequency: str or ~ignos.api.client.models.MeasurementFrequency
    :ivar frequency_parameter:
    :vartype frequency_parameter: int
    :ivar include_in_customer_documentation: Required.
    :vartype include_in_customer_documentation: bool
    :ivar is_documented_externally: Required.
    :vartype is_documented_externally: bool
    :ivar balloon_sequence:
    :vartype balloon_sequence: int
    :ivar balloon_quantity:
    :vartype balloon_quantity: int
    :ivar plus_tolerance:
    :vartype plus_tolerance: str
    :ivar minus_tolerance:
    :vartype minus_tolerance: str
    :ivar coating_thickness:
    :vartype coating_thickness: int
    :ivar can_copy: Required.
    :vartype can_copy: bool
    :ivar value_type: Required. Known values are: "None", "Bool", "Decimal", and "String".
    :vartype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
    :ivar bonus_type: Required. Known values are: "None", "Positive", and "PositiveAndNegative".
    :vartype bonus_type: str or ~ignos.api.client.models.BonusType
    :ivar lower_warning_threshold:
    :vartype lower_warning_threshold: float
    :ivar upper_warning_threshold:
    :vartype upper_warning_threshold: float
    :ivar minimum_decimals:
    :vartype minimum_decimals: int
    :ivar maximum_decimals: Required.
    :vartype maximum_decimals: int
    :ivar machining_dimensions:
    :vartype machining_dimensions: float
    :ivar values: Required.
    :vartype values: list[~ignos.api.client.models.MeasurementFormElementValueDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "completed": {"required": True},
        "frequency": {"required": True},
        "include_in_customer_documentation": {"required": True},
        "is_documented_externally": {"required": True},
        "can_copy": {"required": True},
        "value_type": {"required": True},
        "bonus_type": {"required": True},
        "maximum_decimals": {"required": True},
        "values": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "image_url": {"key": "imageUrl", "type": "str"},
        "thumbnail_url": {"key": "thumbnailUrl", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "page_number": {"key": "pageNumber", "type": "int"},
        "sheet_zone": {"key": "sheetZone", "type": "str"},
        "completed": {"key": "completed", "type": "bool"},
        "places": {"key": "places", "type": "int"},
        "nominal": {"key": "nominal", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "unit_of_measure": {"key": "unitOfMeasure", "type": "str"},
        "type_character": {"key": "typeCharacter", "type": "str"},
        "upper_limit": {"key": "upperLimit", "type": "float"},
        "lower_limit": {"key": "lowerLimit", "type": "float"},
        "comments": {"key": "comments", "type": "str"},
        "updated_by_user": {"key": "updatedByUser", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "created_by_user": {"key": "createdByUser", "type": "str"},
        "created_date": {"key": "createdDate", "type": "iso-8601"},
        "frequency": {"key": "frequency", "type": "str"},
        "frequency_parameter": {"key": "frequencyParameter", "type": "int"},
        "include_in_customer_documentation": {"key": "includeInCustomerDocumentation", "type": "bool"},
        "is_documented_externally": {"key": "isDocumentedExternally", "type": "bool"},
        "balloon_sequence": {"key": "balloonSequence", "type": "int"},
        "balloon_quantity": {"key": "balloonQuantity", "type": "int"},
        "plus_tolerance": {"key": "plusTolerance", "type": "str"},
        "minus_tolerance": {"key": "minusTolerance", "type": "str"},
        "coating_thickness": {"key": "coatingThickness", "type": "int"},
        "can_copy": {"key": "canCopy", "type": "bool"},
        "value_type": {"key": "valueType", "type": "str"},
        "bonus_type": {"key": "bonusType", "type": "str"},
        "lower_warning_threshold": {"key": "lowerWarningThreshold", "type": "float"},
        "upper_warning_threshold": {"key": "upperWarningThreshold", "type": "float"},
        "minimum_decimals": {"key": "minimumDecimals", "type": "int"},
        "maximum_decimals": {"key": "maximumDecimals", "type": "int"},
        "machining_dimensions": {"key": "machiningDimensions", "type": "float"},
        "values": {"key": "values", "type": "[MeasurementFormElementValueDto]"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        completed: bool,
        frequency: Union[str, "_models.MeasurementFrequency"],
        include_in_customer_documentation: bool,
        is_documented_externally: bool,
        can_copy: bool,
        value_type: Union[str, "_models.MeasurementFormValueType"],
        bonus_type: Union[str, "_models.BonusType"],
        maximum_decimals: int,
        values: List["_models.MeasurementFormElementValueDto"],
        image_url: Optional[str] = None,
        thumbnail_url: Optional[str] = None,
        balloon_id: Optional[str] = None,
        section: Optional[str] = None,
        page_number: Optional[int] = None,
        sheet_zone: Optional[str] = None,
        places: Optional[int] = None,
        nominal: Optional[str] = None,
        type: Optional[str] = None,
        sub_type: Optional[str] = None,
        unit_of_measure: Optional[str] = None,
        type_character: Optional[str] = None,
        upper_limit: Optional[float] = None,
        lower_limit: Optional[float] = None,
        comments: Optional[str] = None,
        updated_by_user: Optional[str] = None,
        updated_date: Optional[datetime.datetime] = None,
        created_by_user: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency_parameter: Optional[int] = None,
        balloon_sequence: Optional[int] = None,
        balloon_quantity: Optional[int] = None,
        plus_tolerance: Optional[str] = None,
        minus_tolerance: Optional[str] = None,
        coating_thickness: Optional[int] = None,
        lower_warning_threshold: Optional[float] = None,
        upper_warning_threshold: Optional[float] = None,
        minimum_decimals: Optional[int] = None,
        machining_dimensions: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword image_url:
        :paramtype image_url: str
        :keyword thumbnail_url:
        :paramtype thumbnail_url: str
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword section:
        :paramtype section: str
        :keyword page_number:
        :paramtype page_number: int
        :keyword sheet_zone:
        :paramtype sheet_zone: str
        :keyword completed: Required.
        :paramtype completed: bool
        :keyword places:
        :paramtype places: int
        :keyword nominal:
        :paramtype nominal: str
        :keyword type:
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword unit_of_measure:
        :paramtype unit_of_measure: str
        :keyword type_character:
        :paramtype type_character: str
        :keyword upper_limit:
        :paramtype upper_limit: float
        :keyword lower_limit:
        :paramtype lower_limit: float
        :keyword comments:
        :paramtype comments: str
        :keyword updated_by_user:
        :paramtype updated_by_user: str
        :keyword updated_date:
        :paramtype updated_date: ~datetime.datetime
        :keyword created_by_user:
        :paramtype created_by_user: str
        :keyword created_date:
        :paramtype created_date: ~datetime.datetime
        :keyword frequency: Required. Known values are: "All", "FirstArticle", "NFirst", "NPercent",
         "ISO2859", "Nth", and "None".
        :paramtype frequency: str or ~ignos.api.client.models.MeasurementFrequency
        :keyword frequency_parameter:
        :paramtype frequency_parameter: int
        :keyword include_in_customer_documentation: Required.
        :paramtype include_in_customer_documentation: bool
        :keyword is_documented_externally: Required.
        :paramtype is_documented_externally: bool
        :keyword balloon_sequence:
        :paramtype balloon_sequence: int
        :keyword balloon_quantity:
        :paramtype balloon_quantity: int
        :keyword plus_tolerance:
        :paramtype plus_tolerance: str
        :keyword minus_tolerance:
        :paramtype minus_tolerance: str
        :keyword coating_thickness:
        :paramtype coating_thickness: int
        :keyword can_copy: Required.
        :paramtype can_copy: bool
        :keyword value_type: Required. Known values are: "None", "Bool", "Decimal", and "String".
        :paramtype value_type: str or ~ignos.api.client.models.MeasurementFormValueType
        :keyword bonus_type: Required. Known values are: "None", "Positive", and "PositiveAndNegative".
        :paramtype bonus_type: str or ~ignos.api.client.models.BonusType
        :keyword lower_warning_threshold:
        :paramtype lower_warning_threshold: float
        :keyword upper_warning_threshold:
        :paramtype upper_warning_threshold: float
        :keyword minimum_decimals:
        :paramtype minimum_decimals: int
        :keyword maximum_decimals: Required.
        :paramtype maximum_decimals: int
        :keyword machining_dimensions:
        :paramtype machining_dimensions: float
        :keyword values: Required.
        :paramtype values: list[~ignos.api.client.models.MeasurementFormElementValueDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.image_url = image_url
        self.thumbnail_url = thumbnail_url
        self.balloon_id = balloon_id
        self.section = section
        self.page_number = page_number
        self.sheet_zone = sheet_zone
        self.completed = completed
        self.places = places
        self.nominal = nominal
        self.type = type
        self.sub_type = sub_type
        self.unit_of_measure = unit_of_measure
        self.type_character = type_character
        self.upper_limit = upper_limit
        self.lower_limit = lower_limit
        self.comments = comments
        self.updated_by_user = updated_by_user
        self.updated_date = updated_date
        self.created_by_user = created_by_user
        self.created_date = created_date
        self.frequency = frequency
        self.frequency_parameter = frequency_parameter
        self.include_in_customer_documentation = include_in_customer_documentation
        self.is_documented_externally = is_documented_externally
        self.balloon_sequence = balloon_sequence
        self.balloon_quantity = balloon_quantity
        self.plus_tolerance = plus_tolerance
        self.minus_tolerance = minus_tolerance
        self.coating_thickness = coating_thickness
        self.can_copy = can_copy
        self.value_type = value_type
        self.bonus_type = bonus_type
        self.lower_warning_threshold = lower_warning_threshold
        self.upper_warning_threshold = upper_warning_threshold
        self.minimum_decimals = minimum_decimals
        self.maximum_decimals = maximum_decimals
        self.machining_dimensions = machining_dimensions
        self.values = values


class MeasurementFormInstanceFeedbackDto(_serialization.Model):
    """MeasurementFormInstanceFeedbackDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar work_order: Required.
    :vartype work_order: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar version_id:
    :vartype version_id: int
    :ivar schema_instance_id: Required.
    :vartype schema_instance_id: str
    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar feedback: Required.
    :vartype feedback: str
    :ivar from_property: Required.
    :vartype from_property: str
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    """

    _validation = {
        "id": {"required": True, "readonly": True, "min_length": 1},
        "work_order": {"required": True, "readonly": True, "min_length": 1},
        "schema_id": {"required": True, "readonly": True, "min_length": 1},
        "version_id": {"readonly": True},
        "schema_instance_id": {"required": True, "readonly": True, "min_length": 1},
        "balloon_id": {"readonly": True},
        "feedback": {"required": True, "min_length": 1},
        "from_property": {"required": True, "readonly": True, "min_length": 1},
        "created": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "work_order": {"key": "workOrder", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "version_id": {"key": "versionId", "type": "int"},
        "schema_instance_id": {"key": "schemaInstanceId", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "feedback": {"key": "feedback", "type": "str"},
        "from_property": {"key": "from", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
    }

    def __init__(self, *, feedback: str, **kwargs: Any) -> None:
        """
        :keyword feedback: Required.
        :paramtype feedback: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.work_order = None
        self.schema_id = None
        self.version_id = None
        self.schema_instance_id = None
        self.balloon_id = None
        self.feedback = feedback
        self.from_property = None
        self.created = None


class MeasurementFormInstanceOverviewDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormInstanceOverviewDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar readonly: Required.
    :vartype readonly: bool
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar drawing_url:
    :vartype drawing_url: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar quantity: Required.
    :vartype quantity: int
    :ivar status: Required. Known values are: "Active", "Cancelled", "Completed", and "Approved".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
    :ivar schemas: Required.
    :vartype schemas: list[~ignos.api.client.models.MeasurementFormInstanceSchemaOverviewDto]
    :ivar supplier_data:
    :vartype supplier_data: ~ignos.api.client.models.MeasurementFormInstanceSupplierDto
    :ivar progress: Required.
    :vartype progress: ~ignos.api.client.models.MeasurementFormProgressDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "readonly": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
        "schemas": {"required": True},
        "progress": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "readonly": {"key": "readonly", "type": "bool"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "drawing_url": {"key": "drawingUrl", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "quantity": {"key": "quantity", "type": "int"},
        "status": {"key": "status", "type": "str"},
        "schemas": {"key": "schemas", "type": "[MeasurementFormInstanceSchemaOverviewDto]"},
        "supplier_data": {"key": "supplierData", "type": "MeasurementFormInstanceSupplierDto"},
        "progress": {"key": "progress", "type": "MeasurementFormProgressDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        readonly: bool,
        quantity: int,
        status: Union[str, "_models.MeasurementFormInstanceStatus"],
        schemas: List["_models.MeasurementFormInstanceSchemaOverviewDto"],
        progress: "_models.MeasurementFormProgressDto",
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        drawing_url: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        supplier_data: Optional["_models.MeasurementFormInstanceSupplierDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword readonly: Required.
        :paramtype readonly: bool
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword drawing_url:
        :paramtype drawing_url: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword quantity: Required.
        :paramtype quantity: int
        :keyword status: Required. Known values are: "Active", "Cancelled", "Completed", and
         "Approved".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
        :keyword schemas: Required.
        :paramtype schemas: list[~ignos.api.client.models.MeasurementFormInstanceSchemaOverviewDto]
        :keyword supplier_data:
        :paramtype supplier_data: ~ignos.api.client.models.MeasurementFormInstanceSupplierDto
        :keyword progress: Required.
        :paramtype progress: ~ignos.api.client.models.MeasurementFormProgressDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.readonly = readonly
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.drawing_url = drawing_url
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.quantity = quantity
        self.status = status
        self.schemas = schemas
        self.supplier_data = supplier_data
        self.progress = progress


class MeasurementFormInstanceOverviewDtoPagedResult(_serialization.Model):  # pylint: disable=name-too-long
    """MeasurementFormInstanceOverviewDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MeasurementFormInstanceOverviewDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MeasurementFormInstanceOverviewDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.MeasurementFormInstanceOverviewDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MeasurementFormInstanceOverviewDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MeasurementFormInstanceProgressDto(_serialization.Model):
    """MeasurementFormInstanceProgressDto.

    :ivar progress:
    :vartype progress: ~ignos.api.client.models.MeasurementFormProgressDto
    :ivar schemas:
    :vartype schemas: list[~ignos.api.client.models.MeasurementFormProgressDto]
    """

    _attribute_map = {
        "progress": {"key": "progress", "type": "MeasurementFormProgressDto"},
        "schemas": {"key": "schemas", "type": "[MeasurementFormProgressDto]"},
    }

    def __init__(
        self,
        *,
        progress: Optional["_models.MeasurementFormProgressDto"] = None,
        schemas: Optional[List["_models.MeasurementFormProgressDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword progress:
        :paramtype progress: ~ignos.api.client.models.MeasurementFormProgressDto
        :keyword schemas:
        :paramtype schemas: list[~ignos.api.client.models.MeasurementFormProgressDto]
        """
        super().__init__(**kwargs)
        self.progress = progress
        self.schemas = schemas


class MeasurementFormInstanceSchemaDto(_serialization.Model):
    """MeasurementFormInstanceSchemaDto.

    All required parameters must be populated in order to send to server.

    :ivar elements: Required.
    :vartype elements: list[~ignos.api.client.models.MeasurementFormInstanceElementDto]
    :ivar is_completed: Required.
    :vartype is_completed: bool
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "elements": {"required": True},
        "is_completed": {"required": True},
    }

    _attribute_map = {
        "elements": {"key": "elements", "type": "[MeasurementFormInstanceElementDto]"},
        "is_completed": {"key": "isCompleted", "type": "bool"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(
        self,
        *,
        elements: List["_models.MeasurementFormInstanceElementDto"],
        is_completed: bool,
        comment: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword elements: Required.
        :paramtype elements: list[~ignos.api.client.models.MeasurementFormInstanceElementDto]
        :keyword is_completed: Required.
        :paramtype is_completed: bool
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.elements = elements
        self.is_completed = is_completed
        self.comment = comment


class MeasurementFormInstanceSchemaOverviewDto(_serialization.Model):
    """MeasurementFormInstanceSchemaOverviewDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class MeasurementFormInstanceSupplierDto(_serialization.Model):
    """MeasurementFormInstanceSupplierDto.

    All required parameters must be populated in order to send to server.

    :ivar supplier_id: Required.
    :vartype supplier_id: str
    :ivar supplier_name:
    :vartype supplier_name: str
    :ivar available:
    :vartype available: bool
    :ivar procurement_order:
    :vartype procurement_order: str
    :ivar procurement_line:
    :vartype procurement_line: int
    :ivar external_order_number:
    :vartype external_order_number: str
    """

    _validation = {
        "supplier_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "supplier_id": {"key": "supplierId", "type": "str"},
        "supplier_name": {"key": "supplierName", "type": "str"},
        "available": {"key": "available", "type": "bool"},
        "procurement_order": {"key": "procurementOrder", "type": "str"},
        "procurement_line": {"key": "procurementLine", "type": "int"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        supplier_id: str,
        supplier_name: Optional[str] = None,
        available: Optional[bool] = None,
        procurement_order: Optional[str] = None,
        procurement_line: Optional[int] = None,
        external_order_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword supplier_id: Required.
        :paramtype supplier_id: str
        :keyword supplier_name:
        :paramtype supplier_name: str
        :keyword available:
        :paramtype available: bool
        :keyword procurement_order:
        :paramtype procurement_order: str
        :keyword procurement_line:
        :paramtype procurement_line: int
        :keyword external_order_number:
        :paramtype external_order_number: str
        """
        super().__init__(**kwargs)
        self.supplier_id = supplier_id
        self.supplier_name = supplier_name
        self.available = available
        self.procurement_order = procurement_order
        self.procurement_line = procurement_line
        self.external_order_number = external_order_number


class MeasurementFormLinkedSchemaDto(_serialization.Model):
    """MeasurementFormLinkedSchemaDto.

    All required parameters must be populated in order to send to server.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing: Required.
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar latest_released_schema_id: Required.
    :vartype latest_released_schema_id: str
    """

    _validation = {
        "drawing": {"required": True, "min_length": 1},
        "schema_id": {"required": True, "min_length": 1},
        "latest_released_schema_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "latest_released_schema_id": {"key": "latestReleasedSchemaId", "type": "str"},
    }

    def __init__(
        self,
        *,
        drawing: str,
        schema_id: str,
        latest_released_schema_id: str,
        customer_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing: Required.
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword latest_released_schema_id: Required.
        :paramtype latest_released_schema_id: str
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.schema_id = schema_id
        self.latest_released_schema_id = latest_released_schema_id


class MeasurementFormListDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormListDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar version_id: Required.
    :vartype version_id: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing: Required.
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar status: Required. Known values are: "Draft", "Released", and "Revoked".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormStatus
    :ivar source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and "Manual".
    :vartype source: str or ~ignos.api.client.models.MeasurementFormSource
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "schema_id": {"required": True, "min_length": 1},
        "version_id": {"required": True},
        "drawing": {"required": True, "min_length": 1},
        "created_by": {"required": True, "min_length": 1},
        "created": {"required": True},
        "status": {"required": True},
        "source": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "version_id": {"key": "versionId", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "source": {"key": "source", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        schema_id: str,
        version_id: int,
        drawing: str,
        created_by: str,
        created: datetime.datetime,
        status: Union[str, "_models.MeasurementFormStatus"],
        source: Union[str, "_models.MeasurementFormSource"],
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword version_id: Required.
        :paramtype version_id: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing: Required.
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword status: Required. Known values are: "Draft", "Released", and "Revoked".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormStatus
        :keyword source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and
         "Manual".
        :paramtype source: str or ~ignos.api.client.models.MeasurementFormSource
        """
        super().__init__(**kwargs)
        self.id = id
        self.schema_id = schema_id
        self.version_id = version_id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.created_by = created_by
        self.created = created
        self.status = status
        self.source = source


class MeasurementFormListDtoPagedResult(_serialization.Model):
    """MeasurementFormListDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MeasurementFormListDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MeasurementFormListDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.MeasurementFormListDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MeasurementFormListDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MeasurementFormMappingDto(_serialization.Model):
    """MeasurementFormMappingDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar measurement_schema_source_id: Required.
    :vartype measurement_schema_source_id: str
    :ivar measurement_schema_target_id: Required.
    :vartype measurement_schema_target_id: str
    :ivar source_balloons: Required.
    :vartype source_balloons: list[~ignos.api.client.models.MeasurementFormBalloonMappingDto]
    :ivar target_balloons: Required.
    :vartype target_balloons: list[~ignos.api.client.models.MeasurementFormBalloonMappingDto]
    """

    _validation = {
        "id": {"required": True, "readonly": True, "min_length": 1},
        "measurement_schema_source_id": {"required": True, "readonly": True, "min_length": 1},
        "measurement_schema_target_id": {"required": True, "readonly": True, "min_length": 1},
        "source_balloons": {"required": True, "readonly": True},
        "target_balloons": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "measurement_schema_source_id": {"key": "measurementSchemaSourceId", "type": "str"},
        "measurement_schema_target_id": {"key": "measurementSchemaTargetId", "type": "str"},
        "source_balloons": {"key": "sourceBalloons", "type": "[MeasurementFormBalloonMappingDto]"},
        "target_balloons": {"key": "targetBalloons", "type": "[MeasurementFormBalloonMappingDto]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.measurement_schema_source_id = None
        self.measurement_schema_target_id = None
        self.source_balloons = None
        self.target_balloons = None


class MeasurementFormMappingSuggestionDto(_serialization.Model):
    """MeasurementFormMappingSuggestionDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar measurement_schema_source_id: Required.
    :vartype measurement_schema_source_id: str
    :ivar measurement_schema_target_id: Required.
    :vartype measurement_schema_target_id: str
    :ivar source_balloons: Required.
    :vartype source_balloons: list[~ignos.api.client.models.MeasurementFormBalloonMappingDto]
    :ivar target_balloons: Required.
    :vartype target_balloons: list[~ignos.api.client.models.MeasurementFormBalloonMappingDto]
    """

    _validation = {
        "measurement_schema_source_id": {"required": True, "min_length": 1},
        "measurement_schema_target_id": {"required": True, "min_length": 1},
        "source_balloons": {"required": True, "readonly": True},
        "target_balloons": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "measurement_schema_source_id": {"key": "measurementSchemaSourceId", "type": "str"},
        "measurement_schema_target_id": {"key": "measurementSchemaTargetId", "type": "str"},
        "source_balloons": {"key": "sourceBalloons", "type": "[MeasurementFormBalloonMappingDto]"},
        "target_balloons": {"key": "targetBalloons", "type": "[MeasurementFormBalloonMappingDto]"},
    }

    def __init__(self, *, measurement_schema_source_id: str, measurement_schema_target_id: str, **kwargs: Any) -> None:
        """
        :keyword measurement_schema_source_id: Required.
        :paramtype measurement_schema_source_id: str
        :keyword measurement_schema_target_id: Required.
        :paramtype measurement_schema_target_id: str
        """
        super().__init__(**kwargs)
        self.measurement_schema_source_id = measurement_schema_source_id
        self.measurement_schema_target_id = measurement_schema_target_id
        self.source_balloons = None
        self.target_balloons = None


class MeasurementFormNeedDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormNeedDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar requirement_date: Required.
    :vartype requirement_date: ~datetime.datetime
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar workorder:
    :vartype workorder: str
    :ivar operation:
    :vartype operation: int
    :ivar resource:
    :vartype resource: str
    :ivar assigned_to:
    :vartype assigned_to: ~ignos.api.client.models.UserDto
    :ivar is_generated_requirement: Required.
    :vartype is_generated_requirement: bool
    :ivar measurement_schema_id:
    :vartype measurement_schema_id: str
    :ivar drawing_url:
    :vartype drawing_url: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "requirement_date": {"required": True},
        "is_generated_requirement": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "requirement_date": {"key": "requirementDate", "type": "iso-8601"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "workorder": {"key": "workorder", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "resource": {"key": "resource", "type": "str"},
        "assigned_to": {"key": "assignedTo", "type": "UserDto"},
        "is_generated_requirement": {"key": "isGeneratedRequirement", "type": "bool"},
        "measurement_schema_id": {"key": "measurementSchemaId", "type": "str"},
        "drawing_url": {"key": "drawingUrl", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        requirement_date: datetime.datetime,
        is_generated_requirement: bool,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        workorder: Optional[str] = None,
        operation: Optional[int] = None,
        resource: Optional[str] = None,
        assigned_to: Optional["_models.UserDto"] = None,
        measurement_schema_id: Optional[str] = None,
        drawing_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword requirement_date: Required.
        :paramtype requirement_date: ~datetime.datetime
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword workorder:
        :paramtype workorder: str
        :keyword operation:
        :paramtype operation: int
        :keyword resource:
        :paramtype resource: str
        :keyword assigned_to:
        :paramtype assigned_to: ~ignos.api.client.models.UserDto
        :keyword is_generated_requirement: Required.
        :paramtype is_generated_requirement: bool
        :keyword measurement_schema_id:
        :paramtype measurement_schema_id: str
        :keyword drawing_url:
        :paramtype drawing_url: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.requirement_date = requirement_date
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.workorder = workorder
        self.operation = operation
        self.resource = resource
        self.assigned_to = assigned_to
        self.is_generated_requirement = is_generated_requirement
        self.measurement_schema_id = measurement_schema_id
        self.drawing_url = drawing_url


class MeasurementFormNeedDtoPagedResult(_serialization.Model):
    """MeasurementFormNeedDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MeasurementFormNeedDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MeasurementFormNeedDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.MeasurementFormNeedDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MeasurementFormNeedDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MeasurementFormProgressDto(_serialization.Model):
    """MeasurementFormProgressDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar required_values: Required.
    :vartype required_values: int
    :ivar values: Required.
    :vartype values: int
    :ivar progress: Required.
    :vartype progress: float
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "required_values": {"required": True},
        "values": {"required": True},
        "progress": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "required_values": {"key": "requiredValues", "type": "int"},
        "values": {"key": "values", "type": "int"},
        "progress": {"key": "progress", "type": "float"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        required_values: int,
        values: int,
        progress: float,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword required_values: Required.
        :paramtype required_values: int
        :keyword values: Required.
        :paramtype values: int
        :keyword progress: Required.
        :paramtype progress: float
        """
        super().__init__(**kwargs)
        self.id = id
        self.required_values = required_values
        self.values = values
        self.progress = progress


class MeasurementFormResourceTypeGeneratorDto(_serialization.Model):
    """MeasurementFormResourceTypeGeneratorDto.

    All required parameters must be populated in order to send to server.

    :ivar resource_type: Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, *, resource_type: str, **kwargs: Any) -> None:
        """
        :keyword resource_type: Required.
        :paramtype resource_type: str
        """
        super().__init__(**kwargs)
        self.resource_type = resource_type


class MeasurementFormSchemaAttachmentDto(_serialization.Model):
    """MeasurementFormSchemaAttachmentDto.

    All required parameters must be populated in order to send to server.

    :ivar url: Required.
    :vartype url: str
    :ivar title: Required.
    :vartype title: str
    """

    _validation = {
        "url": {"required": True, "min_length": 1},
        "title": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "title": {"key": "title", "type": "str"},
    }

    def __init__(self, *, url: str, title: str, **kwargs: Any) -> None:
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword title: Required.
        :paramtype title: str
        """
        super().__init__(**kwargs)
        self.url = url
        self.title = title


class MeasurementFormSchemaDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormSchemaDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar version_id: Required.
    :vartype version_id: int
    :ivar part_number: Required.
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar drawing_url:
    :vartype drawing_url: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar exclude_from_customer_documentation: Required.
    :vartype exclude_from_customer_documentation: bool
    :ivar specification:
    :vartype specification: str
    :ivar is_used: Required.
    :vartype is_used: bool
    :ivar status: Required. Known values are: "Draft", "Released", and "Revoked".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormStatus
    :ivar source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and "Manual".
    :vartype source: str or ~ignos.api.client.models.MeasurementFormSource
    :ivar marked_drawing_url:
    :vartype marked_drawing_url: str
    :ivar source_file_url:
    :vartype source_file_url: str
    :ivar project_file_url:
    :vartype project_file_url: str
    :ivar updated_by:
    :vartype updated_by: str
    :ivar updated_date:
    :vartype updated_date: ~datetime.datetime
    :ivar attachments: Required.
    :vartype attachments: list[~ignos.api.client.models.MeasurementFormSchemaAttachmentDto]
    :ivar grouped_elements: Required.
    :vartype grouped_elements: list[~ignos.api.client.models.MeasurementFormGroupedElementDto]
    :ivar extra_schemas: Required.
    :vartype extra_schemas: list[~ignos.api.client.models.MeasurementFormLinkedSchemaDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "version_id": {"required": True},
        "part_number": {"required": True, "min_length": 1},
        "exclude_from_customer_documentation": {"required": True},
        "is_used": {"required": True},
        "status": {"required": True},
        "source": {"required": True},
        "attachments": {"required": True},
        "grouped_elements": {"required": True},
        "extra_schemas": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "version_id": {"key": "versionId", "type": "int"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "drawing_url": {"key": "drawingUrl", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "exclude_from_customer_documentation": {"key": "excludeFromCustomerDocumentation", "type": "bool"},
        "specification": {"key": "specification", "type": "str"},
        "is_used": {"key": "isUsed", "type": "bool"},
        "status": {"key": "status", "type": "str"},
        "source": {"key": "source", "type": "str"},
        "marked_drawing_url": {"key": "markedDrawingUrl", "type": "str"},
        "source_file_url": {"key": "sourceFileUrl", "type": "str"},
        "project_file_url": {"key": "projectFileUrl", "type": "str"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "updated_date": {"key": "updatedDate", "type": "iso-8601"},
        "attachments": {"key": "attachments", "type": "[MeasurementFormSchemaAttachmentDto]"},
        "grouped_elements": {"key": "groupedElements", "type": "[MeasurementFormGroupedElementDto]"},
        "extra_schemas": {"key": "extraSchemas", "type": "[MeasurementFormLinkedSchemaDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        version_id: int,
        part_number: str,
        exclude_from_customer_documentation: bool,
        is_used: bool,
        status: Union[str, "_models.MeasurementFormStatus"],
        source: Union[str, "_models.MeasurementFormSource"],
        attachments: List["_models.MeasurementFormSchemaAttachmentDto"],
        grouped_elements: List["_models.MeasurementFormGroupedElementDto"],
        extra_schemas: List["_models.MeasurementFormLinkedSchemaDto"],
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        drawing_url: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        specification: Optional[str] = None,
        marked_drawing_url: Optional[str] = None,
        source_file_url: Optional[str] = None,
        project_file_url: Optional[str] = None,
        updated_by: Optional[str] = None,
        updated_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword version_id: Required.
        :paramtype version_id: int
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword drawing_url:
        :paramtype drawing_url: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword exclude_from_customer_documentation: Required.
        :paramtype exclude_from_customer_documentation: bool
        :keyword specification:
        :paramtype specification: str
        :keyword is_used: Required.
        :paramtype is_used: bool
        :keyword status: Required. Known values are: "Draft", "Released", and "Revoked".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormStatus
        :keyword source: Required. Known values are: "Unknown", "InspectionXpert", "Excel", and
         "Manual".
        :paramtype source: str or ~ignos.api.client.models.MeasurementFormSource
        :keyword marked_drawing_url:
        :paramtype marked_drawing_url: str
        :keyword source_file_url:
        :paramtype source_file_url: str
        :keyword project_file_url:
        :paramtype project_file_url: str
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword updated_date:
        :paramtype updated_date: ~datetime.datetime
        :keyword attachments: Required.
        :paramtype attachments: list[~ignos.api.client.models.MeasurementFormSchemaAttachmentDto]
        :keyword grouped_elements: Required.
        :paramtype grouped_elements: list[~ignos.api.client.models.MeasurementFormGroupedElementDto]
        :keyword extra_schemas: Required.
        :paramtype extra_schemas: list[~ignos.api.client.models.MeasurementFormLinkedSchemaDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.version_id = version_id
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.drawing_url = drawing_url
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.exclude_from_customer_documentation = exclude_from_customer_documentation
        self.specification = specification
        self.is_used = is_used
        self.status = status
        self.source = source
        self.marked_drawing_url = marked_drawing_url
        self.source_file_url = source_file_url
        self.project_file_url = project_file_url
        self.updated_by = updated_by
        self.updated_date = updated_date
        self.attachments = attachments
        self.grouped_elements = grouped_elements
        self.extra_schemas = extra_schemas


class MeasurementFormSchemaNotNeededDto(_serialization.Model):
    """MeasurementFormSchemaNotNeededDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        comment: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.comment = comment


class MeasurementFormSchemaNotNeededDtoPagedResult(_serialization.Model):  # pylint: disable=name-too-long
    """MeasurementFormSchemaNotNeededDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MeasurementFormSchemaNotNeededDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MeasurementFormSchemaNotNeededDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.MeasurementFormSchemaNotNeededDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MeasurementFormSchemaNotNeededDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MeasurementFormSettingsDto(_serialization.Model):
    """MeasurementFormSettingsDto.

    All required parameters must be populated in order to send to server.

    :ivar convert_inch_to_mm: Required.
    :vartype convert_inch_to_mm: bool
    :ivar validate_measuring_tools: Required.
    :vartype validate_measuring_tools: bool
    :ivar validate_measuring_tools_for_suppliers: Required.
    :vartype validate_measuring_tools_for_suppliers: bool
    :ivar generate_schema_requirements: Required.
    :vartype generate_schema_requirements: bool
    :ivar generate_schema_instances: Required.
    :vartype generate_schema_instances: bool
    :ivar auto_complete_schema_instances: Required.
    :vartype auto_complete_schema_instances: bool
    :ivar generate_report_for_approved_instances: Required.
    :vartype generate_report_for_approved_instances: bool
    :ivar include_measuring_tools_in_report_as_default: Required.
    :vartype include_measuring_tools_in_report_as_default: bool
    :ivar resource_types_blocking_auto_workflow:
    :vartype resource_types_blocking_auto_workflow: list[str]
    """

    _validation = {
        "convert_inch_to_mm": {"required": True},
        "validate_measuring_tools": {"required": True},
        "validate_measuring_tools_for_suppliers": {"required": True},
        "generate_schema_requirements": {"required": True},
        "generate_schema_instances": {"required": True},
        "auto_complete_schema_instances": {"required": True},
        "generate_report_for_approved_instances": {"required": True},
        "include_measuring_tools_in_report_as_default": {"required": True},
    }

    _attribute_map = {
        "convert_inch_to_mm": {"key": "convertInchToMm", "type": "bool"},
        "validate_measuring_tools": {"key": "validateMeasuringTools", "type": "bool"},
        "validate_measuring_tools_for_suppliers": {"key": "validateMeasuringToolsForSuppliers", "type": "bool"},
        "generate_schema_requirements": {"key": "generateSchemaRequirements", "type": "bool"},
        "generate_schema_instances": {"key": "generateSchemaInstances", "type": "bool"},
        "auto_complete_schema_instances": {"key": "autoCompleteSchemaInstances", "type": "bool"},
        "generate_report_for_approved_instances": {"key": "generateReportForApprovedInstances", "type": "bool"},
        "include_measuring_tools_in_report_as_default": {
            "key": "includeMeasuringToolsInReportAsDefault",
            "type": "bool",
        },
        "resource_types_blocking_auto_workflow": {"key": "resourceTypesBlockingAutoWorkflow", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        convert_inch_to_mm: bool,
        validate_measuring_tools: bool,
        validate_measuring_tools_for_suppliers: bool,
        generate_schema_requirements: bool,
        generate_schema_instances: bool,
        auto_complete_schema_instances: bool,
        generate_report_for_approved_instances: bool,
        include_measuring_tools_in_report_as_default: bool,
        resource_types_blocking_auto_workflow: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword convert_inch_to_mm: Required.
        :paramtype convert_inch_to_mm: bool
        :keyword validate_measuring_tools: Required.
        :paramtype validate_measuring_tools: bool
        :keyword validate_measuring_tools_for_suppliers: Required.
        :paramtype validate_measuring_tools_for_suppliers: bool
        :keyword generate_schema_requirements: Required.
        :paramtype generate_schema_requirements: bool
        :keyword generate_schema_instances: Required.
        :paramtype generate_schema_instances: bool
        :keyword auto_complete_schema_instances: Required.
        :paramtype auto_complete_schema_instances: bool
        :keyword generate_report_for_approved_instances: Required.
        :paramtype generate_report_for_approved_instances: bool
        :keyword include_measuring_tools_in_report_as_default: Required.
        :paramtype include_measuring_tools_in_report_as_default: bool
        :keyword resource_types_blocking_auto_workflow:
        :paramtype resource_types_blocking_auto_workflow: list[str]
        """
        super().__init__(**kwargs)
        self.convert_inch_to_mm = convert_inch_to_mm
        self.validate_measuring_tools = validate_measuring_tools
        self.validate_measuring_tools_for_suppliers = validate_measuring_tools_for_suppliers
        self.generate_schema_requirements = generate_schema_requirements
        self.generate_schema_instances = generate_schema_instances
        self.auto_complete_schema_instances = auto_complete_schema_instances
        self.generate_report_for_approved_instances = generate_report_for_approved_instances
        self.include_measuring_tools_in_report_as_default = include_measuring_tools_in_report_as_default
        self.resource_types_blocking_auto_workflow = resource_types_blocking_auto_workflow


class MeasurementFormSupplierAccessInstanceDto(_serialization.Model):
    """MeasurementFormSupplierAccessInstanceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar readonly: Required.
    :vartype readonly: bool
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar quantity: Required.
    :vartype quantity: int
    :ivar status: Required. Known values are: "Active", "Cancelled", "Completed", and "Approved".
    :vartype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
    :ivar suppliers: Required.
    :vartype suppliers: list[~ignos.api.client.models.MeasurementFormWorkorderSupplierDto]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "readonly": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
        "suppliers": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "readonly": {"key": "readonly", "type": "bool"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "quantity": {"key": "quantity", "type": "int"},
        "status": {"key": "status", "type": "str"},
        "suppliers": {"key": "suppliers", "type": "[MeasurementFormWorkorderSupplierDto]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        readonly: bool,
        quantity: int,
        status: Union[str, "_models.MeasurementFormInstanceStatus"],
        suppliers: List["_models.MeasurementFormWorkorderSupplierDto"],
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        customer_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword readonly: Required.
        :paramtype readonly: bool
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword quantity: Required.
        :paramtype quantity: int
        :keyword status: Required. Known values are: "Active", "Cancelled", "Completed", and
         "Approved".
        :paramtype status: str or ~ignos.api.client.models.MeasurementFormInstanceStatus
        :keyword suppliers: Required.
        :paramtype suppliers: list[~ignos.api.client.models.MeasurementFormWorkorderSupplierDto]
        """
        super().__init__(**kwargs)
        self.id = id
        self.readonly = readonly
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.customer_id = customer_id
        self.quantity = quantity
        self.status = status
        self.suppliers = suppliers


class MeasurementFormToolValueDto(_serialization.Model):
    """MeasurementFormToolValueDto.

    All required parameters must be populated in order to send to server.

    :ivar tool: Required.
    :vartype tool: str
    :ivar type:
    :vartype type: str
    :ivar sub_type:
    :vartype sub_type: str
    """

    _validation = {
        "tool": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tool": {"key": "tool", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
    }

    def __init__(self, *, tool: str, type: Optional[str] = None, sub_type: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword tool: Required.
        :paramtype tool: str
        :keyword type:
        :paramtype type: str
        :keyword sub_type:
        :paramtype sub_type: str
        """
        super().__init__(**kwargs)
        self.tool = tool
        self.type = type
        self.sub_type = sub_type


class MeasurementFormVersionImportDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormVersionImportDto.

    All required parameters must be populated in order to send to server.

    :ivar version: Required.
    :vartype version: int
    :ivar specification:
    :vartype specification: str
    :ivar drawing_url:
    :vartype drawing_url: str
    :ivar marked_drawing_url:
    :vartype marked_drawing_url: str
    :ivar xml_url:
    :vartype xml_url: str
    :ivar inspection_xpert_project_url:
    :vartype inspection_xpert_project_url: str
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar updated:
    :vartype updated: ~datetime.datetime
    :ivar updated_by:
    :vartype updated_by: str
    :ivar elements: Required.
    :vartype elements: list[~ignos.api.client.models.MeasurementFormElementImportDto]
    :ivar is_used: Required.
    :vartype is_used: bool
    """

    _validation = {
        "version": {"required": True},
        "created": {"required": True},
        "created_by": {"required": True, "min_length": 1},
        "elements": {"required": True},
        "is_used": {"required": True},
    }

    _attribute_map = {
        "version": {"key": "version", "type": "int"},
        "specification": {"key": "specification", "type": "str"},
        "drawing_url": {"key": "drawingUrl", "type": "str"},
        "marked_drawing_url": {"key": "markedDrawingUrl", "type": "str"},
        "xml_url": {"key": "xmlUrl", "type": "str"},
        "inspection_xpert_project_url": {"key": "inspectionXpertProjectUrl", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "updated": {"key": "updated", "type": "iso-8601"},
        "updated_by": {"key": "updatedBy", "type": "str"},
        "elements": {"key": "elements", "type": "[MeasurementFormElementImportDto]"},
        "is_used": {"key": "isUsed", "type": "bool"},
    }

    def __init__(
        self,
        *,
        version: int,
        created: datetime.datetime,
        created_by: str,
        elements: List["_models.MeasurementFormElementImportDto"],
        is_used: bool,
        specification: Optional[str] = None,
        drawing_url: Optional[str] = None,
        marked_drawing_url: Optional[str] = None,
        xml_url: Optional[str] = None,
        inspection_xpert_project_url: Optional[str] = None,
        updated: Optional[datetime.datetime] = None,
        updated_by: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword version: Required.
        :paramtype version: int
        :keyword specification:
        :paramtype specification: str
        :keyword drawing_url:
        :paramtype drawing_url: str
        :keyword marked_drawing_url:
        :paramtype marked_drawing_url: str
        :keyword xml_url:
        :paramtype xml_url: str
        :keyword inspection_xpert_project_url:
        :paramtype inspection_xpert_project_url: str
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword updated:
        :paramtype updated: ~datetime.datetime
        :keyword updated_by:
        :paramtype updated_by: str
        :keyword elements: Required.
        :paramtype elements: list[~ignos.api.client.models.MeasurementFormElementImportDto]
        :keyword is_used: Required.
        :paramtype is_used: bool
        """
        super().__init__(**kwargs)
        self.version = version
        self.specification = specification
        self.drawing_url = drawing_url
        self.marked_drawing_url = marked_drawing_url
        self.xml_url = xml_url
        self.inspection_xpert_project_url = inspection_xpert_project_url
        self.created = created
        self.created_by = created_by
        self.updated = updated
        self.updated_by = updated_by
        self.elements = elements
        self.is_used = is_used


class MeasurementFormWorkorderSchemaDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasurementFormWorkorderSchemaDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar drawing_url:
    :vartype drawing_url: str
    :ivar marked_drawing_url:
    :vartype marked_drawing_url: str
    :ivar exclude_from_customer_documentation: Required.
    :vartype exclude_from_customer_documentation: bool
    :ivar version_id: Required.
    :vartype version_id: int
    :ivar specification:
    :vartype specification: str
    :ivar progress: Required.
    :vartype progress: ~ignos.api.client.models.MeasurementFormProgressDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "exclude_from_customer_documentation": {"required": True},
        "version_id": {"required": True},
        "progress": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "drawing_url": {"key": "drawingUrl", "type": "str"},
        "marked_drawing_url": {"key": "markedDrawingUrl", "type": "str"},
        "exclude_from_customer_documentation": {"key": "excludeFromCustomerDocumentation", "type": "bool"},
        "version_id": {"key": "versionId", "type": "int"},
        "specification": {"key": "specification", "type": "str"},
        "progress": {"key": "progress", "type": "MeasurementFormProgressDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        exclude_from_customer_documentation: bool,
        version_id: int,
        progress: "_models.MeasurementFormProgressDto",
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        customer_id: Optional[str] = None,
        drawing_url: Optional[str] = None,
        marked_drawing_url: Optional[str] = None,
        specification: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword drawing_url:
        :paramtype drawing_url: str
        :keyword marked_drawing_url:
        :paramtype marked_drawing_url: str
        :keyword exclude_from_customer_documentation: Required.
        :paramtype exclude_from_customer_documentation: bool
        :keyword version_id: Required.
        :paramtype version_id: int
        :keyword specification:
        :paramtype specification: str
        :keyword progress: Required.
        :paramtype progress: ~ignos.api.client.models.MeasurementFormProgressDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.customer_id = customer_id
        self.drawing_url = drawing_url
        self.marked_drawing_url = marked_drawing_url
        self.exclude_from_customer_documentation = exclude_from_customer_documentation
        self.version_id = version_id
        self.specification = specification
        self.progress = progress


class MeasurementFormWorkorderSequenceDto(_serialization.Model):
    """MeasurementFormWorkorderSequenceDto.

    All required parameters must be populated in order to send to server.

    :ivar lot:
    :vartype lot: str
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar serial_number:
    :vartype serial_number: str
    """

    _validation = {
        "sequence": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "lot": {"key": "lot", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
    }

    def __init__(
        self, *, sequence: str, lot: Optional[str] = None, serial_number: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword lot:
        :paramtype lot: str
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword serial_number:
        :paramtype serial_number: str
        """
        super().__init__(**kwargs)
        self.lot = lot
        self.sequence = sequence
        self.serial_number = serial_number


class MeasurementFormWorkorderSupplierDto(_serialization.Model):
    """MeasurementFormWorkorderSupplierDto.

    All required parameters must be populated in order to send to server.

    :ivar supplier_id: Required.
    :vartype supplier_id: str
    :ivar supplier_name:
    :vartype supplier_name: str
    :ivar available:
    :vartype available: bool
    :ivar procurement_order:
    :vartype procurement_order: str
    :ivar procurement_line:
    :vartype procurement_line: int
    :ivar external_order_number:
    :vartype external_order_number: str
    """

    _validation = {
        "supplier_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "supplier_id": {"key": "supplierId", "type": "str"},
        "supplier_name": {"key": "supplierName", "type": "str"},
        "available": {"key": "available", "type": "bool"},
        "procurement_order": {"key": "procurementOrder", "type": "str"},
        "procurement_line": {"key": "procurementLine", "type": "int"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        supplier_id: str,
        supplier_name: Optional[str] = None,
        available: Optional[bool] = None,
        procurement_order: Optional[str] = None,
        procurement_line: Optional[int] = None,
        external_order_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword supplier_id: Required.
        :paramtype supplier_id: str
        :keyword supplier_name:
        :paramtype supplier_name: str
        :keyword available:
        :paramtype available: bool
        :keyword procurement_order:
        :paramtype procurement_order: str
        :keyword procurement_line:
        :paramtype procurement_line: int
        :keyword external_order_number:
        :paramtype external_order_number: str
        """
        super().__init__(**kwargs)
        self.supplier_id = supplier_id
        self.supplier_name = supplier_name
        self.available = available
        self.procurement_order = procurement_order
        self.procurement_line = procurement_line
        self.external_order_number = external_order_number


class MeasurementFrequencyDto(_serialization.Model):
    """MeasurementFrequencyDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: int, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class MeasuringToolCalibrationDto(_serialization.Model):
    """MeasuringToolCalibrationDto.

    All required parameters must be populated in order to send to server.

    :ivar calibration_date: Required.
    :vartype calibration_date: ~datetime.datetime
    :ivar next_calibration_date: Required.
    :vartype next_calibration_date: ~datetime.datetime
    :ivar report_type:
    :vartype report_type: str
    :ivar calibration_location:
    :vartype calibration_location: str
    :ivar calibration_certificate_number:
    :vartype calibration_certificate_number: str
    :ivar adjusted: Required.
    :vartype adjusted: bool
    :ivar calibration_certificate_url:
    :vartype calibration_certificate_url: str
    """

    _validation = {
        "calibration_date": {"required": True},
        "next_calibration_date": {"required": True},
        "adjusted": {"required": True},
    }

    _attribute_map = {
        "calibration_date": {"key": "calibrationDate", "type": "iso-8601"},
        "next_calibration_date": {"key": "nextCalibrationDate", "type": "iso-8601"},
        "report_type": {"key": "reportType", "type": "str"},
        "calibration_location": {"key": "calibrationLocation", "type": "str"},
        "calibration_certificate_number": {"key": "calibrationCertificateNumber", "type": "str"},
        "adjusted": {"key": "adjusted", "type": "bool"},
        "calibration_certificate_url": {"key": "calibrationCertificateUrl", "type": "str"},
    }

    def __init__(
        self,
        *,
        calibration_date: datetime.datetime,
        next_calibration_date: datetime.datetime,
        adjusted: bool,
        report_type: Optional[str] = None,
        calibration_location: Optional[str] = None,
        calibration_certificate_number: Optional[str] = None,
        calibration_certificate_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword calibration_date: Required.
        :paramtype calibration_date: ~datetime.datetime
        :keyword next_calibration_date: Required.
        :paramtype next_calibration_date: ~datetime.datetime
        :keyword report_type:
        :paramtype report_type: str
        :keyword calibration_location:
        :paramtype calibration_location: str
        :keyword calibration_certificate_number:
        :paramtype calibration_certificate_number: str
        :keyword adjusted: Required.
        :paramtype adjusted: bool
        :keyword calibration_certificate_url:
        :paramtype calibration_certificate_url: str
        """
        super().__init__(**kwargs)
        self.calibration_date = calibration_date
        self.next_calibration_date = next_calibration_date
        self.report_type = report_type
        self.calibration_location = calibration_location
        self.calibration_certificate_number = calibration_certificate_number
        self.adjusted = adjusted
        self.calibration_certificate_url = calibration_certificate_url


class MeasuringToolCalibrationImportDto(_serialization.Model):
    """MeasuringToolCalibrationImportDto.

    All required parameters must be populated in order to send to server.

    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar calibration_date: Required.
    :vartype calibration_date: ~datetime.datetime
    :ivar next_calibration_date: Required.
    :vartype next_calibration_date: ~datetime.datetime
    :ivar report_type:
    :vartype report_type: str
    :ivar calibration_location:
    :vartype calibration_location: str
    :ivar calibration_certificate_number:
    :vartype calibration_certificate_number: str
    :ivar adjusted: Required.
    :vartype adjusted: bool
    :ivar calibration_certificate_url:
    :vartype calibration_certificate_url: str
    """

    _validation = {
        "created": {"required": True},
        "created_by": {"required": True, "min_length": 1},
        "calibration_date": {"required": True},
        "next_calibration_date": {"required": True},
        "adjusted": {"required": True},
    }

    _attribute_map = {
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "calibration_date": {"key": "calibrationDate", "type": "iso-8601"},
        "next_calibration_date": {"key": "nextCalibrationDate", "type": "iso-8601"},
        "report_type": {"key": "reportType", "type": "str"},
        "calibration_location": {"key": "calibrationLocation", "type": "str"},
        "calibration_certificate_number": {"key": "calibrationCertificateNumber", "type": "str"},
        "adjusted": {"key": "adjusted", "type": "bool"},
        "calibration_certificate_url": {"key": "calibrationCertificateUrl", "type": "str"},
    }

    def __init__(
        self,
        *,
        created: datetime.datetime,
        created_by: str,
        calibration_date: datetime.datetime,
        next_calibration_date: datetime.datetime,
        adjusted: bool,
        report_type: Optional[str] = None,
        calibration_location: Optional[str] = None,
        calibration_certificate_number: Optional[str] = None,
        calibration_certificate_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword calibration_date: Required.
        :paramtype calibration_date: ~datetime.datetime
        :keyword next_calibration_date: Required.
        :paramtype next_calibration_date: ~datetime.datetime
        :keyword report_type:
        :paramtype report_type: str
        :keyword calibration_location:
        :paramtype calibration_location: str
        :keyword calibration_certificate_number:
        :paramtype calibration_certificate_number: str
        :keyword adjusted: Required.
        :paramtype adjusted: bool
        :keyword calibration_certificate_url:
        :paramtype calibration_certificate_url: str
        """
        super().__init__(**kwargs)
        self.created = created
        self.created_by = created_by
        self.calibration_date = calibration_date
        self.next_calibration_date = next_calibration_date
        self.report_type = report_type
        self.calibration_location = calibration_location
        self.calibration_certificate_number = calibration_certificate_number
        self.adjusted = adjusted
        self.calibration_certificate_url = calibration_certificate_url


class MeasuringToolDetailDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasuringToolDetailDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar tool_id: Required.
    :vartype tool_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar manufacturer: Required.
    :vartype manufacturer: ~ignos.api.client.models.ManufacturerDto
    :ivar type: Required.
    :vartype type: ~ignos.api.client.models.MeasuringToolTypeDto
    :ivar sub_type:
    :vartype sub_type: ~ignos.api.client.models.MeasuringToolSubTypeDto
    :ivar unit:
    :vartype unit: ~ignos.api.client.models.MeasuringUnitDto
    :ivar default_location:
    :vartype default_location: str
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar serial_number:
    :vartype serial_number: str
    :ivar precision:
    :vartype precision: str
    :ivar last_calibration_date:
    :vartype last_calibration_date: ~datetime.datetime
    :ivar next_calibration_date:
    :vartype next_calibration_date: ~datetime.datetime
    :ivar deprecated_date:
    :vartype deprecated_date: ~datetime.datetime
    :ivar last_location:
    :vartype last_location: str
    :ivar last_location_date:
    :vartype last_location_date: ~datetime.datetime
    :ivar calibration_status: Required. Known values are: "Uncalibrated", "Deprecated", "Expired",
     "SoonDue", and "Valid".
    :vartype calibration_status: str or ~ignos.api.client.models.CalibrationStatusDto
    """

    _validation = {
        "id": {"required": True},
        "tool_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "manufacturer": {"required": True},
        "type": {"required": True},
        "calibration_status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "tool_id": {"key": "toolId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "ManufacturerDto"},
        "type": {"key": "type", "type": "MeasuringToolTypeDto"},
        "sub_type": {"key": "subType", "type": "MeasuringToolSubTypeDto"},
        "unit": {"key": "unit", "type": "MeasuringUnitDto"},
        "default_location": {"key": "defaultLocation", "type": "str"},
        "min": {"key": "min", "type": "float"},
        "max": {"key": "max", "type": "float"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "precision": {"key": "precision", "type": "str"},
        "last_calibration_date": {"key": "lastCalibrationDate", "type": "iso-8601"},
        "next_calibration_date": {"key": "nextCalibrationDate", "type": "iso-8601"},
        "deprecated_date": {"key": "deprecatedDate", "type": "iso-8601"},
        "last_location": {"key": "lastLocation", "type": "str"},
        "last_location_date": {"key": "lastLocationDate", "type": "iso-8601"},
        "calibration_status": {"key": "calibrationStatus", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        tool_id: str,
        name: str,
        manufacturer: "_models.ManufacturerDto",
        type: "_models.MeasuringToolTypeDto",
        calibration_status: Union[str, "_models.CalibrationStatusDto"],
        sub_type: Optional["_models.MeasuringToolSubTypeDto"] = None,
        unit: Optional["_models.MeasuringUnitDto"] = None,
        default_location: Optional[str] = None,
        min: Optional[float] = None,  # pylint: disable=redefined-builtin
        max: Optional[float] = None,  # pylint: disable=redefined-builtin
        calibration_interval: Optional[int] = None,
        serial_number: Optional[str] = None,
        precision: Optional[str] = None,
        last_calibration_date: Optional[datetime.datetime] = None,
        next_calibration_date: Optional[datetime.datetime] = None,
        deprecated_date: Optional[datetime.datetime] = None,
        last_location: Optional[str] = None,
        last_location_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword tool_id: Required.
        :paramtype tool_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword manufacturer: Required.
        :paramtype manufacturer: ~ignos.api.client.models.ManufacturerDto
        :keyword type: Required.
        :paramtype type: ~ignos.api.client.models.MeasuringToolTypeDto
        :keyword sub_type:
        :paramtype sub_type: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :keyword unit:
        :paramtype unit: ~ignos.api.client.models.MeasuringUnitDto
        :keyword default_location:
        :paramtype default_location: str
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword precision:
        :paramtype precision: str
        :keyword last_calibration_date:
        :paramtype last_calibration_date: ~datetime.datetime
        :keyword next_calibration_date:
        :paramtype next_calibration_date: ~datetime.datetime
        :keyword deprecated_date:
        :paramtype deprecated_date: ~datetime.datetime
        :keyword last_location:
        :paramtype last_location: str
        :keyword last_location_date:
        :paramtype last_location_date: ~datetime.datetime
        :keyword calibration_status: Required. Known values are: "Uncalibrated", "Deprecated",
         "Expired", "SoonDue", and "Valid".
        :paramtype calibration_status: str or ~ignos.api.client.models.CalibrationStatusDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.tool_id = tool_id
        self.name = name
        self.manufacturer = manufacturer
        self.type = type
        self.sub_type = sub_type
        self.unit = unit
        self.default_location = default_location
        self.min = min
        self.max = max
        self.calibration_interval = calibration_interval
        self.serial_number = serial_number
        self.precision = precision
        self.last_calibration_date = last_calibration_date
        self.next_calibration_date = next_calibration_date
        self.deprecated_date = deprecated_date
        self.last_location = last_location
        self.last_location_date = last_location_date
        self.calibration_status = calibration_status


class MeasuringToolDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MeasuringToolDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar tool_id: Required.
    :vartype tool_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar manufacturer: Required.
    :vartype manufacturer: str
    :ivar type: Required.
    :vartype type: str
    :ivar type_id: Required.
    :vartype type_id: str
    :ivar sub_type:
    :vartype sub_type: str
    :ivar sub_type_id:
    :vartype sub_type_id: str
    :ivar unit:
    :vartype unit: str
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    :ivar last_calibration_date:
    :vartype last_calibration_date: ~datetime.datetime
    :ivar next_calibration_date:
    :vartype next_calibration_date: ~datetime.datetime
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar deprecated_date:
    :vartype deprecated_date: ~datetime.datetime
    :ivar last_location:
    :vartype last_location: str
    :ivar last_location_date:
    :vartype last_location_date: ~datetime.datetime
    :ivar calibration_status: Required. Known values are: "Uncalibrated", "Deprecated", "Expired",
     "SoonDue", and "Valid".
    :vartype calibration_status: str or ~ignos.api.client.models.CalibrationStatusDto
    """

    _validation = {
        "id": {"required": True},
        "tool_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "manufacturer": {"required": True, "min_length": 1},
        "type": {"required": True, "min_length": 1},
        "type_id": {"required": True},
        "calibration_status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "tool_id": {"key": "toolId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "type_id": {"key": "typeId", "type": "str"},
        "sub_type": {"key": "subType", "type": "str"},
        "sub_type_id": {"key": "subTypeId", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "min": {"key": "min", "type": "float"},
        "max": {"key": "max", "type": "float"},
        "last_calibration_date": {"key": "lastCalibrationDate", "type": "iso-8601"},
        "next_calibration_date": {"key": "nextCalibrationDate", "type": "iso-8601"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "deprecated_date": {"key": "deprecatedDate", "type": "iso-8601"},
        "last_location": {"key": "lastLocation", "type": "str"},
        "last_location_date": {"key": "lastLocationDate", "type": "iso-8601"},
        "calibration_status": {"key": "calibrationStatus", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        tool_id: str,
        name: str,
        manufacturer: str,
        type: str,
        type_id: str,
        calibration_status: Union[str, "_models.CalibrationStatusDto"],
        sub_type: Optional[str] = None,
        sub_type_id: Optional[str] = None,
        unit: Optional[str] = None,
        min: Optional[float] = None,  # pylint: disable=redefined-builtin
        max: Optional[float] = None,  # pylint: disable=redefined-builtin
        last_calibration_date: Optional[datetime.datetime] = None,
        next_calibration_date: Optional[datetime.datetime] = None,
        calibration_interval: Optional[int] = None,
        deprecated_date: Optional[datetime.datetime] = None,
        last_location: Optional[str] = None,
        last_location_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword tool_id: Required.
        :paramtype tool_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword manufacturer: Required.
        :paramtype manufacturer: str
        :keyword type: Required.
        :paramtype type: str
        :keyword type_id: Required.
        :paramtype type_id: str
        :keyword sub_type:
        :paramtype sub_type: str
        :keyword sub_type_id:
        :paramtype sub_type_id: str
        :keyword unit:
        :paramtype unit: str
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        :keyword last_calibration_date:
        :paramtype last_calibration_date: ~datetime.datetime
        :keyword next_calibration_date:
        :paramtype next_calibration_date: ~datetime.datetime
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword deprecated_date:
        :paramtype deprecated_date: ~datetime.datetime
        :keyword last_location:
        :paramtype last_location: str
        :keyword last_location_date:
        :paramtype last_location_date: ~datetime.datetime
        :keyword calibration_status: Required. Known values are: "Uncalibrated", "Deprecated",
         "Expired", "SoonDue", and "Valid".
        :paramtype calibration_status: str or ~ignos.api.client.models.CalibrationStatusDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.tool_id = tool_id
        self.name = name
        self.manufacturer = manufacturer
        self.type = type
        self.type_id = type_id
        self.sub_type = sub_type
        self.sub_type_id = sub_type_id
        self.unit = unit
        self.min = min
        self.max = max
        self.last_calibration_date = last_calibration_date
        self.next_calibration_date = next_calibration_date
        self.calibration_interval = calibration_interval
        self.deprecated_date = deprecated_date
        self.last_location = last_location
        self.last_location_date = last_location_date
        self.calibration_status = calibration_status


class MeasuringToolDtoPagedData(_serialization.Model):
    """MeasuringToolDtoPagedData.

    All required parameters must be populated in order to send to server.

    :ivar page_number: Required.
    :vartype page_number: int
    :ivar page_size: Required.
    :vartype page_size: int
    :ivar total_number_of_pages: Required.
    :vartype total_number_of_pages: int
    :ivar total_number_of_records: Required.
    :vartype total_number_of_records: int
    :ivar next_page_url:
    :vartype next_page_url: str
    :ivar value: Required.
    :vartype value: list[~ignos.api.client.models.MeasuringToolDto]
    """

    _validation = {
        "page_number": {"required": True},
        "page_size": {"required": True},
        "total_number_of_pages": {"required": True},
        "total_number_of_records": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "page_number": {"key": "pageNumber", "type": "int"},
        "page_size": {"key": "pageSize", "type": "int"},
        "total_number_of_pages": {"key": "totalNumberOfPages", "type": "int"},
        "total_number_of_records": {"key": "totalNumberOfRecords", "type": "int"},
        "next_page_url": {"key": "nextPageUrl", "type": "str"},
        "value": {"key": "value", "type": "[MeasuringToolDto]"},
    }

    def __init__(
        self,
        *,
        page_number: int,
        page_size: int,
        total_number_of_pages: int,
        total_number_of_records: int,
        value: List["_models.MeasuringToolDto"],
        next_page_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_number: Required.
        :paramtype page_number: int
        :keyword page_size: Required.
        :paramtype page_size: int
        :keyword total_number_of_pages: Required.
        :paramtype total_number_of_pages: int
        :keyword total_number_of_records: Required.
        :paramtype total_number_of_records: int
        :keyword next_page_url:
        :paramtype next_page_url: str
        :keyword value: Required.
        :paramtype value: list[~ignos.api.client.models.MeasuringToolDto]
        """
        super().__init__(**kwargs)
        self.page_number = page_number
        self.page_size = page_size
        self.total_number_of_pages = total_number_of_pages
        self.total_number_of_records = total_number_of_records
        self.next_page_url = next_page_url
        self.value = value


class MeasuringToolImportInformationDto(_serialization.Model):
    """MeasuringToolImportInformationDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar message: Required.
    :vartype message: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "message": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, id: str, message: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword message: Required.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.message = message


class MeasuringToolImportResultDto(_serialization.Model):
    """MeasuringToolImportResultDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar errors: Required.
    :vartype errors: list[~ignos.api.client.models.MeasuringToolImportInformationDto]
    :ivar information: Required.
    :vartype information: list[~ignos.api.client.models.MeasuringToolImportInformationDto]
    :ivar imported_calibrations: Required.
    :vartype imported_calibrations: list[~ignos.api.client.models.ImportedCalibration]
    :ivar number_of_calibrations_imported: Required.
    :vartype number_of_calibrations_imported: int
    :ivar newest_calibration:
    :vartype newest_calibration: ~datetime.datetime
    """

    _validation = {
        "errors": {"required": True},
        "information": {"required": True},
        "imported_calibrations": {"required": True},
        "number_of_calibrations_imported": {"required": True, "readonly": True},
        "newest_calibration": {"readonly": True},
    }

    _attribute_map = {
        "errors": {"key": "errors", "type": "[MeasuringToolImportInformationDto]"},
        "information": {"key": "information", "type": "[MeasuringToolImportInformationDto]"},
        "imported_calibrations": {"key": "importedCalibrations", "type": "[ImportedCalibration]"},
        "number_of_calibrations_imported": {"key": "numberOfCalibrationsImported", "type": "int"},
        "newest_calibration": {"key": "newestCalibration", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        errors: List["_models.MeasuringToolImportInformationDto"],
        information: List["_models.MeasuringToolImportInformationDto"],
        imported_calibrations: List["_models.ImportedCalibration"],
        **kwargs: Any
    ) -> None:
        """
        :keyword errors: Required.
        :paramtype errors: list[~ignos.api.client.models.MeasuringToolImportInformationDto]
        :keyword information: Required.
        :paramtype information: list[~ignos.api.client.models.MeasuringToolImportInformationDto]
        :keyword imported_calibrations: Required.
        :paramtype imported_calibrations: list[~ignos.api.client.models.ImportedCalibration]
        """
        super().__init__(**kwargs)
        self.errors = errors
        self.information = information
        self.imported_calibrations = imported_calibrations
        self.number_of_calibrations_imported = None
        self.newest_calibration = None


class MeasuringToolSettingsDto(_serialization.Model):
    """MeasuringToolSettingsDto.

    All required parameters must be populated in order to send to server.

    :ivar disable_user_defined_identifiers_for_calibrated_tools: Required.
    :vartype disable_user_defined_identifiers_for_calibrated_tools: bool
    :ivar disable_user_defined_identifiers_for_uncalibrated_tools: Required.
    :vartype disable_user_defined_identifiers_for_uncalibrated_tools: bool
    """

    _validation = {
        "disable_user_defined_identifiers_for_calibrated_tools": {"required": True},
        "disable_user_defined_identifiers_for_uncalibrated_tools": {"required": True},
    }

    _attribute_map = {
        "disable_user_defined_identifiers_for_calibrated_tools": {
            "key": "disableUserDefinedIdentifiersForCalibratedTools",
            "type": "bool",
        },
        "disable_user_defined_identifiers_for_uncalibrated_tools": {
            "key": "disableUserDefinedIdentifiersForUncalibratedTools",
            "type": "bool",
        },
    }

    def __init__(
        self,
        *,
        disable_user_defined_identifiers_for_calibrated_tools: bool,
        disable_user_defined_identifiers_for_uncalibrated_tools: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword disable_user_defined_identifiers_for_calibrated_tools: Required.
        :paramtype disable_user_defined_identifiers_for_calibrated_tools: bool
        :keyword disable_user_defined_identifiers_for_uncalibrated_tools: Required.
        :paramtype disable_user_defined_identifiers_for_uncalibrated_tools: bool
        """
        super().__init__(**kwargs)
        self.disable_user_defined_identifiers_for_calibrated_tools = (
            disable_user_defined_identifiers_for_calibrated_tools
        )
        self.disable_user_defined_identifiers_for_uncalibrated_tools = (
            disable_user_defined_identifiers_for_uncalibrated_tools
        )


class MeasuringToolSubTypeDto(_serialization.Model):
    """MeasuringToolSubTypeDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar max_number_of_usages_between_calibration:
    :vartype max_number_of_usages_between_calibration: int
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "max_number_of_usages_between_calibration": {"key": "maxNumberOfUsagesBetweenCalibration", "type": "int"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        calibration_interval: Optional[int] = None,
        max_number_of_usages_between_calibration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword max_number_of_usages_between_calibration:
        :paramtype max_number_of_usages_between_calibration: int
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.calibration_interval = calibration_interval
        self.max_number_of_usages_between_calibration = max_number_of_usages_between_calibration


class MeasuringToolTypeDto(_serialization.Model):
    """MeasuringToolTypeDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar max_number_of_usages_between_calibration:
    :vartype max_number_of_usages_between_calibration: int
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "max_number_of_usages_between_calibration": {"key": "maxNumberOfUsagesBetweenCalibration", "type": "int"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        calibration_interval: Optional[int] = None,
        max_number_of_usages_between_calibration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword max_number_of_usages_between_calibration:
        :paramtype max_number_of_usages_between_calibration: int
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.calibration_interval = calibration_interval
        self.max_number_of_usages_between_calibration = max_number_of_usages_between_calibration


class MeasuringToolWhitelistDto(_serialization.Model):
    """MeasuringToolWhitelistDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar value: Required.
    :vartype value: str
    :ivar description: Required.
    :vartype description: str
    """

    _validation = {
        "id": {"required": True},
        "value": {"required": True, "min_length": 1},
        "description": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self, *, id: str, value: str, description: str, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword value: Required.
        :paramtype value: str
        :keyword description: Required.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.value = value
        self.description = description


class MeasuringToolWhitelistDtoPagedData(_serialization.Model):
    """MeasuringToolWhitelistDtoPagedData.

    All required parameters must be populated in order to send to server.

    :ivar page_number: Required.
    :vartype page_number: int
    :ivar page_size: Required.
    :vartype page_size: int
    :ivar total_number_of_pages: Required.
    :vartype total_number_of_pages: int
    :ivar total_number_of_records: Required.
    :vartype total_number_of_records: int
    :ivar next_page_url:
    :vartype next_page_url: str
    :ivar value: Required.
    :vartype value: list[~ignos.api.client.models.MeasuringToolWhitelistDto]
    """

    _validation = {
        "page_number": {"required": True},
        "page_size": {"required": True},
        "total_number_of_pages": {"required": True},
        "total_number_of_records": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "page_number": {"key": "pageNumber", "type": "int"},
        "page_size": {"key": "pageSize", "type": "int"},
        "total_number_of_pages": {"key": "totalNumberOfPages", "type": "int"},
        "total_number_of_records": {"key": "totalNumberOfRecords", "type": "int"},
        "next_page_url": {"key": "nextPageUrl", "type": "str"},
        "value": {"key": "value", "type": "[MeasuringToolWhitelistDto]"},
    }

    def __init__(
        self,
        *,
        page_number: int,
        page_size: int,
        total_number_of_pages: int,
        total_number_of_records: int,
        value: List["_models.MeasuringToolWhitelistDto"],
        next_page_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword page_number: Required.
        :paramtype page_number: int
        :keyword page_size: Required.
        :paramtype page_size: int
        :keyword total_number_of_pages: Required.
        :paramtype total_number_of_pages: int
        :keyword total_number_of_records: Required.
        :paramtype total_number_of_records: int
        :keyword next_page_url:
        :paramtype next_page_url: str
        :keyword value: Required.
        :paramtype value: list[~ignos.api.client.models.MeasuringToolWhitelistDto]
        """
        super().__init__(**kwargs)
        self.page_number = page_number
        self.page_size = page_size
        self.total_number_of_pages = total_number_of_pages
        self.total_number_of_records = total_number_of_records
        self.next_page_url = next_page_url
        self.value = value


class MeasuringUnitDto(_serialization.Model):
    """MeasuringUnitDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar unit: Required.
    :vartype unit: str
    """

    _validation = {
        "id": {"required": True},
        "unit": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
    }

    def __init__(self, *, id: str, unit: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword unit: Required.
        :paramtype unit: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.unit = unit


class MesLinkDto(_serialization.Model):
    """MesLinkDto.

    :ivar id:
    :vartype id: str
    :ivar uri:
    :vartype uri: str
    :ivar name:
    :vartype name: str
    :ivar type: Known values are: "Static", "Operation", and "WorkOrder".
    :vartype type: str or ~ignos.api.client.models.MesLinkTypeDto
    :ivar company_id:
    :vartype company_id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "uri": {"key": "uri", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        uri: Optional[str] = None,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.MesLinkTypeDto"]] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword uri:
        :paramtype uri: str
        :keyword name:
        :paramtype name: str
        :keyword type: Known values are: "Static", "Operation", and "WorkOrder".
        :paramtype type: str or ~ignos.api.client.models.MesLinkTypeDto
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.uri = uri
        self.name = name
        self.type = type
        self.company_id = company_id


class MrbCompanySettingsDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbCompanySettingsDto.

    All required parameters must be populated in order to send to server.

    :ivar stamp_with_lot: Required.
    :vartype stamp_with_lot: bool
    :ivar stamp_with_vendor_batch: Required.
    :vartype stamp_with_vendor_batch: bool
    :ivar hide_lot_info: Required.
    :vartype hide_lot_info: bool
    :ivar hide_vendor_batch_info: Required.
    :vartype hide_vendor_batch_info: bool
    :ivar lot_label:
    :vartype lot_label: str
    :ivar vendor_batch_label:
    :vartype vendor_batch_label: str
    :ivar co_c_statement:
    :vartype co_c_statement: str
    :ivar address_lines: Required.
    :vartype address_lines: list[str]
    :ivar sequence_format:
    :vartype sequence_format: str
    :ivar batch_sequence_prefix:
    :vartype batch_sequence_prefix: str
    :ivar batch_sequence_format:
    :vartype batch_sequence_format: str
    :ivar detailed_transactions_missing_in_erp: Required.
    :vartype detailed_transactions_missing_in_erp: bool
    :ivar allow_material_replacement_on_consumptions: Required.
    :vartype allow_material_replacement_on_consumptions: bool
    :ivar non_splittable_trace_units: Required.
    :vartype non_splittable_trace_units: list[str]
    """

    _validation = {
        "stamp_with_lot": {"required": True},
        "stamp_with_vendor_batch": {"required": True},
        "hide_lot_info": {"required": True},
        "hide_vendor_batch_info": {"required": True},
        "address_lines": {"required": True},
        "detailed_transactions_missing_in_erp": {"required": True},
        "allow_material_replacement_on_consumptions": {"required": True},
        "non_splittable_trace_units": {"required": True},
    }

    _attribute_map = {
        "stamp_with_lot": {"key": "stampWithLot", "type": "bool"},
        "stamp_with_vendor_batch": {"key": "stampWithVendorBatch", "type": "bool"},
        "hide_lot_info": {"key": "hideLotInfo", "type": "bool"},
        "hide_vendor_batch_info": {"key": "hideVendorBatchInfo", "type": "bool"},
        "lot_label": {"key": "lotLabel", "type": "str"},
        "vendor_batch_label": {"key": "vendorBatchLabel", "type": "str"},
        "co_c_statement": {"key": "coCStatement", "type": "str"},
        "address_lines": {"key": "addressLines", "type": "[str]"},
        "sequence_format": {"key": "sequenceFormat", "type": "str"},
        "batch_sequence_prefix": {"key": "batchSequencePrefix", "type": "str"},
        "batch_sequence_format": {"key": "batchSequenceFormat", "type": "str"},
        "detailed_transactions_missing_in_erp": {"key": "detailedTransactionsMissingInErp", "type": "bool"},
        "allow_material_replacement_on_consumptions": {"key": "allowMaterialReplacementOnConsumptions", "type": "bool"},
        "non_splittable_trace_units": {"key": "nonSplittableTraceUnits", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        stamp_with_lot: bool,
        stamp_with_vendor_batch: bool,
        hide_lot_info: bool,
        hide_vendor_batch_info: bool,
        address_lines: List[str],
        detailed_transactions_missing_in_erp: bool,
        allow_material_replacement_on_consumptions: bool,
        non_splittable_trace_units: List[str],
        lot_label: Optional[str] = None,
        vendor_batch_label: Optional[str] = None,
        co_c_statement: Optional[str] = None,
        sequence_format: Optional[str] = None,
        batch_sequence_prefix: Optional[str] = None,
        batch_sequence_format: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword stamp_with_lot: Required.
        :paramtype stamp_with_lot: bool
        :keyword stamp_with_vendor_batch: Required.
        :paramtype stamp_with_vendor_batch: bool
        :keyword hide_lot_info: Required.
        :paramtype hide_lot_info: bool
        :keyword hide_vendor_batch_info: Required.
        :paramtype hide_vendor_batch_info: bool
        :keyword lot_label:
        :paramtype lot_label: str
        :keyword vendor_batch_label:
        :paramtype vendor_batch_label: str
        :keyword co_c_statement:
        :paramtype co_c_statement: str
        :keyword address_lines: Required.
        :paramtype address_lines: list[str]
        :keyword sequence_format:
        :paramtype sequence_format: str
        :keyword batch_sequence_prefix:
        :paramtype batch_sequence_prefix: str
        :keyword batch_sequence_format:
        :paramtype batch_sequence_format: str
        :keyword detailed_transactions_missing_in_erp: Required.
        :paramtype detailed_transactions_missing_in_erp: bool
        :keyword allow_material_replacement_on_consumptions: Required.
        :paramtype allow_material_replacement_on_consumptions: bool
        :keyword non_splittable_trace_units: Required.
        :paramtype non_splittable_trace_units: list[str]
        """
        super().__init__(**kwargs)
        self.stamp_with_lot = stamp_with_lot
        self.stamp_with_vendor_batch = stamp_with_vendor_batch
        self.hide_lot_info = hide_lot_info
        self.hide_vendor_batch_info = hide_vendor_batch_info
        self.lot_label = lot_label
        self.vendor_batch_label = vendor_batch_label
        self.co_c_statement = co_c_statement
        self.address_lines = address_lines
        self.sequence_format = sequence_format
        self.batch_sequence_prefix = batch_sequence_prefix
        self.batch_sequence_format = batch_sequence_format
        self.detailed_transactions_missing_in_erp = detailed_transactions_missing_in_erp
        self.allow_material_replacement_on_consumptions = allow_material_replacement_on_consumptions
        self.non_splittable_trace_units = non_splittable_trace_units


class MrbContentDto(_serialization.Model):
    """MrbContentDto.

    All required parameters must be populated in order to send to server.

    :ivar customer_order: Required.
    :vartype customer_order: str
    :ivar customer_order_line: Required.
    :vartype customer_order_line: int
    :ivar trace_numbers: Required.
    :vartype trace_numbers: list[~ignos.api.client.models.CustomerOrderLineTraceItemDto]
    :ivar contents: Required.
    :vartype contents: list[~ignos.api.client.models.MrbContentItemDto]
    :ivar extra_documents: Required.
    :vartype extra_documents: list[~ignos.api.client.models.MrbExtraDocumentDto]
    """

    _validation = {
        "customer_order": {"required": True, "min_length": 1},
        "customer_order_line": {"required": True},
        "trace_numbers": {"required": True},
        "contents": {"required": True},
        "extra_documents": {"required": True},
    }

    _attribute_map = {
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_order_line": {"key": "customerOrderLine", "type": "int"},
        "trace_numbers": {"key": "traceNumbers", "type": "[CustomerOrderLineTraceItemDto]"},
        "contents": {"key": "contents", "type": "[MrbContentItemDto]"},
        "extra_documents": {"key": "extraDocuments", "type": "[MrbExtraDocumentDto]"},
    }

    def __init__(
        self,
        *,
        customer_order: str,
        customer_order_line: int,
        trace_numbers: List["_models.CustomerOrderLineTraceItemDto"],
        contents: List["_models.MrbContentItemDto"],
        extra_documents: List["_models.MrbExtraDocumentDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_order: Required.
        :paramtype customer_order: str
        :keyword customer_order_line: Required.
        :paramtype customer_order_line: int
        :keyword trace_numbers: Required.
        :paramtype trace_numbers: list[~ignos.api.client.models.CustomerOrderLineTraceItemDto]
        :keyword contents: Required.
        :paramtype contents: list[~ignos.api.client.models.MrbContentItemDto]
        :keyword extra_documents: Required.
        :paramtype extra_documents: list[~ignos.api.client.models.MrbExtraDocumentDto]
        """
        super().__init__(**kwargs)
        self.customer_order = customer_order
        self.customer_order_line = customer_order_line
        self.trace_numbers = trace_numbers
        self.contents = contents
        self.extra_documents = extra_documents


class MrbContentItemDto(_serialization.Model):
    """MrbContentItemDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar label: Required.
    :vartype label: str
    :ivar contents: Required.
    :vartype contents: list[~ignos.api.client.models.MrbContentItemDto]
    :ivar included: Required.
    :vartype included: bool
    :ivar document_type: Required.
    :vartype document_type: str
    :ivar template_page_number:
    :vartype template_page_number: int
    :ivar url: Required.
    :vartype url: str
    :ivar element_type: Required. Known values are: "MrbTemplatePage", "MrbGeneratedDocuments",
     "MrbChapter", "MrbChapterDocuments", and "MrbProduct".
    :vartype element_type: str or ~ignos.api.client.models.MrbElementType
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "label": {"required": True, "min_length": 1},
        "contents": {"required": True},
        "included": {"required": True},
        "document_type": {"required": True, "min_length": 1},
        "url": {"required": True, "min_length": 1},
        "element_type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "label": {"key": "label", "type": "str"},
        "contents": {"key": "contents", "type": "[MrbContentItemDto]"},
        "included": {"key": "included", "type": "bool"},
        "document_type": {"key": "documentType", "type": "str"},
        "template_page_number": {"key": "templatePageNumber", "type": "int"},
        "url": {"key": "url", "type": "str"},
        "element_type": {"key": "elementType", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        label: str,
        contents: List["_models.MrbContentItemDto"],
        included: bool,
        document_type: str,
        url: str,
        element_type: Union[str, "_models.MrbElementType"],
        template_page_number: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword label: Required.
        :paramtype label: str
        :keyword contents: Required.
        :paramtype contents: list[~ignos.api.client.models.MrbContentItemDto]
        :keyword included: Required.
        :paramtype included: bool
        :keyword document_type: Required.
        :paramtype document_type: str
        :keyword template_page_number:
        :paramtype template_page_number: int
        :keyword url: Required.
        :paramtype url: str
        :keyword element_type: Required. Known values are: "MrbTemplatePage", "MrbGeneratedDocuments",
         "MrbChapter", "MrbChapterDocuments", and "MrbProduct".
        :paramtype element_type: str or ~ignos.api.client.models.MrbElementType
        """
        super().__init__(**kwargs)
        self.id = id
        self.label = label
        self.contents = contents
        self.included = included
        self.document_type = document_type
        self.template_page_number = template_page_number
        self.url = url
        self.element_type = element_type


class MrbExtraDocumentDto(_serialization.Model):
    """MrbExtraDocumentDto.

    All required parameters must be populated in order to send to server.

    :ivar label: Required.
    :vartype label: str
    :ivar document_id: Required.
    :vartype document_id: str
    :ivar revision_id: Required.
    :vartype revision_id: int
    :ivar url: Required.
    :vartype url: str
    :ivar document_type: Required.
    :vartype document_type: str
    """

    _validation = {
        "label": {"required": True, "min_length": 1},
        "document_id": {"required": True, "min_length": 1},
        "revision_id": {"required": True},
        "url": {"required": True, "min_length": 1},
        "document_type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "label": {"key": "label", "type": "str"},
        "document_id": {"key": "documentId", "type": "str"},
        "revision_id": {"key": "revisionId", "type": "int"},
        "url": {"key": "url", "type": "str"},
        "document_type": {"key": "documentType", "type": "str"},
    }

    def __init__(
        self, *, label: str, document_id: str, revision_id: int, url: str, document_type: str, **kwargs: Any
    ) -> None:
        """
        :keyword label: Required.
        :paramtype label: str
        :keyword document_id: Required.
        :paramtype document_id: str
        :keyword revision_id: Required.
        :paramtype revision_id: int
        :keyword url: Required.
        :paramtype url: str
        :keyword document_type: Required.
        :paramtype document_type: str
        """
        super().__init__(**kwargs)
        self.label = label
        self.document_id = document_id
        self.revision_id = revision_id
        self.url = url
        self.document_type = document_type


class MrbInstanceDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbInstanceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar title:
    :vartype title: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar customer_order: Required.
    :vartype customer_order: str
    :ivar customer_order_line: Required.
    :vartype customer_order_line: int
    :ivar external_order_number:
    :vartype external_order_number: str
    :ivar traces: Required.
    :vartype traces: list[~ignos.api.client.models.CustomerOrderLineTraceItemDto]
    :ivar mrb_template_id:
    :vartype mrb_template_id: str
    :ivar mrb_template_name:
    :vartype mrb_template_name: str
    :ivar mrb_job_id:
    :vartype mrb_job_id: str
    :ivar mrb_export_job_id:
    :vartype mrb_export_job_id: str
    :ivar status:
    :vartype status: ~ignos.api.client.models.MrbStatusDto
    :ivar latest_revision:
    :vartype latest_revision: ~ignos.api.client.models.MrbInstanceRevisionDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "customer_order": {"required": True, "min_length": 1},
        "customer_order_line": {"required": True},
        "traces": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_order_line": {"key": "customerOrderLine", "type": "int"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
        "traces": {"key": "traces", "type": "[CustomerOrderLineTraceItemDto]"},
        "mrb_template_id": {"key": "mrbTemplateId", "type": "str"},
        "mrb_template_name": {"key": "mrbTemplateName", "type": "str"},
        "mrb_job_id": {"key": "mrbJobId", "type": "str"},
        "mrb_export_job_id": {"key": "mrbExportJobId", "type": "str"},
        "status": {"key": "status", "type": "MrbStatusDto"},
        "latest_revision": {"key": "latestRevision", "type": "MrbInstanceRevisionDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        customer_order: str,
        customer_order_line: int,
        traces: List["_models.CustomerOrderLineTraceItemDto"],
        title: Optional[str] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        external_order_number: Optional[str] = None,
        mrb_template_id: Optional[str] = None,
        mrb_template_name: Optional[str] = None,
        mrb_job_id: Optional[str] = None,
        mrb_export_job_id: Optional[str] = None,
        status: Optional["_models.MrbStatusDto"] = None,
        latest_revision: Optional["_models.MrbInstanceRevisionDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword title:
        :paramtype title: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword customer_order: Required.
        :paramtype customer_order: str
        :keyword customer_order_line: Required.
        :paramtype customer_order_line: int
        :keyword external_order_number:
        :paramtype external_order_number: str
        :keyword traces: Required.
        :paramtype traces: list[~ignos.api.client.models.CustomerOrderLineTraceItemDto]
        :keyword mrb_template_id:
        :paramtype mrb_template_id: str
        :keyword mrb_template_name:
        :paramtype mrb_template_name: str
        :keyword mrb_job_id:
        :paramtype mrb_job_id: str
        :keyword mrb_export_job_id:
        :paramtype mrb_export_job_id: str
        :keyword status:
        :paramtype status: ~ignos.api.client.models.MrbStatusDto
        :keyword latest_revision:
        :paramtype latest_revision: ~ignos.api.client.models.MrbInstanceRevisionDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.title = title
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_order = customer_order
        self.customer_order_line = customer_order_line
        self.external_order_number = external_order_number
        self.traces = traces
        self.mrb_template_id = mrb_template_id
        self.mrb_template_name = mrb_template_name
        self.mrb_job_id = mrb_job_id
        self.mrb_export_job_id = mrb_export_job_id
        self.status = status
        self.latest_revision = latest_revision


class MrbInstanceJobDto(_serialization.Model):
    """MrbInstanceJobDto.

    All required parameters must be populated in order to send to server.

    :ivar job_id: Required.
    :vartype job_id: str
    :ivar mrb_instance_id: Required.
    :vartype mrb_instance_id: str
    :ivar mrb_revision_id: Required.
    :vartype mrb_revision_id: int
    :ivar last_update: Required.
    :vartype last_update: ~datetime.datetime
    :ivar status: Required. Known values are: "NotStarted", "Started", "Completed", and "Failed".
    :vartype status: str or ~ignos.api.client.models.MrbJobStatus
    :ivar queue_number: Required.
    :vartype queue_number: int
    """

    _validation = {
        "job_id": {"required": True, "min_length": 1},
        "mrb_instance_id": {"required": True, "min_length": 1},
        "mrb_revision_id": {"required": True},
        "last_update": {"required": True},
        "status": {"required": True},
        "queue_number": {"required": True},
    }

    _attribute_map = {
        "job_id": {"key": "jobId", "type": "str"},
        "mrb_instance_id": {"key": "mrbInstanceId", "type": "str"},
        "mrb_revision_id": {"key": "mrbRevisionId", "type": "int"},
        "last_update": {"key": "lastUpdate", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "queue_number": {"key": "queueNumber", "type": "int"},
    }

    def __init__(
        self,
        *,
        job_id: str,
        mrb_instance_id: str,
        mrb_revision_id: int,
        last_update: datetime.datetime,
        status: Union[str, "_models.MrbJobStatus"],
        queue_number: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword mrb_instance_id: Required.
        :paramtype mrb_instance_id: str
        :keyword mrb_revision_id: Required.
        :paramtype mrb_revision_id: int
        :keyword last_update: Required.
        :paramtype last_update: ~datetime.datetime
        :keyword status: Required. Known values are: "NotStarted", "Started", "Completed", and
         "Failed".
        :paramtype status: str or ~ignos.api.client.models.MrbJobStatus
        :keyword queue_number: Required.
        :paramtype queue_number: int
        """
        super().__init__(**kwargs)
        self.job_id = job_id
        self.mrb_instance_id = mrb_instance_id
        self.mrb_revision_id = mrb_revision_id
        self.last_update = last_update
        self.status = status
        self.queue_number = queue_number


class MrbInstanceReportDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbInstanceReportDto.

    All required parameters must be populated in order to send to server.

    :ivar mrb_instance_id: Required.
    :vartype mrb_instance_id: str
    :ivar revision_id: Required.
    :vartype revision_id: int
    :ivar customer_id: Required.
    :vartype customer_id: str
    :ivar customer_order: Required.
    :vartype customer_order: str
    :ivar customer_order_line: Required.
    :vartype customer_order_line: int
    :ivar customer_name:
    :vartype customer_name: str
    :ivar external_order_number:
    :vartype external_order_number: str
    :ivar title: Required.
    :vartype title: str
    :ivar number_of_pages: Required.
    :vartype number_of_pages: int
    :ivar number_of_documents: Required.
    :vartype number_of_documents: int
    :ivar revision:
    :vartype revision: str
    :ivar requested: Required.
    :vartype requested: ~datetime.datetime
    :ivar finished: Required.
    :vartype finished: ~datetime.datetime
    :ivar requested_by: Required.
    :vartype requested_by: ~ignos.api.client.models.UserDto
    """

    _validation = {
        "mrb_instance_id": {"required": True, "min_length": 1},
        "revision_id": {"required": True},
        "customer_id": {"required": True, "min_length": 1},
        "customer_order": {"required": True, "min_length": 1},
        "customer_order_line": {"required": True},
        "title": {"required": True, "min_length": 1},
        "number_of_pages": {"required": True},
        "number_of_documents": {"required": True},
        "requested": {"required": True},
        "finished": {"required": True},
        "requested_by": {"required": True},
    }

    _attribute_map = {
        "mrb_instance_id": {"key": "mrbInstanceId", "type": "str"},
        "revision_id": {"key": "revisionId", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_order_line": {"key": "customerOrderLine", "type": "int"},
        "customer_name": {"key": "customerName", "type": "str"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "number_of_pages": {"key": "numberOfPages", "type": "int"},
        "number_of_documents": {"key": "numberOfDocuments", "type": "int"},
        "revision": {"key": "revision", "type": "str"},
        "requested": {"key": "requested", "type": "iso-8601"},
        "finished": {"key": "finished", "type": "iso-8601"},
        "requested_by": {"key": "requestedBy", "type": "UserDto"},
    }

    def __init__(
        self,
        *,
        mrb_instance_id: str,
        revision_id: int,
        customer_id: str,
        customer_order: str,
        customer_order_line: int,
        title: str,
        number_of_pages: int,
        number_of_documents: int,
        requested: datetime.datetime,
        finished: datetime.datetime,
        requested_by: "_models.UserDto",
        customer_name: Optional[str] = None,
        external_order_number: Optional[str] = None,
        revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword mrb_instance_id: Required.
        :paramtype mrb_instance_id: str
        :keyword revision_id: Required.
        :paramtype revision_id: int
        :keyword customer_id: Required.
        :paramtype customer_id: str
        :keyword customer_order: Required.
        :paramtype customer_order: str
        :keyword customer_order_line: Required.
        :paramtype customer_order_line: int
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword external_order_number:
        :paramtype external_order_number: str
        :keyword title: Required.
        :paramtype title: str
        :keyword number_of_pages: Required.
        :paramtype number_of_pages: int
        :keyword number_of_documents: Required.
        :paramtype number_of_documents: int
        :keyword revision:
        :paramtype revision: str
        :keyword requested: Required.
        :paramtype requested: ~datetime.datetime
        :keyword finished: Required.
        :paramtype finished: ~datetime.datetime
        :keyword requested_by: Required.
        :paramtype requested_by: ~ignos.api.client.models.UserDto
        """
        super().__init__(**kwargs)
        self.mrb_instance_id = mrb_instance_id
        self.revision_id = revision_id
        self.customer_id = customer_id
        self.customer_order = customer_order
        self.customer_order_line = customer_order_line
        self.customer_name = customer_name
        self.external_order_number = external_order_number
        self.title = title
        self.number_of_pages = number_of_pages
        self.number_of_documents = number_of_documents
        self.revision = revision
        self.requested = requested
        self.finished = finished
        self.requested_by = requested_by


class MrbInstanceReportDtoPagedResult(_serialization.Model):
    """MrbInstanceReportDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.MrbInstanceReportDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[MrbInstanceReportDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.MrbInstanceReportDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.MrbInstanceReportDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class MrbInstanceRevisionDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbInstanceRevisionDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar revision:
    :vartype revision: str
    :ivar number_of_pages: Required.
    :vartype number_of_pages: int
    :ivar number_of_documents: Required.
    :vartype number_of_documents: int
    :ivar requested: Required.
    :vartype requested: ~datetime.datetime
    :ivar finished:
    :vartype finished: ~datetime.datetime
    :ivar requested_by:
    :vartype requested_by: ~ignos.api.client.models.UserDto
    :ivar url:
    :vartype url: str
    :ivar status: Required. Known values are: "None", "Draft", "ForInternalApproval",
     "InternalRejected", "Approved", and "Voided".
    :vartype status: str or ~ignos.api.client.models.DocumentStatus
    :ivar status_date: Required.
    :vartype status_date: ~datetime.datetime
    :ivar sent_to_customer_info:
    :vartype sent_to_customer_info: ~ignos.api.client.models.MrbSentInfoDto
    """

    _validation = {
        "id": {"required": True},
        "number_of_pages": {"required": True},
        "number_of_documents": {"required": True},
        "requested": {"required": True},
        "status": {"required": True},
        "status_date": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "revision": {"key": "revision", "type": "str"},
        "number_of_pages": {"key": "numberOfPages", "type": "int"},
        "number_of_documents": {"key": "numberOfDocuments", "type": "int"},
        "requested": {"key": "requested", "type": "iso-8601"},
        "finished": {"key": "finished", "type": "iso-8601"},
        "requested_by": {"key": "requestedBy", "type": "UserDto"},
        "url": {"key": "url", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "status_date": {"key": "statusDate", "type": "iso-8601"},
        "sent_to_customer_info": {"key": "sentToCustomerInfo", "type": "MrbSentInfoDto"},
    }

    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        number_of_pages: int,
        number_of_documents: int,
        requested: datetime.datetime,
        status: Union[str, "_models.DocumentStatus"],
        status_date: datetime.datetime,
        revision: Optional[str] = None,
        finished: Optional[datetime.datetime] = None,
        requested_by: Optional["_models.UserDto"] = None,
        url: Optional[str] = None,
        sent_to_customer_info: Optional["_models.MrbSentInfoDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword revision:
        :paramtype revision: str
        :keyword number_of_pages: Required.
        :paramtype number_of_pages: int
        :keyword number_of_documents: Required.
        :paramtype number_of_documents: int
        :keyword requested: Required.
        :paramtype requested: ~datetime.datetime
        :keyword finished:
        :paramtype finished: ~datetime.datetime
        :keyword requested_by:
        :paramtype requested_by: ~ignos.api.client.models.UserDto
        :keyword url:
        :paramtype url: str
        :keyword status: Required. Known values are: "None", "Draft", "ForInternalApproval",
         "InternalRejected", "Approved", and "Voided".
        :paramtype status: str or ~ignos.api.client.models.DocumentStatus
        :keyword status_date: Required.
        :paramtype status_date: ~datetime.datetime
        :keyword sent_to_customer_info:
        :paramtype sent_to_customer_info: ~ignos.api.client.models.MrbSentInfoDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.revision = revision
        self.number_of_pages = number_of_pages
        self.number_of_documents = number_of_documents
        self.requested = requested
        self.finished = finished
        self.requested_by = requested_by
        self.url = url
        self.status = status
        self.status_date = status_date
        self.sent_to_customer_info = sent_to_customer_info


class MrbPdfExportJobDto(_serialization.Model):
    """MrbPdfExportJobDto.

    All required parameters must be populated in order to send to server.

    :ivar job_id: Required.
    :vartype job_id: str
    :ivar mrb_instance_id: Required.
    :vartype mrb_instance_id: str
    :ivar mrb_revision_id: Required.
    :vartype mrb_revision_id: int
    :ivar last_update: Required.
    :vartype last_update: ~datetime.datetime
    :ivar status: Required. Known values are: "NotStarted", "Started", "Completed", and "Failed".
    :vartype status: str or ~ignos.api.client.models.MrbJobStatus
    :ivar queue_number: Required.
    :vartype queue_number: int
    """

    _validation = {
        "job_id": {"required": True, "min_length": 1},
        "mrb_instance_id": {"required": True, "min_length": 1},
        "mrb_revision_id": {"required": True},
        "last_update": {"required": True},
        "status": {"required": True},
        "queue_number": {"required": True},
    }

    _attribute_map = {
        "job_id": {"key": "jobId", "type": "str"},
        "mrb_instance_id": {"key": "mrbInstanceId", "type": "str"},
        "mrb_revision_id": {"key": "mrbRevisionId", "type": "int"},
        "last_update": {"key": "lastUpdate", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "queue_number": {"key": "queueNumber", "type": "int"},
    }

    def __init__(
        self,
        *,
        job_id: str,
        mrb_instance_id: str,
        mrb_revision_id: int,
        last_update: datetime.datetime,
        status: Union[str, "_models.MrbJobStatus"],
        queue_number: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword mrb_instance_id: Required.
        :paramtype mrb_instance_id: str
        :keyword mrb_revision_id: Required.
        :paramtype mrb_revision_id: int
        :keyword last_update: Required.
        :paramtype last_update: ~datetime.datetime
        :keyword status: Required. Known values are: "NotStarted", "Started", "Completed", and
         "Failed".
        :paramtype status: str or ~ignos.api.client.models.MrbJobStatus
        :keyword queue_number: Required.
        :paramtype queue_number: int
        """
        super().__init__(**kwargs)
        self.job_id = job_id
        self.mrb_instance_id = mrb_instance_id
        self.mrb_revision_id = mrb_revision_id
        self.last_update = last_update
        self.status = status
        self.queue_number = queue_number


class MrbSentInfoDto(_serialization.Model):
    """MrbSentInfoDto.

    All required parameters must be populated in order to send to server.

    :ivar sent_time: Required.
    :vartype sent_time: ~datetime.datetime
    :ivar sent_by: Required.
    :vartype sent_by: ~ignos.api.client.models.UserDto
    """

    _validation = {
        "sent_time": {"required": True},
        "sent_by": {"required": True},
    }

    _attribute_map = {
        "sent_time": {"key": "sentTime", "type": "iso-8601"},
        "sent_by": {"key": "sentBy", "type": "UserDto"},
    }

    def __init__(self, *, sent_time: datetime.datetime, sent_by: "_models.UserDto", **kwargs: Any) -> None:
        """
        :keyword sent_time: Required.
        :paramtype sent_time: ~datetime.datetime
        :keyword sent_by: Required.
        :paramtype sent_by: ~ignos.api.client.models.UserDto
        """
        super().__init__(**kwargs)
        self.sent_time = sent_time
        self.sent_by = sent_by


class MrbStatusDto(_serialization.Model):
    """MrbStatusDto.

    All required parameters must be populated in order to send to server.

    :ivar status_message:
    :vartype status_message: str
    :ivar status: Required. Known values are: "NotStarted", "Started", "Completed", and "Failed".
    :vartype status: str or ~ignos.api.client.models.MrbJobStatus
    :ivar status_time: Required.
    :vartype status_time: ~datetime.datetime
    """

    _validation = {
        "status": {"required": True},
        "status_time": {"required": True},
    }

    _attribute_map = {
        "status_message": {"key": "statusMessage", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "status_time": {"key": "statusTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.MrbJobStatus"],
        status_time: datetime.datetime,
        status_message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status_message:
        :paramtype status_message: str
        :keyword status: Required. Known values are: "NotStarted", "Started", "Completed", and
         "Failed".
        :paramtype status: str or ~ignos.api.client.models.MrbJobStatus
        :keyword status_time: Required.
        :paramtype status_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.status_message = status_message
        self.status = status
        self.status_time = status_time


class MrbTemplateDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbTemplateDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar title: Required.
    :vartype title: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar customer_group_id:
    :vartype customer_group_id: str
    :ivar customer_group_name:
    :vartype customer_group_name: str
    :ivar url:
    :vartype url: str
    :ivar shared_access_uri:
    :vartype shared_access_uri: str
    :ivar content_indicator:
    :vartype content_indicator: str
    :ivar no_content_indicator:
    :vartype no_content_indicator: str
    :ivar elements: Required.
    :vartype elements: list[~ignos.api.client.models.MrbTemplateElementDto]
    :ivar table_of_contents:
    :vartype table_of_contents: ~ignos.api.client.models.MrbTemplateTableOfContentsDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "title": {"required": True, "min_length": 1},
        "elements": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "customer_group_id": {"key": "customerGroupId", "type": "str"},
        "customer_group_name": {"key": "customerGroupName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "shared_access_uri": {"key": "sharedAccessUri", "type": "str"},
        "content_indicator": {"key": "contentIndicator", "type": "str"},
        "no_content_indicator": {"key": "noContentIndicator", "type": "str"},
        "elements": {"key": "elements", "type": "[MrbTemplateElementDto]"},
        "table_of_contents": {"key": "tableOfContents", "type": "MrbTemplateTableOfContentsDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        title: str,
        elements: List["_models.MrbTemplateElementDto"],
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_group_id: Optional[str] = None,
        customer_group_name: Optional[str] = None,
        url: Optional[str] = None,
        shared_access_uri: Optional[str] = None,
        content_indicator: Optional[str] = None,
        no_content_indicator: Optional[str] = None,
        table_of_contents: Optional["_models.MrbTemplateTableOfContentsDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword title: Required.
        :paramtype title: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword customer_group_id:
        :paramtype customer_group_id: str
        :keyword customer_group_name:
        :paramtype customer_group_name: str
        :keyword url:
        :paramtype url: str
        :keyword shared_access_uri:
        :paramtype shared_access_uri: str
        :keyword content_indicator:
        :paramtype content_indicator: str
        :keyword no_content_indicator:
        :paramtype no_content_indicator: str
        :keyword elements: Required.
        :paramtype elements: list[~ignos.api.client.models.MrbTemplateElementDto]
        :keyword table_of_contents:
        :paramtype table_of_contents: ~ignos.api.client.models.MrbTemplateTableOfContentsDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.title = title
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_group_id = customer_group_id
        self.customer_group_name = customer_group_name
        self.url = url
        self.shared_access_uri = shared_access_uri
        self.content_indicator = content_indicator
        self.no_content_indicator = no_content_indicator
        self.elements = elements
        self.table_of_contents = table_of_contents


class MrbTemplateElementDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbTemplateElementDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar included_in_table_of_contents: Required.
    :vartype included_in_table_of_contents: bool
    :ivar document_index:
    :vartype document_index: str
    :ivar chapter_index:
    :vartype chapter_index: str
    :ivar bookmark_title:
    :vartype bookmark_title: str
    :ivar elements: Required.
    :vartype elements: list[~ignos.api.client.models.MrbTemplateElementDto]
    :ivar empty_chapter_strategy: Required. Known values are: 0, 1, and 2.
    :vartype empty_chapter_strategy: int or ~ignos.api.client.models.EmptyChapterStrategy
    :ivar template_page_number:
    :vartype template_page_number: int
    :ivar generated_document_types: Required.
    :vartype generated_document_types: list[str]
    :ivar document_types: Required.
    :vartype document_types: list[str]
    :ivar separator_format_title:
    :vartype separator_format_title: str
    :ivar child_document_bookmark_title:
    :vartype child_document_bookmark_title: str
    :ivar element_type: Required. Known values are: "MrbTemplatePage", "MrbGeneratedDocuments",
     "MrbChapter", "MrbChapterDocuments", and "MrbProduct".
    :vartype element_type: str or ~ignos.api.client.models.MrbElementType
    :ivar index_data:
    :vartype index_data: ~ignos.api.client.models.MrbTemplateElementIndexDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "included_in_table_of_contents": {"required": True},
        "elements": {"required": True},
        "empty_chapter_strategy": {"required": True},
        "generated_document_types": {"required": True},
        "document_types": {"required": True},
        "element_type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "included_in_table_of_contents": {"key": "includedInTableOfContents", "type": "bool"},
        "document_index": {"key": "documentIndex", "type": "str"},
        "chapter_index": {"key": "chapterIndex", "type": "str"},
        "bookmark_title": {"key": "bookmarkTitle", "type": "str"},
        "elements": {"key": "elements", "type": "[MrbTemplateElementDto]"},
        "empty_chapter_strategy": {"key": "emptyChapterStrategy", "type": "int"},
        "template_page_number": {"key": "templatePageNumber", "type": "int"},
        "generated_document_types": {"key": "generatedDocumentTypes", "type": "[str]"},
        "document_types": {"key": "documentTypes", "type": "[str]"},
        "separator_format_title": {"key": "separatorFormatTitle", "type": "str"},
        "child_document_bookmark_title": {"key": "childDocumentBookmarkTitle", "type": "str"},
        "element_type": {"key": "elementType", "type": "str"},
        "index_data": {"key": "indexData", "type": "MrbTemplateElementIndexDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        included_in_table_of_contents: bool,
        elements: List["_models.MrbTemplateElementDto"],
        empty_chapter_strategy: Union[int, "_models.EmptyChapterStrategy"],
        generated_document_types: List[str],
        document_types: List[str],
        element_type: Union[str, "_models.MrbElementType"],
        document_index: Optional[str] = None,
        chapter_index: Optional[str] = None,
        bookmark_title: Optional[str] = None,
        template_page_number: Optional[int] = None,
        separator_format_title: Optional[str] = None,
        child_document_bookmark_title: Optional[str] = None,
        index_data: Optional["_models.MrbTemplateElementIndexDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword included_in_table_of_contents: Required.
        :paramtype included_in_table_of_contents: bool
        :keyword document_index:
        :paramtype document_index: str
        :keyword chapter_index:
        :paramtype chapter_index: str
        :keyword bookmark_title:
        :paramtype bookmark_title: str
        :keyword elements: Required.
        :paramtype elements: list[~ignos.api.client.models.MrbTemplateElementDto]
        :keyword empty_chapter_strategy: Required. Known values are: 0, 1, and 2.
        :paramtype empty_chapter_strategy: int or ~ignos.api.client.models.EmptyChapterStrategy
        :keyword template_page_number:
        :paramtype template_page_number: int
        :keyword generated_document_types: Required.
        :paramtype generated_document_types: list[str]
        :keyword document_types: Required.
        :paramtype document_types: list[str]
        :keyword separator_format_title:
        :paramtype separator_format_title: str
        :keyword child_document_bookmark_title:
        :paramtype child_document_bookmark_title: str
        :keyword element_type: Required. Known values are: "MrbTemplatePage", "MrbGeneratedDocuments",
         "MrbChapter", "MrbChapterDocuments", and "MrbProduct".
        :paramtype element_type: str or ~ignos.api.client.models.MrbElementType
        :keyword index_data:
        :paramtype index_data: ~ignos.api.client.models.MrbTemplateElementIndexDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.included_in_table_of_contents = included_in_table_of_contents
        self.document_index = document_index
        self.chapter_index = chapter_index
        self.bookmark_title = bookmark_title
        self.elements = elements
        self.empty_chapter_strategy = empty_chapter_strategy
        self.template_page_number = template_page_number
        self.generated_document_types = generated_document_types
        self.document_types = document_types
        self.separator_format_title = separator_format_title
        self.child_document_bookmark_title = child_document_bookmark_title
        self.element_type = element_type
        self.index_data = index_data


class MrbTemplateElementIndexDto(_serialization.Model):
    """MrbTemplateElementIndexDto.

    All required parameters must be populated in order to send to server.

    :ivar pre_text:
    :vartype pre_text: str
    :ivar section:
    :vartype section: str
    :ivar title:
    :vartype title: str
    :ivar post_text:
    :vartype post_text: str
    :ivar mrb_index_content_type: Required. Known values are: "Chapter" and "Documents".
    :vartype mrb_index_content_type: str or ~ignos.api.client.models.MrbIndexContentType
    """

    _validation = {
        "mrb_index_content_type": {"required": True},
    }

    _attribute_map = {
        "pre_text": {"key": "preText", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "post_text": {"key": "postText", "type": "str"},
        "mrb_index_content_type": {"key": "mrbIndexContentType", "type": "str"},
    }

    def __init__(
        self,
        *,
        mrb_index_content_type: Union[str, "_models.MrbIndexContentType"],
        pre_text: Optional[str] = None,
        section: Optional[str] = None,
        title: Optional[str] = None,
        post_text: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword pre_text:
        :paramtype pre_text: str
        :keyword section:
        :paramtype section: str
        :keyword title:
        :paramtype title: str
        :keyword post_text:
        :paramtype post_text: str
        :keyword mrb_index_content_type: Required. Known values are: "Chapter" and "Documents".
        :paramtype mrb_index_content_type: str or ~ignos.api.client.models.MrbIndexContentType
        """
        super().__init__(**kwargs)
        self.pre_text = pre_text
        self.section = section
        self.title = title
        self.post_text = post_text
        self.mrb_index_content_type = mrb_index_content_type


class MrbTemplateTableOfContentsDto(_serialization.Model):
    """MrbTemplateTableOfContentsDto.

    All required parameters must be populated in order to send to server.

    :ivar table_of_contents_chapter_id: Required.
    :vartype table_of_contents_chapter_id: str
    :ivar pre_text:
    :vartype pre_text: str
    :ivar section:
    :vartype section: str
    :ivar title:
    :vartype title: str
    :ivar post_text:
    :vartype post_text: str
    """

    _validation = {
        "table_of_contents_chapter_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "table_of_contents_chapter_id": {"key": "tableOfContentsChapterId", "type": "str"},
        "pre_text": {"key": "preText", "type": "str"},
        "section": {"key": "section", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "post_text": {"key": "postText", "type": "str"},
    }

    def __init__(
        self,
        *,
        table_of_contents_chapter_id: str,
        pre_text: Optional[str] = None,
        section: Optional[str] = None,
        title: Optional[str] = None,
        post_text: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword table_of_contents_chapter_id: Required.
        :paramtype table_of_contents_chapter_id: str
        :keyword pre_text:
        :paramtype pre_text: str
        :keyword section:
        :paramtype section: str
        :keyword title:
        :paramtype title: str
        :keyword post_text:
        :paramtype post_text: str
        """
        super().__init__(**kwargs)
        self.table_of_contents_chapter_id = table_of_contents_chapter_id
        self.pre_text = pre_text
        self.section = section
        self.title = title
        self.post_text = post_text


class MrbTemplateUpdateElementDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MrbTemplateUpdateElementDto.

    All required parameters must be populated in order to send to server.

    :ivar id:
    :vartype id: str
    :ivar document_index:
    :vartype document_index: str
    :ivar included_in_table_of_contents:
    :vartype included_in_table_of_contents: bool
    :ivar chapter_index:
    :vartype chapter_index: str
    :ivar bookmark_title:
    :vartype bookmark_title: str
    :ivar elements: Required.
    :vartype elements: list[~ignos.api.client.models.MrbTemplateUpdateElementDto]
    :ivar empty_chapter_strategy: Required. Known values are: 0, 1, and 2.
    :vartype empty_chapter_strategy: int or ~ignos.api.client.models.EmptyChapterStrategy
    :ivar template_page_number:
    :vartype template_page_number: int
    :ivar generated_document_types: Required.
    :vartype generated_document_types: list[str]
    :ivar document_types: Required.
    :vartype document_types: list[str]
    :ivar separator_format_title:
    :vartype separator_format_title: str
    :ivar child_document_bookmark_title:
    :vartype child_document_bookmark_title: str
    :ivar element_type: Required. Known values are: "MrbTemplatePage", "MrbGeneratedDocuments",
     "MrbChapter", "MrbChapterDocuments", and "MrbProduct".
    :vartype element_type: str or ~ignos.api.client.models.MrbElementType
    :ivar index_data:
    :vartype index_data: ~ignos.api.client.models.MrbTemplateElementIndexDto
    """

    _validation = {
        "elements": {"required": True},
        "empty_chapter_strategy": {"required": True},
        "generated_document_types": {"required": True},
        "document_types": {"required": True},
        "element_type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "document_index": {"key": "documentIndex", "type": "str"},
        "included_in_table_of_contents": {"key": "includedInTableOfContents", "type": "bool"},
        "chapter_index": {"key": "chapterIndex", "type": "str"},
        "bookmark_title": {"key": "bookmarkTitle", "type": "str"},
        "elements": {"key": "elements", "type": "[MrbTemplateUpdateElementDto]"},
        "empty_chapter_strategy": {"key": "emptyChapterStrategy", "type": "int"},
        "template_page_number": {"key": "templatePageNumber", "type": "int"},
        "generated_document_types": {"key": "generatedDocumentTypes", "type": "[str]"},
        "document_types": {"key": "documentTypes", "type": "[str]"},
        "separator_format_title": {"key": "separatorFormatTitle", "type": "str"},
        "child_document_bookmark_title": {"key": "childDocumentBookmarkTitle", "type": "str"},
        "element_type": {"key": "elementType", "type": "str"},
        "index_data": {"key": "indexData", "type": "MrbTemplateElementIndexDto"},
    }

    def __init__(
        self,
        *,
        elements: List["_models.MrbTemplateUpdateElementDto"],
        empty_chapter_strategy: Union[int, "_models.EmptyChapterStrategy"],
        generated_document_types: List[str],
        document_types: List[str],
        element_type: Union[str, "_models.MrbElementType"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        document_index: Optional[str] = None,
        included_in_table_of_contents: Optional[bool] = None,
        chapter_index: Optional[str] = None,
        bookmark_title: Optional[str] = None,
        template_page_number: Optional[int] = None,
        separator_format_title: Optional[str] = None,
        child_document_bookmark_title: Optional[str] = None,
        index_data: Optional["_models.MrbTemplateElementIndexDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword document_index:
        :paramtype document_index: str
        :keyword included_in_table_of_contents:
        :paramtype included_in_table_of_contents: bool
        :keyword chapter_index:
        :paramtype chapter_index: str
        :keyword bookmark_title:
        :paramtype bookmark_title: str
        :keyword elements: Required.
        :paramtype elements: list[~ignos.api.client.models.MrbTemplateUpdateElementDto]
        :keyword empty_chapter_strategy: Required. Known values are: 0, 1, and 2.
        :paramtype empty_chapter_strategy: int or ~ignos.api.client.models.EmptyChapterStrategy
        :keyword template_page_number:
        :paramtype template_page_number: int
        :keyword generated_document_types: Required.
        :paramtype generated_document_types: list[str]
        :keyword document_types: Required.
        :paramtype document_types: list[str]
        :keyword separator_format_title:
        :paramtype separator_format_title: str
        :keyword child_document_bookmark_title:
        :paramtype child_document_bookmark_title: str
        :keyword element_type: Required. Known values are: "MrbTemplatePage", "MrbGeneratedDocuments",
         "MrbChapter", "MrbChapterDocuments", and "MrbProduct".
        :paramtype element_type: str or ~ignos.api.client.models.MrbElementType
        :keyword index_data:
        :paramtype index_data: ~ignos.api.client.models.MrbTemplateElementIndexDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.document_index = document_index
        self.included_in_table_of_contents = included_in_table_of_contents
        self.chapter_index = chapter_index
        self.bookmark_title = bookmark_title
        self.elements = elements
        self.empty_chapter_strategy = empty_chapter_strategy
        self.template_page_number = template_page_number
        self.generated_document_types = generated_document_types
        self.document_types = document_types
        self.separator_format_title = separator_format_title
        self.child_document_bookmark_title = child_document_bookmark_title
        self.element_type = element_type
        self.index_data = index_data


class NonConformanceDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """NonConformanceDto.

    All required parameters must be populated in order to send to server.

    :ivar non_conformance_id: Required.
    :vartype non_conformance_id: str
    :ivar company_id:
    :vartype company_id: str
    :ivar part:
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar resource:
    :vartype resource: ~ignos.api.client.models.ResourceDto
    :ivar type: Required. 1
    :vartype type: int or ~ignos.api.client.models.NonConformanceType
    :ivar work_order:
    :vartype work_order: str
    :ivar title:
    :vartype title: str
    :ivar date: Required.
    :vartype date: ~datetime.date
    :ivar description:
    :vartype description: str
    :ivar problem_type:
    :vartype problem_type: str
    :ivar cause:
    :vartype cause: str
    :ivar responsible:
    :vartype responsible: ~ignos.api.client.models.UserDto
    :ivar closed: Required.
    :vartype closed: bool
    :ivar approved: Required.
    :vartype approved: bool
    :ivar url:
    :vartype url: str
    """

    _validation = {
        "non_conformance_id": {"required": True, "min_length": 1},
        "type": {"required": True},
        "date": {"required": True},
        "closed": {"required": True},
        "approved": {"required": True},
    }

    _attribute_map = {
        "non_conformance_id": {"key": "nonConformanceId", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "resource": {"key": "resource", "type": "ResourceDto"},
        "type": {"key": "type", "type": "int"},
        "work_order": {"key": "workOrder", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "date": {"key": "date", "type": "date"},
        "description": {"key": "description", "type": "str"},
        "problem_type": {"key": "problemType", "type": "str"},
        "cause": {"key": "cause", "type": "str"},
        "responsible": {"key": "responsible", "type": "UserDto"},
        "closed": {"key": "closed", "type": "bool"},
        "approved": {"key": "approved", "type": "bool"},
        "url": {"key": "url", "type": "str"},
    }

    def __init__(
        self,
        *,
        non_conformance_id: str,
        type: Union[int, "_models.NonConformanceType"],
        date: datetime.date,
        closed: bool,
        approved: bool,
        company_id: Optional[str] = None,
        part: Optional["_models.PartDto"] = None,
        resource: Optional["_models.ResourceDto"] = None,
        work_order: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        problem_type: Optional[str] = None,
        cause: Optional[str] = None,
        responsible: Optional["_models.UserDto"] = None,
        url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword non_conformance_id: Required.
        :paramtype non_conformance_id: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword part:
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword resource:
        :paramtype resource: ~ignos.api.client.models.ResourceDto
        :keyword type: Required. 1
        :paramtype type: int or ~ignos.api.client.models.NonConformanceType
        :keyword work_order:
        :paramtype work_order: str
        :keyword title:
        :paramtype title: str
        :keyword date: Required.
        :paramtype date: ~datetime.date
        :keyword description:
        :paramtype description: str
        :keyword problem_type:
        :paramtype problem_type: str
        :keyword cause:
        :paramtype cause: str
        :keyword responsible:
        :paramtype responsible: ~ignos.api.client.models.UserDto
        :keyword closed: Required.
        :paramtype closed: bool
        :keyword approved: Required.
        :paramtype approved: bool
        :keyword url:
        :paramtype url: str
        """
        super().__init__(**kwargs)
        self.non_conformance_id = non_conformance_id
        self.company_id = company_id
        self.part = part
        self.resource = resource
        self.type = type
        self.work_order = work_order
        self.title = title
        self.date = date
        self.description = description
        self.problem_type = problem_type
        self.cause = cause
        self.responsible = responsible
        self.closed = closed
        self.approved = approved
        self.url = url


class NumericDataPointDto(_serialization.Model):
    """NumericDataPointDto.

    :ivar timestamp:
    :vartype timestamp: int
    :ivar value:
    :vartype value: float
    :ivar average:
    :vartype average: float
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    """

    _attribute_map = {
        "timestamp": {"key": "timestamp", "type": "int"},
        "value": {"key": "value", "type": "float"},
        "average": {"key": "average", "type": "float"},
        "min": {"key": "min", "type": "float"},
        "max": {"key": "max", "type": "float"},
    }

    def __init__(
        self,
        *,
        timestamp: Optional[int] = None,
        value: Optional[float] = None,
        average: Optional[float] = None,
        min: Optional[float] = None,  # pylint: disable=redefined-builtin
        max: Optional[float] = None,  # pylint: disable=redefined-builtin
        **kwargs: Any
    ) -> None:
        """
        :keyword timestamp:
        :paramtype timestamp: int
        :keyword value:
        :paramtype value: float
        :keyword average:
        :paramtype average: float
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        """
        super().__init__(**kwargs)
        self.timestamp = timestamp
        self.value = value
        self.average = average
        self.min = min
        self.max = max


class NumericNullableValueWithTimestamp(_serialization.Model):
    """NumericNullableValueWithTimestamp.

    :ivar timestamp:
    :vartype timestamp: int
    :ivar value:
    :vartype value: float
    """

    _attribute_map = {
        "timestamp": {"key": "timestamp", "type": "int"},
        "value": {"key": "value", "type": "float"},
    }

    def __init__(self, *, timestamp: Optional[int] = None, value: Optional[float] = None, **kwargs: Any) -> None:
        """
        :keyword timestamp:
        :paramtype timestamp: int
        :keyword value:
        :paramtype value: float
        """
        super().__init__(**kwargs)
        self.timestamp = timestamp
        self.value = value


class OperationPrerequisitesDto(_serialization.Model):
    """OperationPrerequisitesDto.

    :ivar drawing:
    :vartype drawing: bool
    :ivar materials:
    :vartype materials: ~ignos.api.client.models.MaterialsPrerequisiteDto
    :ivar cnc_program:
    :vartype cnc_program: bool
    """

    _attribute_map = {
        "drawing": {"key": "drawing", "type": "bool"},
        "materials": {"key": "materials", "type": "MaterialsPrerequisiteDto"},
        "cnc_program": {"key": "cncProgram", "type": "bool"},
    }

    def __init__(
        self,
        *,
        drawing: Optional[bool] = None,
        materials: Optional["_models.MaterialsPrerequisiteDto"] = None,
        cnc_program: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword drawing:
        :paramtype drawing: bool
        :keyword materials:
        :paramtype materials: ~ignos.api.client.models.MaterialsPrerequisiteDto
        :keyword cnc_program:
        :paramtype cnc_program: bool
        """
        super().__init__(**kwargs)
        self.drawing = drawing
        self.materials = materials
        self.cnc_program = cnc_program


class OperationStatusFilterWithQuantity(_serialization.Model):
    """OperationStatusFilterWithQuantity.

    :ivar status: Known values are: "NotReady", "Ready", "Ongoing", "Completed", and "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar quantity:
    :vartype quantity: int
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "quantity": {"key": "quantity", "type": "int"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.OperationStatusDto"]] = None,
        quantity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Known values are: "NotReady", "Ready", "Ongoing", "Completed", and "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword quantity:
        :paramtype quantity: int
        """
        super().__init__(**kwargs)
        self.status = status
        self.quantity = quantity


class OperatorAndMachineDto(_serialization.Model):
    """OperatorAndMachineDto.

    :ivar operator:
    :vartype operator: ~ignos.api.client.models.EmployeeDto
    :ivar last_work_order_event_start_time:
    :vartype last_work_order_event_start_time: ~datetime.datetime
    :ivar machine:
    :vartype machine: ~ignos.api.client.models.MachineDto
    """

    _attribute_map = {
        "operator": {"key": "operator", "type": "EmployeeDto"},
        "last_work_order_event_start_time": {"key": "lastWorkOrderEventStartTime", "type": "iso-8601"},
        "machine": {"key": "machine", "type": "MachineDto"},
    }

    def __init__(
        self,
        *,
        operator: Optional["_models.EmployeeDto"] = None,
        last_work_order_event_start_time: Optional[datetime.datetime] = None,
        machine: Optional["_models.MachineDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operator:
        :paramtype operator: ~ignos.api.client.models.EmployeeDto
        :keyword last_work_order_event_start_time:
        :paramtype last_work_order_event_start_time: ~datetime.datetime
        :keyword machine:
        :paramtype machine: ~ignos.api.client.models.MachineDto
        """
        super().__init__(**kwargs)
        self.operator = operator
        self.last_work_order_event_start_time = last_work_order_event_start_time
        self.machine = machine


class OrderReferenceDto(_serialization.Model):
    """OrderReferenceDto.

    :ivar order_reference_type: Known values are: "ProductionOrder", "PurchaseOrder", and
     "SalesOrder".
    :vartype order_reference_type: str or ~ignos.api.client.models.OrderReferenceTypeDto
    :ivar order_number:
    :vartype order_number: str
    :ivar order_line_number:
    :vartype order_line_number: int
    """

    _attribute_map = {
        "order_reference_type": {"key": "orderReferenceType", "type": "str"},
        "order_number": {"key": "orderNumber", "type": "str"},
        "order_line_number": {"key": "orderLineNumber", "type": "int"},
    }

    def __init__(
        self,
        *,
        order_reference_type: Optional[Union[str, "_models.OrderReferenceTypeDto"]] = None,
        order_number: Optional[str] = None,
        order_line_number: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword order_reference_type: Known values are: "ProductionOrder", "PurchaseOrder", and
         "SalesOrder".
        :paramtype order_reference_type: str or ~ignos.api.client.models.OrderReferenceTypeDto
        :keyword order_number:
        :paramtype order_number: str
        :keyword order_line_number:
        :paramtype order_line_number: int
        """
        super().__init__(**kwargs)
        self.order_reference_type = order_reference_type
        self.order_number = order_number
        self.order_line_number = order_line_number


class PartDto(_serialization.Model):
    """PartDto.

    All required parameters must be populated in order to send to server.

    :ivar part_number: Required.
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    """

    _validation = {
        "part_number": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
    }

    def __init__(
        self,
        *,
        part_number: str,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        """
        super().__init__(**kwargs)
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material


class PickListMaterialLineDto(_serialization.Model):
    """PickListMaterialLineDto.

    All required parameters must be populated in order to send to server.

    :ivar lot: Required.
    :vartype lot: str
    :ivar part_number: Required.
    :vartype part_number: str
    :ivar warehouse: Required.
    :vartype warehouse: str
    :ivar location: Required.
    :vartype location: str
    :ivar end: Required.
    :vartype end: bool
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar batch:
    :vartype batch: str
    """

    _validation = {
        "lot": {"required": True, "min_length": 1},
        "part_number": {"required": True, "min_length": 1},
        "warehouse": {"required": True, "min_length": 1},
        "location": {"required": True, "min_length": 1},
        "end": {"required": True},
        "quantity": {"required": True},
    }

    _attribute_map = {
        "lot": {"key": "lot", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "warehouse": {"key": "warehouse", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "end": {"key": "end", "type": "bool"},
        "quantity": {"key": "quantity", "type": "float"},
        "batch": {"key": "batch", "type": "str"},
    }

    def __init__(
        self,
        *,
        lot: str,
        part_number: str,
        warehouse: str,
        location: str,
        end: bool,
        quantity: float,
        batch: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword lot: Required.
        :paramtype lot: str
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword warehouse: Required.
        :paramtype warehouse: str
        :keyword location: Required.
        :paramtype location: str
        :keyword end: Required.
        :paramtype end: bool
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword batch:
        :paramtype batch: str
        """
        super().__init__(**kwargs)
        self.lot = lot
        self.part_number = part_number
        self.warehouse = warehouse
        self.location = location
        self.end = end
        self.quantity = quantity
        self.batch = batch


class PickListSuggestionDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """PickListSuggestionDto.

    All required parameters must be populated in order to send to server.

    :ivar position:
    :vartype position: str
    :ivar line_number: Required.
    :vartype line_number: float
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar dimension:
    :vartype dimension: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar warehouse:
    :vartype warehouse: str
    :ivar fixed_location:
    :vartype fixed_location: str
    :ivar unit:
    :vartype unit: str
    :ivar order_reference:
    :vartype order_reference: ~ignos.api.client.models.OrderReferenceDto
    :ivar quantity_per_part: Required.
    :vartype quantity_per_part: float
    :ivar total_required_quantity: Required.
    :vartype total_required_quantity: float
    :ivar used_quantity: Required.
    :vartype used_quantity: float
    :ivar lot: Required.
    :vartype lot: str
    :ivar consumed_automatically: Required.
    :vartype consumed_automatically: bool
    :ivar requires_batch_tracing: Required.
    :vartype requires_batch_tracing: bool
    :ivar proposed_quantity: Required.
    :vartype proposed_quantity: float
    :ivar remaining_quantity: Required.
    :vartype remaining_quantity: float
    :ivar suggested_started_quantity:
    :vartype suggested_started_quantity: ~ignos.api.client.models.InventoryDto
    :ivar suggested_remaining_quantity:
    :vartype suggested_remaining_quantity: ~ignos.api.client.models.InventoryDto
    :ivar available: Required.
    :vartype available: list[~ignos.api.client.models.InventoryDto]
    :ivar fixed_locations: Required.
    :vartype fixed_locations: list[str]
    :ivar drawing:
    :vartype drawing: ~ignos.api.client.models.DrawingDto
    """

    _validation = {
        "line_number": {"required": True},
        "part": {"required": True},
        "operation": {"required": True},
        "quantity_per_part": {"required": True},
        "total_required_quantity": {"required": True},
        "used_quantity": {"required": True},
        "lot": {"required": True, "min_length": 1},
        "consumed_automatically": {"required": True},
        "requires_batch_tracing": {"required": True},
        "proposed_quantity": {"required": True},
        "remaining_quantity": {"required": True},
        "available": {"required": True},
        "fixed_locations": {"required": True},
    }

    _attribute_map = {
        "position": {"key": "position", "type": "str"},
        "line_number": {"key": "lineNumber", "type": "float"},
        "part": {"key": "part", "type": "PartDto"},
        "dimension": {"key": "dimension", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "warehouse": {"key": "warehouse", "type": "str"},
        "fixed_location": {"key": "fixedLocation", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "order_reference": {"key": "orderReference", "type": "OrderReferenceDto"},
        "quantity_per_part": {"key": "quantityPerPart", "type": "float"},
        "total_required_quantity": {"key": "totalRequiredQuantity", "type": "float"},
        "used_quantity": {"key": "usedQuantity", "type": "float"},
        "lot": {"key": "lot", "type": "str"},
        "consumed_automatically": {"key": "consumedAutomatically", "type": "bool"},
        "requires_batch_tracing": {"key": "requiresBatchTracing", "type": "bool"},
        "proposed_quantity": {"key": "proposedQuantity", "type": "float"},
        "remaining_quantity": {"key": "remainingQuantity", "type": "float"},
        "suggested_started_quantity": {"key": "suggestedStartedQuantity", "type": "InventoryDto"},
        "suggested_remaining_quantity": {"key": "suggestedRemainingQuantity", "type": "InventoryDto"},
        "available": {"key": "available", "type": "[InventoryDto]"},
        "fixed_locations": {"key": "fixedLocations", "type": "[str]"},
        "drawing": {"key": "drawing", "type": "DrawingDto"},
    }

    def __init__(
        self,
        *,
        line_number: float,
        part: "_models.PartDto",
        operation: int,
        quantity_per_part: float,
        total_required_quantity: float,
        used_quantity: float,
        lot: str,
        consumed_automatically: bool,
        requires_batch_tracing: bool,
        proposed_quantity: float,
        remaining_quantity: float,
        available: List["_models.InventoryDto"],
        fixed_locations: List[str],
        position: Optional[str] = None,
        dimension: Optional[str] = None,
        warehouse: Optional[str] = None,
        fixed_location: Optional[str] = None,
        unit: Optional[str] = None,
        order_reference: Optional["_models.OrderReferenceDto"] = None,
        suggested_started_quantity: Optional["_models.InventoryDto"] = None,
        suggested_remaining_quantity: Optional["_models.InventoryDto"] = None,
        drawing: Optional["_models.DrawingDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword position:
        :paramtype position: str
        :keyword line_number: Required.
        :paramtype line_number: float
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword dimension:
        :paramtype dimension: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword warehouse:
        :paramtype warehouse: str
        :keyword fixed_location:
        :paramtype fixed_location: str
        :keyword unit:
        :paramtype unit: str
        :keyword order_reference:
        :paramtype order_reference: ~ignos.api.client.models.OrderReferenceDto
        :keyword quantity_per_part: Required.
        :paramtype quantity_per_part: float
        :keyword total_required_quantity: Required.
        :paramtype total_required_quantity: float
        :keyword used_quantity: Required.
        :paramtype used_quantity: float
        :keyword lot: Required.
        :paramtype lot: str
        :keyword consumed_automatically: Required.
        :paramtype consumed_automatically: bool
        :keyword requires_batch_tracing: Required.
        :paramtype requires_batch_tracing: bool
        :keyword proposed_quantity: Required.
        :paramtype proposed_quantity: float
        :keyword remaining_quantity: Required.
        :paramtype remaining_quantity: float
        :keyword suggested_started_quantity:
        :paramtype suggested_started_quantity: ~ignos.api.client.models.InventoryDto
        :keyword suggested_remaining_quantity:
        :paramtype suggested_remaining_quantity: ~ignos.api.client.models.InventoryDto
        :keyword available: Required.
        :paramtype available: list[~ignos.api.client.models.InventoryDto]
        :keyword fixed_locations: Required.
        :paramtype fixed_locations: list[str]
        :keyword drawing:
        :paramtype drawing: ~ignos.api.client.models.DrawingDto
        """
        super().__init__(**kwargs)
        self.position = position
        self.line_number = line_number
        self.part = part
        self.dimension = dimension
        self.operation = operation
        self.warehouse = warehouse
        self.fixed_location = fixed_location
        self.unit = unit
        self.order_reference = order_reference
        self.quantity_per_part = quantity_per_part
        self.total_required_quantity = total_required_quantity
        self.used_quantity = used_quantity
        self.lot = lot
        self.consumed_automatically = consumed_automatically
        self.requires_batch_tracing = requires_batch_tracing
        self.proposed_quantity = proposed_quantity
        self.remaining_quantity = remaining_quantity
        self.suggested_started_quantity = suggested_started_quantity
        self.suggested_remaining_quantity = suggested_remaining_quantity
        self.available = available
        self.fixed_locations = fixed_locations
        self.drawing = drawing


class PostMaterialPickListRequest(_serialization.Model):
    """PostMaterialPickListRequest.

    All required parameters must be populated in order to send to server.

    :ivar material_lines: Required.
    :vartype material_lines: list[~ignos.api.client.models.PickListMaterialLineDto]
    """

    _validation = {
        "material_lines": {"required": True},
    }

    _attribute_map = {
        "material_lines": {"key": "materialLines", "type": "[PickListMaterialLineDto]"},
    }

    def __init__(self, *, material_lines: List["_models.PickListMaterialLineDto"], **kwargs: Any) -> None:
        """
        :keyword material_lines: Required.
        :paramtype material_lines: list[~ignos.api.client.models.PickListMaterialLineDto]
        """
        super().__init__(**kwargs)
        self.material_lines = material_lines


class PowerDto(_serialization.Model):
    """PowerDto.

    :ivar asset_name:
    :vartype asset_name: str
    :ivar assets:
    :vartype assets: list[~ignos.api.client.models.AssetPowerDto]
    """

    _attribute_map = {
        "asset_name": {"key": "assetName", "type": "str"},
        "assets": {"key": "assets", "type": "[AssetPowerDto]"},
    }

    def __init__(
        self, *, asset_name: Optional[str] = None, assets: Optional[List["_models.AssetPowerDto"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword assets:
        :paramtype assets: list[~ignos.api.client.models.AssetPowerDto]
        """
        super().__init__(**kwargs)
        self.asset_name = asset_name
        self.assets = assets


class PowerOnUtilizationDto(_serialization.Model):
    """PowerOnUtilizationDto.

    :ivar average_utilization90_days:
    :vartype average_utilization90_days: float
    :ivar average_utilization30_days:
    :vartype average_utilization30_days: float
    :ivar average_utilization7_days:
    :vartype average_utilization7_days: float
    :ivar average_utilization_year_to_date:
    :vartype average_utilization_year_to_date: float
    :ivar power_on_utilization:
    :vartype power_on_utilization: float
    :ivar compared_to_average:
    :vartype compared_to_average: float
    """

    _attribute_map = {
        "average_utilization90_days": {"key": "averageUtilization90Days", "type": "float"},
        "average_utilization30_days": {"key": "averageUtilization30Days", "type": "float"},
        "average_utilization7_days": {"key": "averageUtilization7Days", "type": "float"},
        "average_utilization_year_to_date": {"key": "averageUtilizationYearToDate", "type": "float"},
        "power_on_utilization": {"key": "powerOnUtilization", "type": "float"},
        "compared_to_average": {"key": "comparedToAverage", "type": "float"},
    }

    def __init__(
        self,
        *,
        average_utilization90_days: Optional[float] = None,
        average_utilization30_days: Optional[float] = None,
        average_utilization7_days: Optional[float] = None,
        average_utilization_year_to_date: Optional[float] = None,
        power_on_utilization: Optional[float] = None,
        compared_to_average: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword average_utilization90_days:
        :paramtype average_utilization90_days: float
        :keyword average_utilization30_days:
        :paramtype average_utilization30_days: float
        :keyword average_utilization7_days:
        :paramtype average_utilization7_days: float
        :keyword average_utilization_year_to_date:
        :paramtype average_utilization_year_to_date: float
        :keyword power_on_utilization:
        :paramtype power_on_utilization: float
        :keyword compared_to_average:
        :paramtype compared_to_average: float
        """
        super().__init__(**kwargs)
        self.average_utilization90_days = average_utilization90_days
        self.average_utilization30_days = average_utilization30_days
        self.average_utilization7_days = average_utilization7_days
        self.average_utilization_year_to_date = average_utilization_year_to_date
        self.power_on_utilization = power_on_utilization
        self.compared_to_average = compared_to_average


class PowerOnUtilizationList(_serialization.Model):
    """PowerOnUtilizationList.

    :ivar machines:
    :vartype machines: list[~ignos.api.client.models.Machine]
    """

    _attribute_map = {
        "machines": {"key": "machines", "type": "[Machine]"},
    }

    def __init__(self, *, machines: Optional[List["_models.Machine"]] = None, **kwargs: Any) -> None:
        """
        :keyword machines:
        :paramtype machines: list[~ignos.api.client.models.Machine]
        """
        super().__init__(**kwargs)
        self.machines = machines


class PowerOnUtilizationV2Dto(_serialization.Model):
    """PowerOnUtilizationV2Dto.

    :ivar today:
    :vartype today: float
    :ivar seven_days:
    :vartype seven_days: float
    :ivar thirty_days:
    :vartype thirty_days: float
    :ivar ninety_days:
    :vartype ninety_days: float
    :ivar year_to_date:
    :vartype year_to_date: float
    """

    _attribute_map = {
        "today": {"key": "today", "type": "float"},
        "seven_days": {"key": "sevenDays", "type": "float"},
        "thirty_days": {"key": "thirtyDays", "type": "float"},
        "ninety_days": {"key": "ninetyDays", "type": "float"},
        "year_to_date": {"key": "yearToDate", "type": "float"},
    }

    def __init__(
        self,
        *,
        today: Optional[float] = None,
        seven_days: Optional[float] = None,
        thirty_days: Optional[float] = None,
        ninety_days: Optional[float] = None,
        year_to_date: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword today:
        :paramtype today: float
        :keyword seven_days:
        :paramtype seven_days: float
        :keyword thirty_days:
        :paramtype thirty_days: float
        :keyword ninety_days:
        :paramtype ninety_days: float
        :keyword year_to_date:
        :paramtype year_to_date: float
        """
        super().__init__(**kwargs)
        self.today = today
        self.seven_days = seven_days
        self.thirty_days = thirty_days
        self.ninety_days = ninety_days
        self.year_to_date = year_to_date


class PowerRegionDto(_serialization.Model):
    """PowerRegionDto.

    :ivar id:
    :vartype id: str
    :ivar country:
    :vartype country: str
    :ivar region:
    :vartype region: str
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "country": {"key": "country", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        country: Optional[str] = None,
        region: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword country:
        :paramtype country: str
        :keyword region:
        :paramtype region: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.country = country
        self.region = region
        self.description = description


class ProblemDetails(_serialization.Model):
    """ProblemDetails.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar type:
    :vartype type: str
    :ivar title:
    :vartype title: str
    :ivar status:
    :vartype status: int
    :ivar detail:
    :vartype detail: str
    :ivar instance:
    :vartype instance: str
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "type": {"key": "type", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "status": {"key": "status", "type": "int"},
        "detail": {"key": "detail", "type": "str"},
        "instance": {"key": "instance", "type": "str"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        type: Optional[str] = None,
        title: Optional[str] = None,
        status: Optional[int] = None,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword type:
        :paramtype type: str
        :keyword title:
        :paramtype title: str
        :keyword status:
        :paramtype status: int
        :keyword detail:
        :paramtype detail: str
        :keyword instance:
        :paramtype instance: str
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = type
        self.title = title
        self.status = status
        self.detail = detail
        self.instance = instance


class ProductionCompanyDto(_serialization.Model):
    """ProductionCompanyDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar selected: Required.
    :vartype selected: bool
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "selected": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "selected": {"key": "selected", "type": "bool"},
    }

    def __init__(
        self, *, id: str, name: str, selected: bool, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword selected: Required.
        :paramtype selected: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.selected = selected


class ProductionOrderBomDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ProductionOrderBomDto.

    All required parameters must be populated in order to send to server.

    :ivar position:
    :vartype position: str
    :ivar line_number: Required.
    :vartype line_number: float
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar dimension:
    :vartype dimension: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar operation_name:
    :vartype operation_name: str
    :ivar warehouse:
    :vartype warehouse: str
    :ivar fixed_location:
    :vartype fixed_location: str
    :ivar fixed_locations:
    :vartype fixed_locations: list[str]
    :ivar unit:
    :vartype unit: str
    :ivar quantity_per_part: Required.
    :vartype quantity_per_part: float
    :ivar total_required_quantity: Required.
    :vartype total_required_quantity: float
    :ivar used_quantity: Required.
    :vartype used_quantity: float
    :ivar available_quantity:
    :vartype available_quantity: float
    :ivar drawing:
    :vartype drawing: ~ignos.api.client.models.DrawingDto
    :ivar order_reference:
    :vartype order_reference: ~ignos.api.client.models.OrderReferenceDto
    :ivar status: Required. Known values are: "Unknown", "NotStarted", "Partial", and "Completed".
    :vartype status: str or ~ignos.api.client.models.MaterialStatus
    :ivar availability_details: Required.
    :vartype availability_details: list[~ignos.api.client.models.InventoryDto]
    """

    _validation = {
        "line_number": {"required": True},
        "part": {"required": True},
        "operation": {"required": True},
        "quantity_per_part": {"required": True},
        "total_required_quantity": {"required": True},
        "used_quantity": {"required": True},
        "status": {"required": True},
        "availability_details": {"required": True},
    }

    _attribute_map = {
        "position": {"key": "position", "type": "str"},
        "line_number": {"key": "lineNumber", "type": "float"},
        "part": {"key": "part", "type": "PartDto"},
        "dimension": {"key": "dimension", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "operation_name": {"key": "operationName", "type": "str"},
        "warehouse": {"key": "warehouse", "type": "str"},
        "fixed_location": {"key": "fixedLocation", "type": "str"},
        "fixed_locations": {"key": "fixedLocations", "type": "[str]"},
        "unit": {"key": "unit", "type": "str"},
        "quantity_per_part": {"key": "quantityPerPart", "type": "float"},
        "total_required_quantity": {"key": "totalRequiredQuantity", "type": "float"},
        "used_quantity": {"key": "usedQuantity", "type": "float"},
        "available_quantity": {"key": "availableQuantity", "type": "float"},
        "drawing": {"key": "drawing", "type": "DrawingDto"},
        "order_reference": {"key": "orderReference", "type": "OrderReferenceDto"},
        "status": {"key": "status", "type": "str"},
        "availability_details": {"key": "availabilityDetails", "type": "[InventoryDto]"},
    }

    def __init__(
        self,
        *,
        line_number: float,
        part: "_models.PartDto",
        operation: int,
        quantity_per_part: float,
        total_required_quantity: float,
        used_quantity: float,
        status: Union[str, "_models.MaterialStatus"],
        availability_details: List["_models.InventoryDto"],
        position: Optional[str] = None,
        dimension: Optional[str] = None,
        operation_name: Optional[str] = None,
        warehouse: Optional[str] = None,
        fixed_location: Optional[str] = None,
        fixed_locations: Optional[List[str]] = None,
        unit: Optional[str] = None,
        available_quantity: Optional[float] = None,
        drawing: Optional["_models.DrawingDto"] = None,
        order_reference: Optional["_models.OrderReferenceDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword position:
        :paramtype position: str
        :keyword line_number: Required.
        :paramtype line_number: float
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword dimension:
        :paramtype dimension: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword operation_name:
        :paramtype operation_name: str
        :keyword warehouse:
        :paramtype warehouse: str
        :keyword fixed_location:
        :paramtype fixed_location: str
        :keyword fixed_locations:
        :paramtype fixed_locations: list[str]
        :keyword unit:
        :paramtype unit: str
        :keyword quantity_per_part: Required.
        :paramtype quantity_per_part: float
        :keyword total_required_quantity: Required.
        :paramtype total_required_quantity: float
        :keyword used_quantity: Required.
        :paramtype used_quantity: float
        :keyword available_quantity:
        :paramtype available_quantity: float
        :keyword drawing:
        :paramtype drawing: ~ignos.api.client.models.DrawingDto
        :keyword order_reference:
        :paramtype order_reference: ~ignos.api.client.models.OrderReferenceDto
        :keyword status: Required. Known values are: "Unknown", "NotStarted", "Partial", and
         "Completed".
        :paramtype status: str or ~ignos.api.client.models.MaterialStatus
        :keyword availability_details: Required.
        :paramtype availability_details: list[~ignos.api.client.models.InventoryDto]
        """
        super().__init__(**kwargs)
        self.position = position
        self.line_number = line_number
        self.part = part
        self.dimension = dimension
        self.operation = operation
        self.operation_name = operation_name
        self.warehouse = warehouse
        self.fixed_location = fixed_location
        self.fixed_locations = fixed_locations
        self.unit = unit
        self.quantity_per_part = quantity_per_part
        self.total_required_quantity = total_required_quantity
        self.used_quantity = used_quantity
        self.available_quantity = available_quantity
        self.drawing = drawing
        self.order_reference = order_reference
        self.status = status
        self.availability_details = availability_details


class ProductionOrderDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ProductionOrderDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar company_id: Required.
    :vartype company_id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
     "ProductionFinished", and "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.ProductionOrderOperationDto]
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar planner:
    :vartype planner: ~ignos.api.client.models.UserDto
    :ivar project_leader:
    :vartype project_leader: ~ignos.api.client.models.UserDto
    :ivar delivery_location:
    :vartype delivery_location: ~ignos.api.client.models.WarehouseLocationDto
    :ivar project:
    :vartype project: ~ignos.api.client.models.WorkOrderProjectDto
    :ivar attachments:
    :vartype attachments: list[~ignos.api.client.models.WorkOrderAttachmentDto]
    :ivar start_date:
    :vartype start_date: ~datetime.datetime
    :ivar end_date:
    :vartype end_date: ~datetime.datetime
    :ivar bom_position:
    :vartype bom_position: str
    :ivar drawing:
    :vartype drawing: ~ignos.api.client.models.DrawingDto
    :ivar order_reference:
    :vartype order_reference: ~ignos.api.client.models.OrderReferenceDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "company_id": {"required": True, "min_length": 1},
        "part": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
        "operations": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "operations": {"key": "operations", "type": "[ProductionOrderOperationDto]"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "planner": {"key": "planner", "type": "UserDto"},
        "project_leader": {"key": "projectLeader", "type": "UserDto"},
        "delivery_location": {"key": "deliveryLocation", "type": "WarehouseLocationDto"},
        "project": {"key": "project", "type": "WorkOrderProjectDto"},
        "attachments": {"key": "attachments", "type": "[WorkOrderAttachmentDto]"},
        "start_date": {"key": "startDate", "type": "iso-8601"},
        "end_date": {"key": "endDate", "type": "iso-8601"},
        "bom_position": {"key": "bomPosition", "type": "str"},
        "drawing": {"key": "drawing", "type": "DrawingDto"},
        "order_reference": {"key": "orderReference", "type": "OrderReferenceDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        company_id: str,
        part: "_models.PartDto",
        quantity: float,
        status: Union[str, "_models.WorkorderStatus"],
        operations: List["_models.ProductionOrderOperationDto"],
        produced_quantity: float,
        scrapped_quantity: float,
        unit: Optional[str] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        planner: Optional["_models.UserDto"] = None,
        project_leader: Optional["_models.UserDto"] = None,
        delivery_location: Optional["_models.WarehouseLocationDto"] = None,
        project: Optional["_models.WorkOrderProjectDto"] = None,
        attachments: Optional[List["_models.WorkOrderAttachmentDto"]] = None,
        start_date: Optional[datetime.datetime] = None,
        end_date: Optional[datetime.datetime] = None,
        bom_position: Optional[str] = None,
        drawing: Optional["_models.DrawingDto"] = None,
        order_reference: Optional["_models.OrderReferenceDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword company_id: Required.
        :paramtype company_id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
         "ProductionFinished", and "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.ProductionOrderOperationDto]
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword planner:
        :paramtype planner: ~ignos.api.client.models.UserDto
        :keyword project_leader:
        :paramtype project_leader: ~ignos.api.client.models.UserDto
        :keyword delivery_location:
        :paramtype delivery_location: ~ignos.api.client.models.WarehouseLocationDto
        :keyword project:
        :paramtype project: ~ignos.api.client.models.WorkOrderProjectDto
        :keyword attachments:
        :paramtype attachments: list[~ignos.api.client.models.WorkOrderAttachmentDto]
        :keyword start_date:
        :paramtype start_date: ~datetime.datetime
        :keyword end_date:
        :paramtype end_date: ~datetime.datetime
        :keyword bom_position:
        :paramtype bom_position: str
        :keyword drawing:
        :paramtype drawing: ~ignos.api.client.models.DrawingDto
        :keyword order_reference:
        :paramtype order_reference: ~ignos.api.client.models.OrderReferenceDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.company_id = company_id
        self.part = part
        self.quantity = quantity
        self.unit = unit
        self.status = status
        self.operations = operations
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.planner = planner
        self.project_leader = project_leader
        self.delivery_location = delivery_location
        self.project = project
        self.attachments = attachments
        self.start_date = start_date
        self.end_date = end_date
        self.bom_position = bom_position
        self.drawing = drawing
        self.order_reference = order_reference


class ProductionOrderOperationActivityDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ProductionOrderOperationActivityDto.

    All required parameters must be populated in order to send to server.

    :ivar operation: Required.
    :vartype operation: int
    :ivar operation_id: Required.
    :vartype operation_id: str
    :ivar description:
    :vartype description: str
    :ivar resource:
    :vartype resource: ~ignos.api.client.models.ResourceDto
    :ivar user:
    :vartype user: ~ignos.api.client.models.UserDto
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    :ivar status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
     "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar active: Required.
    :vartype active: bool
    :ivar started_quantity:
    :vartype started_quantity: float
    :ivar produced_quantity:
    :vartype produced_quantity: float
    :ivar scrapped_quantity:
    :vartype scrapped_quantity: float
    """

    _validation = {
        "operation": {"required": True},
        "operation_id": {"required": True, "min_length": 1},
        "start_time": {"required": True},
        "status": {"required": True},
        "active": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "operation_id": {"key": "operationId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "resource": {"key": "resource", "type": "ResourceDto"},
        "user": {"key": "user", "type": "UserDto"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "active": {"key": "active", "type": "bool"},
        "started_quantity": {"key": "startedQuantity", "type": "float"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
    }

    def __init__(
        self,
        *,
        operation: int,
        operation_id: str,
        start_time: datetime.datetime,
        status: Union[str, "_models.OperationStatusDto"],
        active: bool,
        description: Optional[str] = None,
        resource: Optional["_models.ResourceDto"] = None,
        user: Optional["_models.UserDto"] = None,
        end_time: Optional[datetime.datetime] = None,
        started_quantity: Optional[float] = None,
        produced_quantity: Optional[float] = None,
        scrapped_quantity: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation: Required.
        :paramtype operation: int
        :keyword operation_id: Required.
        :paramtype operation_id: str
        :keyword description:
        :paramtype description: str
        :keyword resource:
        :paramtype resource: ~ignos.api.client.models.ResourceDto
        :keyword user:
        :paramtype user: ~ignos.api.client.models.UserDto
        :keyword start_time: Required.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time:
        :paramtype end_time: ~datetime.datetime
        :keyword status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
         "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword active: Required.
        :paramtype active: bool
        :keyword started_quantity:
        :paramtype started_quantity: float
        :keyword produced_quantity:
        :paramtype produced_quantity: float
        :keyword scrapped_quantity:
        :paramtype scrapped_quantity: float
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.operation_id = operation_id
        self.description = description
        self.resource = resource
        self.user = user
        self.start_time = start_time
        self.end_time = end_time
        self.status = status
        self.active = active
        self.started_quantity = started_quantity
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity


class ProductionOrderOperationDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ProductionOrderOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar operation: Required.
    :vartype operation: int
    :ivar next_operation:
    :vartype next_operation: int
    :ivar operation_id: Required.
    :vartype operation_id: str
    :ivar description:
    :vartype description: str
    :ivar total_planned_hours:
    :vartype total_planned_hours: float
    :ivar total_used_hours:
    :vartype total_used_hours: float
    :ivar planned_setup_hours:
    :vartype planned_setup_hours: float
    :ivar planned_production_hours:
    :vartype planned_production_hours: float
    :ivar used_setup_hours:
    :vartype used_setup_hours: float
    :ivar used_production_hours:
    :vartype used_production_hours: float
    :ivar fixed_time:
    :vartype fixed_time: bool
    :ivar resource:
    :vartype resource: ~ignos.api.client.models.ResourceDto
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar actual_start:
    :vartype actual_start: ~datetime.datetime
    :ivar actual_end:
    :vartype actual_end: ~datetime.datetime
    :ivar status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
     "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar started_quantity:
    :vartype started_quantity: float
    :ivar ongoing_quantity:
    :vartype ongoing_quantity: float
    :ivar available_to_start_quantity: Required.
    :vartype available_to_start_quantity: float
    :ivar work_instructions:
    :vartype work_instructions: str
    :ivar note:
    :vartype note: str
    :ivar fixture:
    :vartype fixture: str
    :ivar program:
    :vartype program: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar disable_setup_registration: Required.
    :vartype disable_setup_registration: bool
    """

    _validation = {
        "operation": {"required": True},
        "operation_id": {"required": True, "min_length": 1},
        "status": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
        "quantity": {"required": True},
        "available_to_start_quantity": {"required": True},
        "disable_setup_registration": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "next_operation": {"key": "nextOperation", "type": "int"},
        "operation_id": {"key": "operationId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "total_planned_hours": {"key": "totalPlannedHours", "type": "float"},
        "total_used_hours": {"key": "totalUsedHours", "type": "float"},
        "planned_setup_hours": {"key": "plannedSetupHours", "type": "float"},
        "planned_production_hours": {"key": "plannedProductionHours", "type": "float"},
        "used_setup_hours": {"key": "usedSetupHours", "type": "float"},
        "used_production_hours": {"key": "usedProductionHours", "type": "float"},
        "fixed_time": {"key": "fixedTime", "type": "bool"},
        "resource": {"key": "resource", "type": "ResourceDto"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "actual_start": {"key": "actualStart", "type": "iso-8601"},
        "actual_end": {"key": "actualEnd", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "quantity": {"key": "quantity", "type": "float"},
        "started_quantity": {"key": "startedQuantity", "type": "float"},
        "ongoing_quantity": {"key": "ongoingQuantity", "type": "float"},
        "available_to_start_quantity": {"key": "availableToStartQuantity", "type": "float"},
        "work_instructions": {"key": "workInstructions", "type": "str"},
        "note": {"key": "note", "type": "str"},
        "fixture": {"key": "fixture", "type": "str"},
        "program": {"key": "program", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "disable_setup_registration": {"key": "disableSetupRegistration", "type": "bool"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        operation: int,
        operation_id: str,
        status: Union[str, "_models.OperationStatusDto"],
        produced_quantity: float,
        scrapped_quantity: float,
        quantity: float,
        available_to_start_quantity: float,
        disable_setup_registration: bool,
        next_operation: Optional[int] = None,
        description: Optional[str] = None,
        total_planned_hours: Optional[float] = None,
        total_used_hours: Optional[float] = None,
        planned_setup_hours: Optional[float] = None,
        planned_production_hours: Optional[float] = None,
        used_setup_hours: Optional[float] = None,
        used_production_hours: Optional[float] = None,
        fixed_time: Optional[bool] = None,
        resource: Optional["_models.ResourceDto"] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        actual_start: Optional[datetime.datetime] = None,
        actual_end: Optional[datetime.datetime] = None,
        started_quantity: Optional[float] = None,
        ongoing_quantity: Optional[float] = None,
        work_instructions: Optional[str] = None,
        note: Optional[str] = None,
        fixture: Optional[str] = None,
        program: Optional[str] = None,
        tool_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation: Required.
        :paramtype operation: int
        :keyword next_operation:
        :paramtype next_operation: int
        :keyword operation_id: Required.
        :paramtype operation_id: str
        :keyword description:
        :paramtype description: str
        :keyword total_planned_hours:
        :paramtype total_planned_hours: float
        :keyword total_used_hours:
        :paramtype total_used_hours: float
        :keyword planned_setup_hours:
        :paramtype planned_setup_hours: float
        :keyword planned_production_hours:
        :paramtype planned_production_hours: float
        :keyword used_setup_hours:
        :paramtype used_setup_hours: float
        :keyword used_production_hours:
        :paramtype used_production_hours: float
        :keyword fixed_time:
        :paramtype fixed_time: bool
        :keyword resource:
        :paramtype resource: ~ignos.api.client.models.ResourceDto
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword actual_start:
        :paramtype actual_start: ~datetime.datetime
        :keyword actual_end:
        :paramtype actual_end: ~datetime.datetime
        :keyword status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
         "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword started_quantity:
        :paramtype started_quantity: float
        :keyword ongoing_quantity:
        :paramtype ongoing_quantity: float
        :keyword available_to_start_quantity: Required.
        :paramtype available_to_start_quantity: float
        :keyword work_instructions:
        :paramtype work_instructions: str
        :keyword note:
        :paramtype note: str
        :keyword fixture:
        :paramtype fixture: str
        :keyword program:
        :paramtype program: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword disable_setup_registration: Required.
        :paramtype disable_setup_registration: bool
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.next_operation = next_operation
        self.operation_id = operation_id
        self.description = description
        self.total_planned_hours = total_planned_hours
        self.total_used_hours = total_used_hours
        self.planned_setup_hours = planned_setup_hours
        self.planned_production_hours = planned_production_hours
        self.used_setup_hours = used_setup_hours
        self.used_production_hours = used_production_hours
        self.fixed_time = fixed_time
        self.resource = resource
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.actual_start = actual_start
        self.actual_end = actual_end
        self.status = status
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.quantity = quantity
        self.started_quantity = started_quantity
        self.ongoing_quantity = ongoing_quantity
        self.available_to_start_quantity = available_to_start_quantity
        self.work_instructions = work_instructions
        self.note = note
        self.fixture = fixture
        self.program = program
        self.tool_number = tool_number
        self.disable_setup_registration = disable_setup_registration


class ProductionResourceDto(_serialization.Model):
    """ProductionResourceDto.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar department:
    :vartype department: ~ignos.api.client.models.DepartmentDto
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "department": {"key": "department", "type": "DepartmentDto"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        department: Optional["_models.DepartmentDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword department:
        :paramtype department: ~ignos.api.client.models.DepartmentDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.department = department


class ProductionScheduleFiltersDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ProductionScheduleFiltersDto.

    :ivar part_numbers:
    :vartype part_numbers: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar bom_positions:
    :vartype bom_positions: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar project_ids:
    :vartype project_ids: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar part_names:
    :vartype part_names: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar work_order_ids:
    :vartype work_order_ids: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar materials:
    :vartype materials: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar descriptions:
    :vartype descriptions: list[~ignos.api.client.models.FilterValueWithQuantity]
    :ivar operations_with_available_work:
    :vartype operations_with_available_work: int
    :ivar operation_statuses:
    :vartype operation_statuses: list[~ignos.api.client.models.OperationStatusFilterWithQuantity]
    :ivar last_operation:
    :vartype last_operation: ~datetime.datetime
    :ivar first_operation:
    :vartype first_operation: ~datetime.datetime
    """

    _attribute_map = {
        "part_numbers": {"key": "partNumbers", "type": "[FilterValueWithQuantity]"},
        "bom_positions": {"key": "bomPositions", "type": "[FilterValueWithQuantity]"},
        "project_ids": {"key": "projectIds", "type": "[FilterValueWithQuantity]"},
        "part_names": {"key": "partNames", "type": "[FilterValueWithQuantity]"},
        "work_order_ids": {"key": "workOrderIds", "type": "[FilterValueWithQuantity]"},
        "materials": {"key": "materials", "type": "[FilterValueWithQuantity]"},
        "descriptions": {"key": "descriptions", "type": "[FilterValueWithQuantity]"},
        "operations_with_available_work": {"key": "operationsWithAvailableWork", "type": "int"},
        "operation_statuses": {"key": "operationStatuses", "type": "[OperationStatusFilterWithQuantity]"},
        "last_operation": {"key": "lastOperation", "type": "iso-8601"},
        "first_operation": {"key": "firstOperation", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        part_numbers: Optional[List["_models.FilterValueWithQuantity"]] = None,
        bom_positions: Optional[List["_models.FilterValueWithQuantity"]] = None,
        project_ids: Optional[List["_models.FilterValueWithQuantity"]] = None,
        part_names: Optional[List["_models.FilterValueWithQuantity"]] = None,
        work_order_ids: Optional[List["_models.FilterValueWithQuantity"]] = None,
        materials: Optional[List["_models.FilterValueWithQuantity"]] = None,
        descriptions: Optional[List["_models.FilterValueWithQuantity"]] = None,
        operations_with_available_work: Optional[int] = None,
        operation_statuses: Optional[List["_models.OperationStatusFilterWithQuantity"]] = None,
        last_operation: Optional[datetime.datetime] = None,
        first_operation: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword part_numbers:
        :paramtype part_numbers: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword bom_positions:
        :paramtype bom_positions: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword project_ids:
        :paramtype project_ids: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword part_names:
        :paramtype part_names: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword work_order_ids:
        :paramtype work_order_ids: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword materials:
        :paramtype materials: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword descriptions:
        :paramtype descriptions: list[~ignos.api.client.models.FilterValueWithQuantity]
        :keyword operations_with_available_work:
        :paramtype operations_with_available_work: int
        :keyword operation_statuses:
        :paramtype operation_statuses: list[~ignos.api.client.models.OperationStatusFilterWithQuantity]
        :keyword last_operation:
        :paramtype last_operation: ~datetime.datetime
        :keyword first_operation:
        :paramtype first_operation: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.part_numbers = part_numbers
        self.bom_positions = bom_positions
        self.project_ids = project_ids
        self.part_names = part_names
        self.work_order_ids = work_order_ids
        self.materials = materials
        self.descriptions = descriptions
        self.operations_with_available_work = operations_with_available_work
        self.operation_statuses = operation_statuses
        self.last_operation = last_operation
        self.first_operation = first_operation


class ProductionScheduleOperationDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ProductionScheduleOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar production_order_number: Required.
    :vartype production_order_number: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar operation_name: Required.
    :vartype operation_name: str
    :ivar planned_start: Required.
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar actual_start:
    :vartype actual_start: ~datetime.datetime
    :ivar actual_end:
    :vartype actual_end: ~datetime.datetime
    :ivar status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
     "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar total_planned_hours:
    :vartype total_planned_hours: float
    :ivar total_used_hours:
    :vartype total_used_hours: float
    :ivar planned_setup_hours:
    :vartype planned_setup_hours: float
    :ivar planned_production_hours:
    :vartype planned_production_hours: float
    :ivar used_setup_hours:
    :vartype used_setup_hours: float
    :ivar used_production_hours:
    :vartype used_production_hours: float
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar available_to_start_quantity: Required.
    :vartype available_to_start_quantity: float
    :ivar started_quantity:
    :vartype started_quantity: float
    :ivar ongoing_quantity:
    :vartype ongoing_quantity: float
    :ivar project:
    :vartype project: ~ignos.api.client.models.WorkOrderProjectDto
    :ivar part_number: Required.
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar part_material:
    :vartype part_material: str
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar resource_name: Required.
    :vartype resource_name: str
    :ivar resource_department_number:
    :vartype resource_department_number: str
    :ivar resource_department_name:
    :vartype resource_department_name: str
    :ivar bom_position:
    :vartype bom_position: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar previous_operation:
    :vartype previous_operation: ~ignos.api.client.models.SurroundingOperationDto
    :ivar next_operation:
    :vartype next_operation: ~ignos.api.client.models.SurroundingOperationDto
    :ivar work_instructions:
    :vartype work_instructions: str
    :ivar note:
    :vartype note: str
    :ivar description:
    :vartype description: str
    :ivar fixture:
    :vartype fixture: str
    :ivar program:
    :vartype program: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar prerequisites: Required.
    :vartype prerequisites: ~ignos.api.client.models.OperationPrerequisitesDto
    :ivar delivery_location:
    :vartype delivery_location: ~ignos.api.client.models.WarehouseLocationDto
    :ivar drawing:
    :vartype drawing: ~ignos.api.client.models.DrawingDto
    :ivar drawing_number:
    :vartype drawing_number: str
    :ivar disable_setup_registration: Required.
    :vartype disable_setup_registration: bool
    :ivar material_pick_status: Required. Known values are: "NotRequired", "NotStarted", "Started",
     "Completed", and "Unknown".
    :vartype material_pick_status: str or ~ignos.api.client.models.MaterialPickStatus
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "production_order_number": {"required": True, "min_length": 1},
        "operation": {"required": True},
        "operation_name": {"required": True, "min_length": 1},
        "planned_start": {"required": True},
        "status": {"required": True},
        "quantity": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
        "available_to_start_quantity": {"required": True},
        "part_number": {"required": True, "min_length": 1},
        "resource_id": {"required": True, "min_length": 1},
        "resource_name": {"required": True, "min_length": 1},
        "prerequisites": {"required": True},
        "disable_setup_registration": {"required": True},
        "material_pick_status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "production_order_number": {"key": "productionOrderNumber", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "operation_name": {"key": "operationName", "type": "str"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "actual_start": {"key": "actualStart", "type": "iso-8601"},
        "actual_end": {"key": "actualEnd", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "total_planned_hours": {"key": "totalPlannedHours", "type": "float"},
        "total_used_hours": {"key": "totalUsedHours", "type": "float"},
        "planned_setup_hours": {"key": "plannedSetupHours", "type": "float"},
        "planned_production_hours": {"key": "plannedProductionHours", "type": "float"},
        "used_setup_hours": {"key": "usedSetupHours", "type": "float"},
        "used_production_hours": {"key": "usedProductionHours", "type": "float"},
        "quantity": {"key": "quantity", "type": "float"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "available_to_start_quantity": {"key": "availableToStartQuantity", "type": "float"},
        "started_quantity": {"key": "startedQuantity", "type": "float"},
        "ongoing_quantity": {"key": "ongoingQuantity", "type": "float"},
        "project": {"key": "project", "type": "WorkOrderProjectDto"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "part_material": {"key": "partMaterial", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_department_number": {"key": "resourceDepartmentNumber", "type": "str"},
        "resource_department_name": {"key": "resourceDepartmentName", "type": "str"},
        "bom_position": {"key": "bomPosition", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "previous_operation": {"key": "previousOperation", "type": "SurroundingOperationDto"},
        "next_operation": {"key": "nextOperation", "type": "SurroundingOperationDto"},
        "work_instructions": {"key": "workInstructions", "type": "str"},
        "note": {"key": "note", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "fixture": {"key": "fixture", "type": "str"},
        "program": {"key": "program", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "prerequisites": {"key": "prerequisites", "type": "OperationPrerequisitesDto"},
        "delivery_location": {"key": "deliveryLocation", "type": "WarehouseLocationDto"},
        "drawing": {"key": "drawing", "type": "DrawingDto"},
        "drawing_number": {"key": "drawingNumber", "type": "str"},
        "disable_setup_registration": {"key": "disableSetupRegistration", "type": "bool"},
        "material_pick_status": {"key": "materialPickStatus", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        production_order_number: str,
        operation: int,
        operation_name: str,
        planned_start: datetime.datetime,
        status: Union[str, "_models.OperationStatusDto"],
        quantity: float,
        produced_quantity: float,
        scrapped_quantity: float,
        available_to_start_quantity: float,
        part_number: str,
        resource_id: str,
        resource_name: str,
        prerequisites: "_models.OperationPrerequisitesDto",
        disable_setup_registration: bool,
        material_pick_status: Union[str, "_models.MaterialPickStatus"],
        planned_end: Optional[datetime.datetime] = None,
        actual_start: Optional[datetime.datetime] = None,
        actual_end: Optional[datetime.datetime] = None,
        total_planned_hours: Optional[float] = None,
        total_used_hours: Optional[float] = None,
        planned_setup_hours: Optional[float] = None,
        planned_production_hours: Optional[float] = None,
        used_setup_hours: Optional[float] = None,
        used_production_hours: Optional[float] = None,
        started_quantity: Optional[float] = None,
        ongoing_quantity: Optional[float] = None,
        project: Optional["_models.WorkOrderProjectDto"] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        part_material: Optional[str] = None,
        resource_department_number: Optional[str] = None,
        resource_department_name: Optional[str] = None,
        bom_position: Optional[str] = None,
        customer_name: Optional[str] = None,
        previous_operation: Optional["_models.SurroundingOperationDto"] = None,
        next_operation: Optional["_models.SurroundingOperationDto"] = None,
        work_instructions: Optional[str] = None,
        note: Optional[str] = None,
        description: Optional[str] = None,
        fixture: Optional[str] = None,
        program: Optional[str] = None,
        tool_number: Optional[str] = None,
        delivery_location: Optional["_models.WarehouseLocationDto"] = None,
        drawing: Optional["_models.DrawingDto"] = None,
        drawing_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword production_order_number: Required.
        :paramtype production_order_number: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword operation_name: Required.
        :paramtype operation_name: str
        :keyword planned_start: Required.
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword actual_start:
        :paramtype actual_start: ~datetime.datetime
        :keyword actual_end:
        :paramtype actual_end: ~datetime.datetime
        :keyword status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
         "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword total_planned_hours:
        :paramtype total_planned_hours: float
        :keyword total_used_hours:
        :paramtype total_used_hours: float
        :keyword planned_setup_hours:
        :paramtype planned_setup_hours: float
        :keyword planned_production_hours:
        :paramtype planned_production_hours: float
        :keyword used_setup_hours:
        :paramtype used_setup_hours: float
        :keyword used_production_hours:
        :paramtype used_production_hours: float
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword available_to_start_quantity: Required.
        :paramtype available_to_start_quantity: float
        :keyword started_quantity:
        :paramtype started_quantity: float
        :keyword ongoing_quantity:
        :paramtype ongoing_quantity: float
        :keyword project:
        :paramtype project: ~ignos.api.client.models.WorkOrderProjectDto
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword part_material:
        :paramtype part_material: str
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword resource_name: Required.
        :paramtype resource_name: str
        :keyword resource_department_number:
        :paramtype resource_department_number: str
        :keyword resource_department_name:
        :paramtype resource_department_name: str
        :keyword bom_position:
        :paramtype bom_position: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword previous_operation:
        :paramtype previous_operation: ~ignos.api.client.models.SurroundingOperationDto
        :keyword next_operation:
        :paramtype next_operation: ~ignos.api.client.models.SurroundingOperationDto
        :keyword work_instructions:
        :paramtype work_instructions: str
        :keyword note:
        :paramtype note: str
        :keyword description:
        :paramtype description: str
        :keyword fixture:
        :paramtype fixture: str
        :keyword program:
        :paramtype program: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword prerequisites: Required.
        :paramtype prerequisites: ~ignos.api.client.models.OperationPrerequisitesDto
        :keyword delivery_location:
        :paramtype delivery_location: ~ignos.api.client.models.WarehouseLocationDto
        :keyword drawing:
        :paramtype drawing: ~ignos.api.client.models.DrawingDto
        :keyword drawing_number:
        :paramtype drawing_number: str
        :keyword disable_setup_registration: Required.
        :paramtype disable_setup_registration: bool
        :keyword material_pick_status: Required. Known values are: "NotRequired", "NotStarted",
         "Started", "Completed", and "Unknown".
        :paramtype material_pick_status: str or ~ignos.api.client.models.MaterialPickStatus
        """
        super().__init__(**kwargs)
        self.id = id
        self.production_order_number = production_order_number
        self.operation = operation
        self.operation_name = operation_name
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.actual_start = actual_start
        self.actual_end = actual_end
        self.status = status
        self.total_planned_hours = total_planned_hours
        self.total_used_hours = total_used_hours
        self.planned_setup_hours = planned_setup_hours
        self.planned_production_hours = planned_production_hours
        self.used_setup_hours = used_setup_hours
        self.used_production_hours = used_production_hours
        self.quantity = quantity
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.available_to_start_quantity = available_to_start_quantity
        self.started_quantity = started_quantity
        self.ongoing_quantity = ongoing_quantity
        self.project = project
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.part_material = part_material
        self.resource_id = resource_id
        self.resource_name = resource_name
        self.resource_department_number = resource_department_number
        self.resource_department_name = resource_department_name
        self.bom_position = bom_position
        self.customer_name = customer_name
        self.previous_operation = previous_operation
        self.next_operation = next_operation
        self.work_instructions = work_instructions
        self.note = note
        self.description = description
        self.fixture = fixture
        self.program = program
        self.tool_number = tool_number
        self.prerequisites = prerequisites
        self.delivery_location = delivery_location
        self.drawing = drawing
        self.drawing_number = drawing_number
        self.disable_setup_registration = disable_setup_registration
        self.material_pick_status = material_pick_status


class ProductionScheduleOperationDtoPagedResult(_serialization.Model):  # pylint: disable=name-too-long
    """ProductionScheduleOperationDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.ProductionScheduleOperationDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[ProductionScheduleOperationDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self,
        *,
        results: List["_models.ProductionScheduleOperationDto"],
        continuation_token: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.ProductionScheduleOperationDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class ProgramFileDto(_serialization.Model):
    """ProgramFileDto.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar version: Required.
    :vartype version: int
    :ivar upload_status: Required. Known values are: "NotUploaded", "Available", and "Deleted".
    :vartype upload_status: str or ~ignos.api.client.models.UploadStatusDto
    :ivar url:
    :vartype url: str
    :ivar timestamp:
    :vartype timestamp: ~datetime.datetime
    :ivar file_size:
    :vartype file_size: int
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "version": {"required": True},
        "upload_status": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "version": {"key": "version", "type": "int"},
        "upload_status": {"key": "uploadStatus", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
        "file_size": {"key": "fileSize", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        version: int,
        upload_status: Union[str, "_models.UploadStatusDto"],
        url: Optional[str] = None,
        timestamp: Optional[datetime.datetime] = None,
        file_size: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword version: Required.
        :paramtype version: int
        :keyword upload_status: Required. Known values are: "NotUploaded", "Available", and "Deleted".
        :paramtype upload_status: str or ~ignos.api.client.models.UploadStatusDto
        :keyword url:
        :paramtype url: str
        :keyword timestamp:
        :paramtype timestamp: ~datetime.datetime
        :keyword file_size:
        :paramtype file_size: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.version = version
        self.upload_status = upload_status
        self.url = url
        self.timestamp = timestamp
        self.file_size = file_size


class RegisterMeasuringToolCalibrationRequest(_serialization.Model):
    """RegisterMeasuringToolCalibrationRequest.

    All required parameters must be populated in order to send to server.

    :ivar calibration_certificate_number:
    :vartype calibration_certificate_number: str
    :ivar adjusted: Required.
    :vartype adjusted: bool
    :ivar calibration_date: Required.
    :vartype calibration_date: ~datetime.datetime
    :ivar calibration_location:
    :vartype calibration_location: str
    :ivar report_type:
    :vartype report_type: str
    :ivar upload_key:
    :vartype upload_key: str
    :ivar filename:
    :vartype filename: str
    """

    _validation = {
        "adjusted": {"required": True},
        "calibration_date": {"required": True},
    }

    _attribute_map = {
        "calibration_certificate_number": {"key": "calibrationCertificateNumber", "type": "str"},
        "adjusted": {"key": "adjusted", "type": "bool"},
        "calibration_date": {"key": "calibrationDate", "type": "iso-8601"},
        "calibration_location": {"key": "calibrationLocation", "type": "str"},
        "report_type": {"key": "reportType", "type": "str"},
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(
        self,
        *,
        adjusted: bool,
        calibration_date: datetime.datetime,
        calibration_certificate_number: Optional[str] = None,
        calibration_location: Optional[str] = None,
        report_type: Optional[str] = None,
        upload_key: Optional[str] = None,
        filename: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword calibration_certificate_number:
        :paramtype calibration_certificate_number: str
        :keyword adjusted: Required.
        :paramtype adjusted: bool
        :keyword calibration_date: Required.
        :paramtype calibration_date: ~datetime.datetime
        :keyword calibration_location:
        :paramtype calibration_location: str
        :keyword report_type:
        :paramtype report_type: str
        :keyword upload_key:
        :paramtype upload_key: str
        :keyword filename:
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.calibration_certificate_number = calibration_certificate_number
        self.adjusted = adjusted
        self.calibration_date = calibration_date
        self.calibration_location = calibration_location
        self.report_type = report_type
        self.upload_key = upload_key
        self.filename = filename


class RegisterWorkorderOperationEventRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """RegisterWorkorderOperationEventRequest.

    All required parameters must be populated in order to send to server.

    :ivar workorder_description:
    :vartype workorder_description: str
    :ivar operation_description:
    :vartype operation_description: str
    :ivar is_setup: Required.
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar customer_order:
    :vartype customer_order: ~ignos.api.client.models.CustomerOrderInfoDto
    :ivar part:
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar workorder_quantity:
    :vartype workorder_quantity: float
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required.
    :vartype end_time: ~datetime.datetime
    :ivar material_part_number:
    :vartype material_part_number: str
    :ivar material_part_name:
    :vartype material_part_name: str
    :ivar material_item_group:
    :vartype material_item_group: str
    :ivar external_id:
    :vartype external_id: str
    :ivar company_id:
    :vartype company_id: str
    """

    _validation = {
        "is_setup": {"required": True},
        "resource_id": {"required": True, "min_length": 1},
        "start_time": {"required": True},
        "end_time": {"required": True},
    }

    _attribute_map = {
        "workorder_description": {"key": "workorderDescription", "type": "str"},
        "operation_description": {"key": "operationDescription", "type": "str"},
        "is_setup": {"key": "isSetup", "type": "bool"},
        "employee": {"key": "employee", "type": "EmployeeDto"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "customer_order": {"key": "customerOrder", "type": "CustomerOrderInfoDto"},
        "part": {"key": "part", "type": "PartDto"},
        "workorder_quantity": {"key": "workorderQuantity", "type": "float"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "material_part_number": {"key": "materialPartNumber", "type": "str"},
        "material_part_name": {"key": "materialPartName", "type": "str"},
        "material_item_group": {"key": "materialItemGroup", "type": "str"},
        "external_id": {"key": "externalId", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        is_setup: bool,
        resource_id: str,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        workorder_description: Optional[str] = None,
        operation_description: Optional[str] = None,
        employee: Optional["_models.EmployeeDto"] = None,
        customer_order: Optional["_models.CustomerOrderInfoDto"] = None,
        part: Optional["_models.PartDto"] = None,
        workorder_quantity: Optional[float] = None,
        material_part_number: Optional[str] = None,
        material_part_name: Optional[str] = None,
        material_item_group: Optional[str] = None,
        external_id: Optional[str] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workorder_description:
        :paramtype workorder_description: str
        :keyword operation_description:
        :paramtype operation_description: str
        :keyword is_setup: Required.
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword customer_order:
        :paramtype customer_order: ~ignos.api.client.models.CustomerOrderInfoDto
        :keyword part:
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword workorder_quantity:
        :paramtype workorder_quantity: float
        :keyword start_time: Required.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required.
        :paramtype end_time: ~datetime.datetime
        :keyword material_part_number:
        :paramtype material_part_number: str
        :keyword material_part_name:
        :paramtype material_part_name: str
        :keyword material_item_group:
        :paramtype material_item_group: str
        :keyword external_id:
        :paramtype external_id: str
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.workorder_description = workorder_description
        self.operation_description = operation_description
        self.is_setup = is_setup
        self.employee = employee
        self.resource_id = resource_id
        self.customer_order = customer_order
        self.part = part
        self.workorder_quantity = workorder_quantity
        self.start_time = start_time
        self.end_time = end_time
        self.material_part_number = material_part_number
        self.material_part_name = material_part_name
        self.material_item_group = material_item_group
        self.external_id = external_id
        self.company_id = company_id


class ReportOperationProgress(_serialization.Model):
    """ReportOperationProgress.

    All required parameters must be populated in order to send to server.

    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.ReportOperationProgressDto]
    """

    _validation = {
        "operations": {"required": True},
    }

    _attribute_map = {
        "operations": {"key": "operations", "type": "[ReportOperationProgressDto]"},
    }

    def __init__(self, *, operations: List["_models.ReportOperationProgressDto"], **kwargs: Any) -> None:
        """
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.ReportOperationProgressDto]
        """
        super().__init__(**kwargs)
        self.operations = operations


class ReportOperationProgressDto(_serialization.Model):
    """ReportOperationProgressDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order: Required.
    :vartype work_order: str
    :ivar operation_number: Required.
    :vartype operation_number: int
    :ivar resource:
    :vartype resource: str
    :ivar good_quantity:
    :vartype good_quantity: int
    :ivar error_quantity:
    :vartype error_quantity: int
    :ivar error_cause: Known values are: "None", "Material", "Machine", and "OperatingStaff".
    :vartype error_cause: str or ~ignos.api.client.models.ErrorCauseDto
    :ivar next_status: Known values are: "InProgress", "Stopped", and "Completed".
    :vartype next_status: str or ~ignos.api.client.models.NextOperationStatusDto
    :ivar work_type: Known values are: "None", "Production", and "Setup".
    :vartype work_type: str or ~ignos.api.client.models.WorkTypeDto
    """

    _validation = {
        "work_order": {"required": True, "min_length": 1},
        "operation_number": {"required": True},
    }

    _attribute_map = {
        "work_order": {"key": "workOrder", "type": "str"},
        "operation_number": {"key": "operationNumber", "type": "int"},
        "resource": {"key": "resource", "type": "str"},
        "good_quantity": {"key": "goodQuantity", "type": "int"},
        "error_quantity": {"key": "errorQuantity", "type": "int"},
        "error_cause": {"key": "errorCause", "type": "str"},
        "next_status": {"key": "nextStatus", "type": "str"},
        "work_type": {"key": "workType", "type": "str"},
    }

    def __init__(
        self,
        *,
        work_order: str,
        operation_number: int,
        resource: Optional[str] = None,
        good_quantity: Optional[int] = None,
        error_quantity: Optional[int] = None,
        error_cause: Optional[Union[str, "_models.ErrorCauseDto"]] = None,
        next_status: Optional[Union[str, "_models.NextOperationStatusDto"]] = None,
        work_type: Optional[Union[str, "_models.WorkTypeDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword work_order: Required.
        :paramtype work_order: str
        :keyword operation_number: Required.
        :paramtype operation_number: int
        :keyword resource:
        :paramtype resource: str
        :keyword good_quantity:
        :paramtype good_quantity: int
        :keyword error_quantity:
        :paramtype error_quantity: int
        :keyword error_cause: Known values are: "None", "Material", "Machine", and "OperatingStaff".
        :paramtype error_cause: str or ~ignos.api.client.models.ErrorCauseDto
        :keyword next_status: Known values are: "InProgress", "Stopped", and "Completed".
        :paramtype next_status: str or ~ignos.api.client.models.NextOperationStatusDto
        :keyword work_type: Known values are: "None", "Production", and "Setup".
        :paramtype work_type: str or ~ignos.api.client.models.WorkTypeDto
        """
        super().__init__(**kwargs)
        self.work_order = work_order
        self.operation_number = operation_number
        self.resource = resource
        self.good_quantity = good_quantity
        self.error_quantity = error_quantity
        self.error_cause = error_cause
        self.next_status = next_status
        self.work_type = work_type


class ResourceDto(_serialization.Model):
    """ResourceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar external: Required.
    :vartype external: bool
    :ivar description:
    :vartype description: str
    :ivar resource_type:
    :vartype resource_type: str
    :ivar resource_group_id:
    :vartype resource_group_id: str
    :ivar department:
    :vartype department: ~ignos.api.client.models.DepartmentDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "external": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "external": {"key": "external", "type": "bool"},
        "description": {"key": "description", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "resource_group_id": {"key": "resourceGroupId", "type": "str"},
        "department": {"key": "department", "type": "DepartmentDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        external: bool,
        name: Optional[str] = None,
        description: Optional[str] = None,
        resource_type: Optional[str] = None,
        resource_group_id: Optional[str] = None,
        department: Optional["_models.DepartmentDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword external: Required.
        :paramtype external: bool
        :keyword description:
        :paramtype description: str
        :keyword resource_type:
        :paramtype resource_type: str
        :keyword resource_group_id:
        :paramtype resource_group_id: str
        :keyword department:
        :paramtype department: ~ignos.api.client.models.DepartmentDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.external = external
        self.description = description
        self.resource_type = resource_type
        self.resource_group_id = resource_group_id
        self.department = department


class ResourceExistDto(_serialization.Model):
    """ResourceExistDto.

    All required parameters must be populated in order to send to server.

    :ivar exists: Required.
    :vartype exists: bool
    :ivar id:
    :vartype id: str
    :ivar external_id:
    :vartype external_id: str
    """

    _validation = {
        "exists": {"required": True},
    }

    _attribute_map = {
        "exists": {"key": "exists", "type": "bool"},
        "id": {"key": "id", "type": "str"},
        "external_id": {"key": "externalId", "type": "str"},
    }

    def __init__(
        self,
        *,
        exists: bool,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        external_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword exists: Required.
        :paramtype exists: bool
        :keyword id:
        :paramtype id: str
        :keyword external_id:
        :paramtype external_id: str
        """
        super().__init__(**kwargs)
        self.exists = exists
        self.id = id
        self.external_id = external_id


class ResourceGroupDto(_serialization.Model):
    """ResourceGroupDto.

    All required parameters must be populated in order to send to server.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar resources: Required.
    :vartype resources: list[~ignos.api.client.models.ProductionResourceDto]
    :ivar department:
    :vartype department: ~ignos.api.client.models.DepartmentDto
    """

    _validation = {
        "resources": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "resources": {"key": "resources", "type": "[ProductionResourceDto]"},
        "department": {"key": "department", "type": "DepartmentDto"},
    }

    def __init__(
        self,
        *,
        resources: List["_models.ProductionResourceDto"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        department: Optional["_models.DepartmentDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword resources: Required.
        :paramtype resources: list[~ignos.api.client.models.ProductionResourceDto]
        :keyword department:
        :paramtype department: ~ignos.api.client.models.DepartmentDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.resources = resources
        self.department = department


class RightAngledTriangleDto(_serialization.Model):
    """RightAngledTriangleDto.

    All required parameters must be populated in order to send to server.

    :ivar reference_angle: Required.
    :vartype reference_angle: float
    :ivar other_angle: Required.
    :vartype other_angle: float
    :ivar hypotenuse: Required.
    :vartype hypotenuse: float
    :ivar adjacent_side: Required.
    :vartype adjacent_side: float
    :ivar opposite_side: Required.
    :vartype opposite_side: float
    :ivar altitude_from_hypotenuse: Required.
    :vartype altitude_from_hypotenuse: float
    :ivar first_hypotenuse_segment: Required.
    :vartype first_hypotenuse_segment: float
    :ivar second_hypotenuse_segment: Required.
    :vartype second_hypotenuse_segment: float
    """

    _validation = {
        "reference_angle": {"required": True},
        "other_angle": {"required": True},
        "hypotenuse": {"required": True},
        "adjacent_side": {"required": True},
        "opposite_side": {"required": True},
        "altitude_from_hypotenuse": {"required": True},
        "first_hypotenuse_segment": {"required": True},
        "second_hypotenuse_segment": {"required": True},
    }

    _attribute_map = {
        "reference_angle": {"key": "referenceAngle", "type": "float"},
        "other_angle": {"key": "otherAngle", "type": "float"},
        "hypotenuse": {"key": "hypotenuse", "type": "float"},
        "adjacent_side": {"key": "adjacentSide", "type": "float"},
        "opposite_side": {"key": "oppositeSide", "type": "float"},
        "altitude_from_hypotenuse": {"key": "altitudeFromHypotenuse", "type": "float"},
        "first_hypotenuse_segment": {"key": "firstHypotenuseSegment", "type": "float"},
        "second_hypotenuse_segment": {"key": "secondHypotenuseSegment", "type": "float"},
    }

    def __init__(
        self,
        *,
        reference_angle: float,
        other_angle: float,
        hypotenuse: float,
        adjacent_side: float,
        opposite_side: float,
        altitude_from_hypotenuse: float,
        first_hypotenuse_segment: float,
        second_hypotenuse_segment: float,
        **kwargs: Any
    ) -> None:
        """
        :keyword reference_angle: Required.
        :paramtype reference_angle: float
        :keyword other_angle: Required.
        :paramtype other_angle: float
        :keyword hypotenuse: Required.
        :paramtype hypotenuse: float
        :keyword adjacent_side: Required.
        :paramtype adjacent_side: float
        :keyword opposite_side: Required.
        :paramtype opposite_side: float
        :keyword altitude_from_hypotenuse: Required.
        :paramtype altitude_from_hypotenuse: float
        :keyword first_hypotenuse_segment: Required.
        :paramtype first_hypotenuse_segment: float
        :keyword second_hypotenuse_segment: Required.
        :paramtype second_hypotenuse_segment: float
        """
        super().__init__(**kwargs)
        self.reference_angle = reference_angle
        self.other_angle = other_angle
        self.hypotenuse = hypotenuse
        self.adjacent_side = adjacent_side
        self.opposite_side = opposite_side
        self.altitude_from_hypotenuse = altitude_from_hypotenuse
        self.first_hypotenuse_segment = first_hypotenuse_segment
        self.second_hypotenuse_segment = second_hypotenuse_segment


class SaveCommentRequest(_serialization.Model):
    """SaveCommentRequest.

    All required parameters must be populated in order to send to server.

    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar element_id: Required.
    :vartype element_id: str
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "schema_id": {"required": True, "min_length": 1},
        "element_id": {"required": True, "min_length": 1},
        "sequence": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "schema_id": {"key": "schemaId", "type": "str"},
        "element_id": {"key": "elementId", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(
        self, *, schema_id: str, element_id: str, sequence: str, comment: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword element_id: Required.
        :paramtype element_id: str
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.schema_id = schema_id
        self.element_id = element_id
        self.sequence = sequence
        self.comment = comment


class SaveMeasurementFormInstanceSchemaCommentRequest(_serialization.Model):  # pylint: disable=name-too-long
    """SaveMeasurementFormInstanceSchemaCommentRequest.

    :ivar comment:
    :vartype comment: str
    """

    _attribute_map = {
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(self, *, comment: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.comment = comment


class SaveToolRequest(_serialization.Model):
    """SaveToolRequest.

    All required parameters must be populated in order to send to server.

    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar element_id: Required.
    :vartype element_id: str
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar tools:
    :vartype tools: list[str]
    :ivar force:
    :vartype force: bool
    """

    _validation = {
        "schema_id": {"required": True, "min_length": 1},
        "element_id": {"required": True, "min_length": 1},
        "sequence": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "schema_id": {"key": "schemaId", "type": "str"},
        "element_id": {"key": "elementId", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "tools": {"key": "tools", "type": "[str]"},
        "force": {"key": "force", "type": "bool"},
    }

    def __init__(
        self,
        *,
        schema_id: str,
        element_id: str,
        sequence: str,
        tools: Optional[List[str]] = None,
        force: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword element_id: Required.
        :paramtype element_id: str
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword tools:
        :paramtype tools: list[str]
        :keyword force:
        :paramtype force: bool
        """
        super().__init__(**kwargs)
        self.schema_id = schema_id
        self.element_id = element_id
        self.sequence = sequence
        self.tools = tools
        self.force = force


class SaveValueRequest(_serialization.Model):
    """SaveValueRequest.

    All required parameters must be populated in order to send to server.

    :ivar operation:
    :vartype operation: int
    :ivar resource_name:
    :vartype resource_name: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar element_id: Required.
    :vartype element_id: str
    :ivar sequence: Required.
    :vartype sequence: str
    :ivar value:
    :vartype value: str
    :ivar bonus:
    :vartype bonus: str
    """

    _validation = {
        "schema_id": {"required": True, "min_length": 1},
        "element_id": {"required": True, "min_length": 1},
        "sequence": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "element_id": {"key": "elementId", "type": "str"},
        "sequence": {"key": "sequence", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "bonus": {"key": "bonus", "type": "str"},
    }

    def __init__(
        self,
        *,
        schema_id: str,
        element_id: str,
        sequence: str,
        operation: Optional[int] = None,
        resource_name: Optional[str] = None,
        value: Optional[str] = None,
        bonus: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation:
        :paramtype operation: int
        :keyword resource_name:
        :paramtype resource_name: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword element_id: Required.
        :paramtype element_id: str
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword value:
        :paramtype value: str
        :keyword bonus:
        :paramtype bonus: str
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.resource_name = resource_name
        self.schema_id = schema_id
        self.element_id = element_id
        self.sequence = sequence
        self.value = value
        self.bonus = bonus


class SaveValueResponseDto(_serialization.Model):
    """SaveValueResponseDto.

    All required parameters must be populated in order to send to server.

    :ivar element_completed: Required.
    :vartype element_completed: bool
    :ivar warning:
    :vartype warning: str
    :ivar is_outside_tolerances: Required.
    :vartype is_outside_tolerances: bool
    :ivar is_close_to_tolerances: Required.
    :vartype is_close_to_tolerances: bool
    :ivar tools: Required.
    :vartype tools: list[~ignos.api.client.models.MeasurementFormToolValueDto]
    """

    _validation = {
        "element_completed": {"required": True},
        "is_outside_tolerances": {"required": True},
        "is_close_to_tolerances": {"required": True},
        "tools": {"required": True},
    }

    _attribute_map = {
        "element_completed": {"key": "elementCompleted", "type": "bool"},
        "warning": {"key": "warning", "type": "str"},
        "is_outside_tolerances": {"key": "isOutsideTolerances", "type": "bool"},
        "is_close_to_tolerances": {"key": "isCloseToTolerances", "type": "bool"},
        "tools": {"key": "tools", "type": "[MeasurementFormToolValueDto]"},
    }

    def __init__(
        self,
        *,
        element_completed: bool,
        is_outside_tolerances: bool,
        is_close_to_tolerances: bool,
        tools: List["_models.MeasurementFormToolValueDto"],
        warning: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword element_completed: Required.
        :paramtype element_completed: bool
        :keyword warning:
        :paramtype warning: str
        :keyword is_outside_tolerances: Required.
        :paramtype is_outside_tolerances: bool
        :keyword is_close_to_tolerances: Required.
        :paramtype is_close_to_tolerances: bool
        :keyword tools: Required.
        :paramtype tools: list[~ignos.api.client.models.MeasurementFormToolValueDto]
        """
        super().__init__(**kwargs)
        self.element_completed = element_completed
        self.warning = warning
        self.is_outside_tolerances = is_outside_tolerances
        self.is_close_to_tolerances = is_close_to_tolerances
        self.tools = tools


class ScheduledWorkSummaryDto(_serialization.Model):
    """ScheduledWorkSummaryDto.

    All required parameters must be populated in order to send to server.

    :ivar number_of_operations: Required.
    :vartype number_of_operations: int
    :ivar remaining_work: Required.
    :vartype remaining_work: float
    """

    _validation = {
        "number_of_operations": {"required": True},
        "remaining_work": {"required": True},
    }

    _attribute_map = {
        "number_of_operations": {"key": "numberOfOperations", "type": "int"},
        "remaining_work": {"key": "remainingWork", "type": "float"},
    }

    def __init__(self, *, number_of_operations: int, remaining_work: float, **kwargs: Any) -> None:
        """
        :keyword number_of_operations: Required.
        :paramtype number_of_operations: int
        :keyword remaining_work: Required.
        :paramtype remaining_work: float
        """
        super().__init__(**kwargs)
        self.number_of_operations = number_of_operations
        self.remaining_work = remaining_work


class SchemaFeedbackCreatedDto(_serialization.Model):
    """SchemaFeedbackCreatedDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar work_order: Required.
    :vartype work_order: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar version_id: Required.
    :vartype version_id: int
    :ivar schema_instance_id: Required.
    :vartype schema_instance_id: str
    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar feedback: Required.
    :vartype feedback: str
    :ivar from_property: Required.
    :vartype from_property: str
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "work_order": {"required": True, "min_length": 1},
        "schema_id": {"required": True, "min_length": 1},
        "version_id": {"required": True},
        "schema_instance_id": {"required": True, "min_length": 1},
        "feedback": {"required": True, "min_length": 1},
        "from_property": {"required": True, "min_length": 1},
        "created": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "work_order": {"key": "workOrder", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "version_id": {"key": "versionId", "type": "int"},
        "schema_instance_id": {"key": "schemaInstanceId", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "feedback": {"key": "feedback", "type": "str"},
        "from_property": {"key": "from", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        work_order: str,
        schema_id: str,
        version_id: int,
        schema_instance_id: str,
        feedback: str,
        from_property: str,
        created: datetime.datetime,
        balloon_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword work_order: Required.
        :paramtype work_order: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword version_id: Required.
        :paramtype version_id: int
        :keyword schema_instance_id: Required.
        :paramtype schema_instance_id: str
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword feedback: Required.
        :paramtype feedback: str
        :keyword from_property: Required.
        :paramtype from_property: str
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.id = id
        self.work_order = work_order
        self.schema_id = schema_id
        self.version_id = version_id
        self.schema_instance_id = schema_instance_id
        self.balloon_id = balloon_id
        self.feedback = feedback
        self.from_property = from_property
        self.created = created


class SchemaFeedbackDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """SchemaFeedbackDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar work_order: Required.
    :vartype work_order: str
    :ivar schema_id: Required.
    :vartype schema_id: str
    :ivar version_id:
    :vartype version_id: int
    :ivar schema_instance_id: Required.
    :vartype schema_instance_id: str
    :ivar balloon_id:
    :vartype balloon_id: str
    :ivar feedback: Required.
    :vartype feedback: str
    :ivar from_property: Required.
    :vartype from_property: str
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar assigned_to:
    :vartype assigned_to: ~ignos.api.client.models.UserDto
    :ivar status: Known values are: "New" and "InProgress".
    :vartype status: str or ~ignos.api.client.models.SchemaFeedbackStatus
    :ivar latest_schema_definition_id:
    :vartype latest_schema_definition_id: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "work_order": {"required": True, "min_length": 1},
        "schema_id": {"required": True, "min_length": 1},
        "schema_instance_id": {"required": True, "min_length": 1},
        "feedback": {"required": True, "min_length": 1},
        "from_property": {"required": True, "min_length": 1},
        "created": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "work_order": {"key": "workOrder", "type": "str"},
        "schema_id": {"key": "schemaId", "type": "str"},
        "version_id": {"key": "versionId", "type": "int"},
        "schema_instance_id": {"key": "schemaInstanceId", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "feedback": {"key": "feedback", "type": "str"},
        "from_property": {"key": "from", "type": "str"},
        "created": {"key": "created", "type": "iso-8601"},
        "assigned_to": {"key": "assignedTo", "type": "UserDto"},
        "status": {"key": "status", "type": "str"},
        "latest_schema_definition_id": {"key": "latestSchemaDefinitionId", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        work_order: str,
        schema_id: str,
        schema_instance_id: str,
        feedback: str,
        from_property: str,
        created: datetime.datetime,
        version_id: Optional[int] = None,
        balloon_id: Optional[str] = None,
        assigned_to: Optional["_models.UserDto"] = None,
        status: Optional[Union[str, "_models.SchemaFeedbackStatus"]] = None,
        latest_schema_definition_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword work_order: Required.
        :paramtype work_order: str
        :keyword schema_id: Required.
        :paramtype schema_id: str
        :keyword version_id:
        :paramtype version_id: int
        :keyword schema_instance_id: Required.
        :paramtype schema_instance_id: str
        :keyword balloon_id:
        :paramtype balloon_id: str
        :keyword feedback: Required.
        :paramtype feedback: str
        :keyword from_property: Required.
        :paramtype from_property: str
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword assigned_to:
        :paramtype assigned_to: ~ignos.api.client.models.UserDto
        :keyword status: Known values are: "New" and "InProgress".
        :paramtype status: str or ~ignos.api.client.models.SchemaFeedbackStatus
        :keyword latest_schema_definition_id:
        :paramtype latest_schema_definition_id: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.work_order = work_order
        self.schema_id = schema_id
        self.version_id = version_id
        self.schema_instance_id = schema_instance_id
        self.balloon_id = balloon_id
        self.feedback = feedback
        self.from_property = from_property
        self.created = created
        self.assigned_to = assigned_to
        self.status = status
        self.latest_schema_definition_id = latest_schema_definition_id
        self.part_number = part_number
        self.part_revision = part_revision
        self.drawing = drawing
        self.drawing_revision = drawing_revision


class SchemaFeedbackDtoPagedResult(_serialization.Model):
    """SchemaFeedbackDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.SchemaFeedbackDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[SchemaFeedbackDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.SchemaFeedbackDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.SchemaFeedbackDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class SchemaInstanceElementDto(_serialization.Model):
    """SchemaInstanceElementDto.

    All required parameters must be populated in order to send to server.

    :ivar element_id: Required.
    :vartype element_id: str
    :ivar balloon_id: Required.
    :vartype balloon_id: str
    :ivar disabled: Required.
    :vartype disabled: bool
    """

    _validation = {
        "element_id": {"required": True, "min_length": 1},
        "balloon_id": {"required": True, "min_length": 1},
        "disabled": {"required": True},
    }

    _attribute_map = {
        "element_id": {"key": "elementId", "type": "str"},
        "balloon_id": {"key": "balloonId", "type": "str"},
        "disabled": {"key": "disabled", "type": "bool"},
    }

    def __init__(self, *, element_id: str, balloon_id: str, disabled: bool, **kwargs: Any) -> None:
        """
        :keyword element_id: Required.
        :paramtype element_id: str
        :keyword balloon_id: Required.
        :paramtype balloon_id: str
        :keyword disabled: Required.
        :paramtype disabled: bool
        """
        super().__init__(**kwargs)
        self.element_id = element_id
        self.balloon_id = balloon_id
        self.disabled = disabled


class SearchWorkOrderDto(_serialization.Model):
    """SearchWorkOrderDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar part_name:
    :vartype part_name: str
    :ivar part_number:
    :vartype part_number: str
    """

    _validation = {
        "work_order_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
    }

    def __init__(
        self, *, work_order_id: str, part_name: Optional[str] = None, part_number: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword part_number:
        :paramtype part_number: str
        """
        super().__init__(**kwargs)
        self.work_order_id = work_order_id
        self.part_name = part_name
        self.part_number = part_number


class SelectProductionCompany(_serialization.Model):
    """SelectProductionCompany.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class SetIsBetaTesterRequest(_serialization.Model):
    """SetIsBetaTesterRequest.

    All required parameters must be populated in order to send to server.

    :ivar is_beta_tester: Required.
    :vartype is_beta_tester: bool
    """

    _validation = {
        "is_beta_tester": {"required": True},
    }

    _attribute_map = {
        "is_beta_tester": {"key": "isBetaTester", "type": "bool"},
    }

    def __init__(self, *, is_beta_tester: bool, **kwargs: Any) -> None:
        """
        :keyword is_beta_tester: Required.
        :paramtype is_beta_tester: bool
        """
        super().__init__(**kwargs)
        self.is_beta_tester = is_beta_tester


class SetMeasurementFormMappingBalloonsRequest(_serialization.Model):
    """SetMeasurementFormMappingBalloonsRequest.

    All required parameters must be populated in order to send to server.

    :ivar mappings: Required.
    :vartype mappings: list[~ignos.api.client.models.MeasurementFormBalloonMappingRequestDto]
    """

    _validation = {
        "mappings": {"required": True},
    }

    _attribute_map = {
        "mappings": {"key": "mappings", "type": "[MeasurementFormBalloonMappingRequestDto]"},
    }

    def __init__(self, *, mappings: List["_models.MeasurementFormBalloonMappingRequestDto"], **kwargs: Any) -> None:
        """
        :keyword mappings: Required.
        :paramtype mappings: list[~ignos.api.client.models.MeasurementFormBalloonMappingRequestDto]
        """
        super().__init__(**kwargs)
        self.mappings = mappings


class SetMeasurementFormNeedAsNotNeededRequest(_serialization.Model):
    """SetMeasurementFormNeedAsNotNeededRequest.

    :ivar comment:
    :vartype comment: str
    """

    _attribute_map = {
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(self, *, comment: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.comment = comment


class SetMeasurementFormNeedUserRequest(_serialization.Model):
    """SetMeasurementFormNeedUserRequest.

    All required parameters must be populated in order to send to server.

    :ivar user_id: Required.
    :vartype user_id: str
    """

    _validation = {
        "user_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "user_id": {"key": "userId", "type": "str"},
    }

    def __init__(self, *, user_id: str, **kwargs: Any) -> None:
        """
        :keyword user_id: Required.
        :paramtype user_id: str
        """
        super().__init__(**kwargs)
        self.user_id = user_id


class SetMeasurementFormSchemaFeedbackUserRequest(_serialization.Model):  # pylint: disable=name-too-long
    """SetMeasurementFormSchemaFeedbackUserRequest.

    :ivar user_id:
    :vartype user_id: str
    """

    _attribute_map = {
        "user_id": {"key": "userId", "type": "str"},
    }

    def __init__(self, *, user_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword user_id:
        :paramtype user_id: str
        """
        super().__init__(**kwargs)
        self.user_id = user_id


class SetTransferStatusRequest(_serialization.Model):
    """SetTransferStatusRequest.

    All required parameters must be populated in order to send to server.

    :ivar status: Required. Known values are: "InProgress", "Success", and "Failed".
    :vartype status: str or ~ignos.api.client.models.FileTransferStatus
    :ivar files: Required.
    :vartype files: list[str]
    :ivar status_message:
    :vartype status_message: str
    """

    _validation = {
        "status": {"required": True},
        "files": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "files": {"key": "files", "type": "[str]"},
        "status_message": {"key": "statusMessage", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.FileTransferStatus"],
        files: List[str],
        status_message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Required. Known values are: "InProgress", "Success", and "Failed".
        :paramtype status: str or ~ignos.api.client.models.FileTransferStatus
        :keyword files: Required.
        :paramtype files: list[str]
        :keyword status_message:
        :paramtype status_message: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.files = files
        self.status_message = status_message


class SingleMachineErpDataListDto(_serialization.Model):
    """SingleMachineErpDataListDto.

    All required parameters must be populated in order to send to server.

    :ivar asset_id: Required.
    :vartype asset_id: int
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar machine_erp_data: Required.
    :vartype machine_erp_data: ~ignos.api.client.models.MachineErpDataDto
    :ivar active_orders: Required.
    :vartype active_orders: list[~ignos.api.client.models.MachineErpDataDto]
    """

    _validation = {
        "asset_id": {"required": True},
        "name": {"required": True, "min_length": 1},
        "machine_erp_data": {"required": True},
        "active_orders": {"required": True},
    }

    _attribute_map = {
        "asset_id": {"key": "assetId", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "machine_erp_data": {"key": "machineErpData", "type": "MachineErpDataDto"},
        "active_orders": {"key": "activeOrders", "type": "[MachineErpDataDto]"},
    }

    def __init__(
        self,
        *,
        asset_id: int,
        name: str,
        machine_erp_data: "_models.MachineErpDataDto",
        active_orders: List["_models.MachineErpDataDto"],
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword asset_id: Required.
        :paramtype asset_id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword machine_erp_data: Required.
        :paramtype machine_erp_data: ~ignos.api.client.models.MachineErpDataDto
        :keyword active_orders: Required.
        :paramtype active_orders: list[~ignos.api.client.models.MachineErpDataDto]
        """
        super().__init__(**kwargs)
        self.asset_id = asset_id
        self.name = name
        self.description = description
        self.machine_erp_data = machine_erp_data
        self.active_orders = active_orders


class SpindleAndCuttingSpeedDto(_serialization.Model):
    """SpindleAndCuttingSpeedDto.

    All required parameters must be populated in order to send to server.

    :ivar diameter: Required.
    :vartype diameter: float
    :ivar cutting_speed: Required.
    :vartype cutting_speed: float
    :ivar spindle_speed: Required.
    :vartype spindle_speed: float
    """

    _validation = {
        "diameter": {"required": True},
        "cutting_speed": {"required": True},
        "spindle_speed": {"required": True},
    }

    _attribute_map = {
        "diameter": {"key": "diameter", "type": "float"},
        "cutting_speed": {"key": "cuttingSpeed", "type": "float"},
        "spindle_speed": {"key": "spindleSpeed", "type": "float"},
    }

    def __init__(self, *, diameter: float, cutting_speed: float, spindle_speed: float, **kwargs: Any) -> None:
        """
        :keyword diameter: Required.
        :paramtype diameter: float
        :keyword cutting_speed: Required.
        :paramtype cutting_speed: float
        :keyword spindle_speed: Required.
        :paramtype spindle_speed: float
        """
        super().__init__(**kwargs)
        self.diameter = diameter
        self.cutting_speed = cutting_speed
        self.spindle_speed = spindle_speed


class StartCamTransferToMachine(_serialization.Model):
    """StartCamTransferToMachine.

    All required parameters must be populated in order to send to server.

    :ivar path: Required.
    :vartype path: str
    :ivar content: Required.
    :vartype content: str
    :ivar cnc_machine_id: Required.
    :vartype cnc_machine_id: str
    """

    _validation = {
        "path": {"required": True, "min_length": 1},
        "content": {"required": True, "min_length": 1},
        "cnc_machine_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "content": {"key": "content", "type": "str"},
        "cnc_machine_id": {"key": "cncMachineId", "type": "str"},
    }

    def __init__(self, *, path: str, content: str, cnc_machine_id: str, **kwargs: Any) -> None:
        """
        :keyword path: Required.
        :paramtype path: str
        :keyword content: Required.
        :paramtype content: str
        :keyword cnc_machine_id: Required.
        :paramtype cnc_machine_id: str
        """
        super().__init__(**kwargs)
        self.path = path
        self.content = content
        self.cnc_machine_id = cnc_machine_id


class StartCamTransferToMachineFromTempUpload(_serialization.Model):
    """StartCamTransferToMachineFromTempUpload.

    All required parameters must be populated in order to send to server.

    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar filename: Required.
    :vartype filename: str
    :ivar cnc_machine_id: Required.
    :vartype cnc_machine_id: str
    """

    _validation = {
        "upload_key": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
        "cnc_machine_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
        "cnc_machine_id": {"key": "cncMachineId", "type": "str"},
    }

    def __init__(self, *, upload_key: str, filename: str, cnc_machine_id: str, **kwargs: Any) -> None:
        """
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword filename: Required.
        :paramtype filename: str
        :keyword cnc_machine_id: Required.
        :paramtype cnc_machine_id: str
        """
        super().__init__(**kwargs)
        self.upload_key = upload_key
        self.filename = filename
        self.cnc_machine_id = cnc_machine_id


class StartOperationDto(_serialization.Model):
    """StartOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order: Required.
    :vartype work_order: str
    :ivar operation_number: Required.
    :vartype operation_number: int
    :ivar started_quantity:
    :vartype started_quantity: int
    :ivar resource: Required.
    :vartype resource: str
    """

    _validation = {
        "work_order": {"required": True, "min_length": 1},
        "operation_number": {"required": True},
        "resource": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "work_order": {"key": "workOrder", "type": "str"},
        "operation_number": {"key": "operationNumber", "type": "int"},
        "started_quantity": {"key": "startedQuantity", "type": "int"},
        "resource": {"key": "resource", "type": "str"},
    }

    def __init__(
        self,
        *,
        work_order: str,
        operation_number: int,
        resource: str,
        started_quantity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword work_order: Required.
        :paramtype work_order: str
        :keyword operation_number: Required.
        :paramtype operation_number: int
        :keyword started_quantity:
        :paramtype started_quantity: int
        :keyword resource: Required.
        :paramtype resource: str
        """
        super().__init__(**kwargs)
        self.work_order = work_order
        self.operation_number = operation_number
        self.started_quantity = started_quantity
        self.resource = resource


class StartOperations(_serialization.Model):
    """StartOperations.

    All required parameters must be populated in order to send to server.

    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.StartOperationDto]
    :ivar work_type: Required. Known values are: "None", "Production", and "Setup".
    :vartype work_type: str or ~ignos.api.client.models.WorkTypeDto
    """

    _validation = {
        "operations": {"required": True},
        "work_type": {"required": True},
    }

    _attribute_map = {
        "operations": {"key": "operations", "type": "[StartOperationDto]"},
        "work_type": {"key": "workType", "type": "str"},
    }

    def __init__(
        self,
        *,
        operations: List["_models.StartOperationDto"],
        work_type: Union[str, "_models.WorkTypeDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.StartOperationDto]
        :keyword work_type: Required. Known values are: "None", "Production", and "Setup".
        :paramtype work_type: str or ~ignos.api.client.models.WorkTypeDto
        """
        super().__init__(**kwargs)
        self.operations = operations
        self.work_type = work_type


class StartWorkOperationRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """StartWorkOperationRequest.

    All required parameters must be populated in order to send to server.

    :ivar is_setup:
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar customer_order:
    :vartype customer_order: ~ignos.api.client.models.CustomerOrderInfoDto
    :ivar part:
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar workorder_quantity:
    :vartype workorder_quantity: float
    :ivar time:
    :vartype time: ~datetime.datetime
    :ivar material_part_number:
    :vartype material_part_number: str
    :ivar material_part_name:
    :vartype material_part_name: str
    :ivar material_item_group:
    :vartype material_item_group: str
    :ivar workorder_description:
    :vartype workorder_description: str
    :ivar operation_description:
    :vartype operation_description: str
    :ivar external_id:
    :vartype external_id: str
    :ivar company_id:
    :vartype company_id: str
    """

    _validation = {
        "resource_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "is_setup": {"key": "isSetup", "type": "bool"},
        "employee": {"key": "employee", "type": "EmployeeDto"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "customer_order": {"key": "customerOrder", "type": "CustomerOrderInfoDto"},
        "part": {"key": "part", "type": "PartDto"},
        "workorder_quantity": {"key": "workorderQuantity", "type": "float"},
        "time": {"key": "time", "type": "iso-8601"},
        "material_part_number": {"key": "materialPartNumber", "type": "str"},
        "material_part_name": {"key": "materialPartName", "type": "str"},
        "material_item_group": {"key": "materialItemGroup", "type": "str"},
        "workorder_description": {"key": "workorderDescription", "type": "str"},
        "operation_description": {"key": "operationDescription", "type": "str"},
        "external_id": {"key": "externalId", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        is_setup: Optional[bool] = None,
        employee: Optional["_models.EmployeeDto"] = None,
        customer_order: Optional["_models.CustomerOrderInfoDto"] = None,
        part: Optional["_models.PartDto"] = None,
        workorder_quantity: Optional[float] = None,
        time: Optional[datetime.datetime] = None,
        material_part_number: Optional[str] = None,
        material_part_name: Optional[str] = None,
        material_item_group: Optional[str] = None,
        workorder_description: Optional[str] = None,
        operation_description: Optional[str] = None,
        external_id: Optional[str] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword customer_order:
        :paramtype customer_order: ~ignos.api.client.models.CustomerOrderInfoDto
        :keyword part:
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword workorder_quantity:
        :paramtype workorder_quantity: float
        :keyword time:
        :paramtype time: ~datetime.datetime
        :keyword material_part_number:
        :paramtype material_part_number: str
        :keyword material_part_name:
        :paramtype material_part_name: str
        :keyword material_item_group:
        :paramtype material_item_group: str
        :keyword workorder_description:
        :paramtype workorder_description: str
        :keyword operation_description:
        :paramtype operation_description: str
        :keyword external_id:
        :paramtype external_id: str
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.is_setup = is_setup
        self.employee = employee
        self.resource_id = resource_id
        self.customer_order = customer_order
        self.part = part
        self.workorder_quantity = workorder_quantity
        self.time = time
        self.material_part_number = material_part_number
        self.material_part_name = material_part_name
        self.material_item_group = material_item_group
        self.workorder_description = workorder_description
        self.operation_description = operation_description
        self.external_id = external_id
        self.company_id = company_id


class StateDto(_serialization.Model):
    """StateDto.

    All required parameters must be populated in order to send to server.

    :ivar state: Required.
    :vartype state: str
    :ivar machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
     "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
     "ManualMode", "EStop", "Alarm", and "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar seconds: Required.
    :vartype seconds: int
    """

    _validation = {
        "state": {"required": True, "min_length": 1},
        "machine_state": {"required": True},
        "seconds": {"required": True},
    }

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
        "machine_state": {"key": "machineState", "type": "str"},
        "seconds": {"key": "seconds", "type": "int"},
    }

    def __init__(
        self, *, state: str, machine_state: Union[str, "_models.MachineState"], seconds: int, **kwargs: Any
    ) -> None:
        """
        :keyword state: Required.
        :paramtype state: str
        :keyword machine_state: Required. Known values are: "InCycle", "MasterCam", "MdiCycle",
         "CamCycle", "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode",
         "ManualMode", "EStop", "Alarm", and "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword seconds: Required.
        :paramtype seconds: int
        """
        super().__init__(**kwargs)
        self.state = state
        self.machine_state = machine_state
        self.seconds = seconds


class StoppedWorkDto(_serialization.Model):
    """StoppedWorkDto.

    All required parameters must be populated in order to send to server.

    :ivar operation: Required.
    :vartype operation: ~ignos.api.client.models.ProductionScheduleOperationDto
    :ivar last_work_activity: Required.
    :vartype last_work_activity: ~ignos.api.client.models.CurrentWorkDto
    """

    _validation = {
        "operation": {"required": True},
        "last_work_activity": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "ProductionScheduleOperationDto"},
        "last_work_activity": {"key": "lastWorkActivity", "type": "CurrentWorkDto"},
    }

    def __init__(
        self,
        *,
        operation: "_models.ProductionScheduleOperationDto",
        last_work_activity: "_models.CurrentWorkDto",
        **kwargs: Any
    ) -> None:
        """
        :keyword operation: Required.
        :paramtype operation: ~ignos.api.client.models.ProductionScheduleOperationDto
        :keyword last_work_activity: Required.
        :paramtype last_work_activity: ~ignos.api.client.models.CurrentWorkDto
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.last_work_activity = last_work_activity


class StopWorkOperationRequest(_serialization.Model):
    """StopWorkOperationRequest.

    All required parameters must be populated in order to send to server.

    :ivar is_setup:
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar time:
    :vartype time: ~datetime.datetime
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar company_id:
    :vartype company_id: str
    """

    _validation = {
        "resource_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "is_setup": {"key": "isSetup", "type": "bool"},
        "employee": {"key": "employee", "type": "EmployeeDto"},
        "time": {"key": "time", "type": "iso-8601"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        is_setup: Optional[bool] = None,
        employee: Optional["_models.EmployeeDto"] = None,
        time: Optional[datetime.datetime] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword time:
        :paramtype time: ~datetime.datetime
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.is_setup = is_setup
        self.employee = employee
        self.time = time
        self.resource_id = resource_id
        self.company_id = company_id


class SubscriberDto(_serialization.Model):
    """SubscriberDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id:
    :vartype id: str
    :ivar upn:
    :vartype upn: str
    :ivar full_name:
    :vartype full_name: str
    """

    _validation = {
        "id": {"max_length": 50},
        "upn": {"readonly": True, "max_length": 100},
        "full_name": {"readonly": True, "max_length": 100},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "upn": {"key": "upn", "type": "str"},
        "full_name": {"key": "fullName", "type": "str"},
    }

    def __init__(self, *, id: Optional[str] = None, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id:
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.upn = None
        self.full_name = None


class SubscribeToMachineInactivityAlerts(_serialization.Model):
    """SubscribeToMachineInactivityAlerts.

    All required parameters must be populated in order to send to server.

    :ivar source:
    :vartype source: str
    :ivar criteria: Required.
    :vartype criteria: ~ignos.api.client.models.MachineInactivityCriteriaDto
    """

    _validation = {
        "source": {"max_length": 50},
        "criteria": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
        "criteria": {"key": "criteria", "type": "MachineInactivityCriteriaDto"},
    }

    def __init__(
        self, *, criteria: "_models.MachineInactivityCriteriaDto", source: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword source:
        :paramtype source: str
        :keyword criteria: Required.
        :paramtype criteria: ~ignos.api.client.models.MachineInactivityCriteriaDto
        """
        super().__init__(**kwargs)
        self.source = source
        self.criteria = criteria


class SupplierInviteDto(_serialization.Model):
    """SupplierInviteDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar supplier_id: Required.
    :vartype supplier_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar username: Required.
    :vartype username: str
    :ivar deadline: Required.
    :vartype deadline: ~datetime.datetime
    :ivar created_time: Required.
    :vartype created_time: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "supplier_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "username": {"required": True, "min_length": 1},
        "deadline": {"required": True},
        "created_time": {"required": True},
        "created_by": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "supplier_id": {"key": "supplierId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "deadline": {"key": "deadline", "type": "iso-8601"},
        "created_time": {"key": "createdTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        supplier_id: str,
        name: str,
        username: str,
        deadline: datetime.datetime,
        created_time: datetime.datetime,
        created_by: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword supplier_id: Required.
        :paramtype supplier_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword username: Required.
        :paramtype username: str
        :keyword deadline: Required.
        :paramtype deadline: ~datetime.datetime
        :keyword created_time: Required.
        :paramtype created_time: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.supplier_id = supplier_id
        self.name = name
        self.username = username
        self.deadline = deadline
        self.created_time = created_time
        self.created_by = created_by


class SurroundingOperationDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """SurroundingOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar operation_name: Required.
    :vartype operation_name: str
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar actual_start:
    :vartype actual_start: ~datetime.datetime
    :ivar actual_end:
    :vartype actual_end: ~datetime.datetime
    :ivar status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
     "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar resource_group_id:
    :vartype resource_group_id: str
    :ivar resource_id:
    :vartype resource_id: str
    :ivar resource_name:
    :vartype resource_name: str
    :ivar resource_department_number:
    :vartype resource_department_number: str
    :ivar resource_department_name:
    :vartype resource_department_name: str
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar started_quantity:
    :vartype started_quantity: float
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "operation": {"required": True},
        "operation_name": {"required": True, "min_length": 1},
        "status": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "operation_name": {"key": "operationName", "type": "str"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "actual_start": {"key": "actualStart", "type": "iso-8601"},
        "actual_end": {"key": "actualEnd", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "resource_group_id": {"key": "resourceGroupId", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_department_number": {"key": "resourceDepartmentNumber", "type": "str"},
        "resource_department_name": {"key": "resourceDepartmentName", "type": "str"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "started_quantity": {"key": "startedQuantity", "type": "float"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        operation: int,
        operation_name: str,
        status: Union[str, "_models.OperationStatusDto"],
        produced_quantity: float,
        scrapped_quantity: float,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        actual_start: Optional[datetime.datetime] = None,
        actual_end: Optional[datetime.datetime] = None,
        resource_group_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        resource_name: Optional[str] = None,
        resource_department_number: Optional[str] = None,
        resource_department_name: Optional[str] = None,
        started_quantity: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword operation_name: Required.
        :paramtype operation_name: str
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword actual_start:
        :paramtype actual_start: ~datetime.datetime
        :keyword actual_end:
        :paramtype actual_end: ~datetime.datetime
        :keyword status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
         "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword resource_group_id:
        :paramtype resource_group_id: str
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword resource_name:
        :paramtype resource_name: str
        :keyword resource_department_number:
        :paramtype resource_department_number: str
        :keyword resource_department_name:
        :paramtype resource_department_name: str
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword started_quantity:
        :paramtype started_quantity: float
        """
        super().__init__(**kwargs)
        self.id = id
        self.operation = operation
        self.operation_name = operation_name
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.actual_start = actual_start
        self.actual_end = actual_end
        self.status = status
        self.resource_group_id = resource_group_id
        self.resource_id = resource_id
        self.resource_name = resource_name
        self.resource_department_number = resource_department_number
        self.resource_department_name = resource_department_name
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.started_quantity = started_quantity


class SustainabilityCustomerOrderDto(_serialization.Model):
    """SustainabilityCustomerOrderDto.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar customer_order:
    :vartype customer_order: str
    :ivar customer_order_line:
    :vartype customer_order_line: int
    :ivar external_order_number:
    :vartype external_order_number: str
    """

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_order_line": {"key": "customerOrderLine", "type": "int"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        customer_order: Optional[str] = None,
        customer_order_line: Optional[int] = None,
        external_order_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword customer_order:
        :paramtype customer_order: str
        :keyword customer_order_line:
        :paramtype customer_order_line: int
        :keyword external_order_number:
        :paramtype external_order_number: str
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.customer_order = customer_order
        self.customer_order_line = customer_order_line
        self.external_order_number = external_order_number


class SustainabilityNodeDto(_serialization.Model):
    """SustainabilityNodeDto.

    All required parameters must be populated in order to send to server.

    :ivar part_info: Required.
    :vartype part_info: ~ignos.api.client.models.SustainabilityPartInfoDto
    :ivar serial_number:
    :vartype serial_number: str
    :ivar workorder:
    :vartype workorder: str
    :ivar procurement_info:
    :vartype procurement_info: ~ignos.api.client.models.SustainabilityNodeProcurementInfoDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar sub_nodes:
    :vartype sub_nodes: list[~ignos.api.client.models.SustainabilityNodeDto]
    """

    _validation = {
        "part_info": {"required": True},
        "quantity": {"required": True},
    }

    _attribute_map = {
        "part_info": {"key": "partInfo", "type": "SustainabilityPartInfoDto"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "workorder": {"key": "workorder", "type": "str"},
        "procurement_info": {"key": "procurementInfo", "type": "SustainabilityNodeProcurementInfoDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "sub_nodes": {"key": "subNodes", "type": "[SustainabilityNodeDto]"},
    }

    def __init__(
        self,
        *,
        part_info: "_models.SustainabilityPartInfoDto",
        quantity: float,
        serial_number: Optional[str] = None,
        workorder: Optional[str] = None,
        procurement_info: Optional["_models.SustainabilityNodeProcurementInfoDto"] = None,
        sub_nodes: Optional[List["_models.SustainabilityNodeDto"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword part_info: Required.
        :paramtype part_info: ~ignos.api.client.models.SustainabilityPartInfoDto
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword workorder:
        :paramtype workorder: str
        :keyword procurement_info:
        :paramtype procurement_info: ~ignos.api.client.models.SustainabilityNodeProcurementInfoDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword sub_nodes:
        :paramtype sub_nodes: list[~ignos.api.client.models.SustainabilityNodeDto]
        """
        super().__init__(**kwargs)
        self.part_info = part_info
        self.serial_number = serial_number
        self.workorder = workorder
        self.procurement_info = procurement_info
        self.quantity = quantity
        self.sub_nodes = sub_nodes


class SustainabilityNodeProcurementInfoDto(_serialization.Model):
    """SustainabilityNodeProcurementInfoDto.

    :ivar procurement_order:
    :vartype procurement_order: str
    :ivar procurement_order_line:
    :vartype procurement_order_line: int
    :ivar lot_number:
    :vartype lot_number: str
    :ivar heat_number:
    :vartype heat_number: str
    """

    _attribute_map = {
        "procurement_order": {"key": "procurementOrder", "type": "str"},
        "procurement_order_line": {"key": "procurementOrderLine", "type": "int"},
        "lot_number": {"key": "lotNumber", "type": "str"},
        "heat_number": {"key": "heatNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        procurement_order: Optional[str] = None,
        procurement_order_line: Optional[int] = None,
        lot_number: Optional[str] = None,
        heat_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword procurement_order:
        :paramtype procurement_order: str
        :keyword procurement_order_line:
        :paramtype procurement_order_line: int
        :keyword lot_number:
        :paramtype lot_number: str
        :keyword heat_number:
        :paramtype heat_number: str
        """
        super().__init__(**kwargs)
        self.procurement_order = procurement_order
        self.procurement_order_line = procurement_order_line
        self.lot_number = lot_number
        self.heat_number = heat_number


class SustainabilityPartInfoDto(_serialization.Model):
    """SustainabilityPartInfoDto.

    All required parameters must be populated in order to send to server.

    :ivar part_number: Required.
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    """

    _validation = {
        "part_number": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
    }

    def __init__(
        self, *, part_number: str, part_revision: Optional[str] = None, part_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        """
        super().__init__(**kwargs)
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name


class TraceDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """TraceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar user: Required.
    :vartype user: ~ignos.api.client.models.UserDto
    :ivar last_changed: Required.
    :vartype last_changed: ~datetime.datetime
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar items: Required.
    :vartype items: list[~ignos.api.client.models.TraceItemDto]
    :ivar override_material_details: Required.
    :vartype override_material_details: list[~ignos.api.client.models.TraceMaterialDetailDto]
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.WorkOrderTraceOperationDto]
    :ivar trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
    :vartype trace_type: str or ~ignos.api.client.models.TraceType
    :ivar trace_status: Required. Known values are: "None", "Unavailable", "NotNeeded", "Partial",
     and "Completed".
    :vartype trace_status: str or ~ignos.api.client.models.TraceStatus
    :ivar manual_completed: Required.
    :vartype manual_completed: bool
    :ivar material_lines_missing_trace_information: Required.
    :vartype material_lines_missing_trace_information: list[int]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "user": {"required": True},
        "last_changed": {"required": True},
        "part": {"required": True},
        "quantity": {"required": True},
        "items": {"required": True},
        "override_material_details": {"required": True},
        "operations": {"required": True},
        "trace_type": {"required": True},
        "trace_status": {"required": True},
        "manual_completed": {"required": True},
        "material_lines_missing_trace_information": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "user": {"key": "user", "type": "UserDto"},
        "last_changed": {"key": "lastChanged", "type": "iso-8601"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "items": {"key": "items", "type": "[TraceItemDto]"},
        "override_material_details": {"key": "overrideMaterialDetails", "type": "[TraceMaterialDetailDto]"},
        "operations": {"key": "operations", "type": "[WorkOrderTraceOperationDto]"},
        "trace_type": {"key": "traceType", "type": "str"},
        "trace_status": {"key": "traceStatus", "type": "str"},
        "manual_completed": {"key": "manualCompleted", "type": "bool"},
        "material_lines_missing_trace_information": {"key": "materialLinesMissingTraceInformation", "type": "[int]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        user: "_models.UserDto",
        last_changed: datetime.datetime,
        part: "_models.PartDto",
        quantity: float,
        items: List["_models.TraceItemDto"],
        override_material_details: List["_models.TraceMaterialDetailDto"],
        operations: List["_models.WorkOrderTraceOperationDto"],
        trace_type: Union[str, "_models.TraceType"],
        trace_status: Union[str, "_models.TraceStatus"],
        manual_completed: bool,
        material_lines_missing_trace_information: List[int],
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword user: Required.
        :paramtype user: ~ignos.api.client.models.UserDto
        :keyword last_changed: Required.
        :paramtype last_changed: ~datetime.datetime
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword items: Required.
        :paramtype items: list[~ignos.api.client.models.TraceItemDto]
        :keyword override_material_details: Required.
        :paramtype override_material_details: list[~ignos.api.client.models.TraceMaterialDetailDto]
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.WorkOrderTraceOperationDto]
        :keyword trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
        :paramtype trace_type: str or ~ignos.api.client.models.TraceType
        :keyword trace_status: Required. Known values are: "None", "Unavailable", "NotNeeded",
         "Partial", and "Completed".
        :paramtype trace_status: str or ~ignos.api.client.models.TraceStatus
        :keyword manual_completed: Required.
        :paramtype manual_completed: bool
        :keyword material_lines_missing_trace_information: Required.
        :paramtype material_lines_missing_trace_information: list[int]
        """
        super().__init__(**kwargs)
        self.id = id
        self.user = user
        self.last_changed = last_changed
        self.part = part
        self.quantity = quantity
        self.items = items
        self.override_material_details = override_material_details
        self.operations = operations
        self.trace_type = trace_type
        self.trace_status = trace_status
        self.manual_completed = manual_completed
        self.material_lines_missing_trace_information = material_lines_missing_trace_information


class TraceItemConsumptionDto(_serialization.Model):
    """TraceItemConsumptionDto.

    All required parameters must be populated in order to send to server.

    :ivar source_work_order:
    :vartype source_work_order: str
    :ivar source_sequence:
    :vartype source_sequence: str
    :ivar trace_number:
    :vartype trace_number: str
    :ivar lot:
    :vartype lot: str
    :ivar heat:
    :vartype heat: str
    :ivar vendor_batch:
    :vartype vendor_batch: str
    :ivar quantity_used: Required.
    :vartype quantity_used: float
    :ivar reference:
    :vartype reference: str
    :ivar label: Required.
    :vartype label: str
    """

    _validation = {
        "quantity_used": {"required": True},
        "label": {"required": True},
    }

    _attribute_map = {
        "source_work_order": {"key": "sourceWorkOrder", "type": "str"},
        "source_sequence": {"key": "sourceSequence", "type": "str"},
        "trace_number": {"key": "traceNumber", "type": "str"},
        "lot": {"key": "lot", "type": "str"},
        "heat": {"key": "heat", "type": "str"},
        "vendor_batch": {"key": "vendorBatch", "type": "str"},
        "quantity_used": {"key": "quantityUsed", "type": "float"},
        "reference": {"key": "reference", "type": "str"},
        "label": {"key": "label", "type": "str"},
    }

    def __init__(
        self,
        *,
        quantity_used: float,
        label: str,
        source_work_order: Optional[str] = None,
        source_sequence: Optional[str] = None,
        trace_number: Optional[str] = None,
        lot: Optional[str] = None,
        heat: Optional[str] = None,
        vendor_batch: Optional[str] = None,
        reference: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source_work_order:
        :paramtype source_work_order: str
        :keyword source_sequence:
        :paramtype source_sequence: str
        :keyword trace_number:
        :paramtype trace_number: str
        :keyword lot:
        :paramtype lot: str
        :keyword heat:
        :paramtype heat: str
        :keyword vendor_batch:
        :paramtype vendor_batch: str
        :keyword quantity_used: Required.
        :paramtype quantity_used: float
        :keyword reference:
        :paramtype reference: str
        :keyword label: Required.
        :paramtype label: str
        """
        super().__init__(**kwargs)
        self.source_work_order = source_work_order
        self.source_sequence = source_sequence
        self.trace_number = trace_number
        self.lot = lot
        self.heat = heat
        self.vendor_batch = vendor_batch
        self.quantity_used = quantity_used
        self.reference = reference
        self.label = label


class TraceItemDto(_serialization.Model):
    """TraceItemDto.

    All required parameters must be populated in order to send to server.

    :ivar sequence: Required.
    :vartype sequence: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar status: Required. Known values are: "None", "OK", and "Scrap".
    :vartype status: str or ~ignos.api.client.models.TraceItemStatus
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar materials: Required.
    :vartype materials: list[~ignos.api.client.models.TraceListItemDto]
    """

    _validation = {
        "sequence": {"required": True, "min_length": 1},
        "status": {"required": True},
        "quantity": {"required": True},
        "materials": {"required": True},
    }

    _attribute_map = {
        "sequence": {"key": "sequence", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "quantity": {"key": "quantity", "type": "float"},
        "materials": {"key": "materials", "type": "[TraceListItemDto]"},
    }

    def __init__(
        self,
        *,
        sequence: str,
        status: Union[str, "_models.TraceItemStatus"],
        quantity: float,
        materials: List["_models.TraceListItemDto"],
        serial_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword status: Required. Known values are: "None", "OK", and "Scrap".
        :paramtype status: str or ~ignos.api.client.models.TraceItemStatus
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword materials: Required.
        :paramtype materials: list[~ignos.api.client.models.TraceListItemDto]
        """
        super().__init__(**kwargs)
        self.sequence = sequence
        self.serial_number = serial_number
        self.status = status
        self.quantity = quantity
        self.materials = materials


class TraceListItemDto(_serialization.Model):
    """TraceListItemDto.

    All required parameters must be populated in order to send to server.

    :ivar material_line: Required.
    :vartype material_line: int
    :ivar operation:
    :vartype operation: int
    :ivar consumptions: Required.
    :vartype consumptions: list[~ignos.api.client.models.TraceItemConsumptionDto]
    """

    _validation = {
        "material_line": {"required": True},
        "consumptions": {"required": True},
    }

    _attribute_map = {
        "material_line": {"key": "materialLine", "type": "int"},
        "operation": {"key": "operation", "type": "int"},
        "consumptions": {"key": "consumptions", "type": "[TraceItemConsumptionDto]"},
    }

    def __init__(
        self,
        *,
        material_line: int,
        consumptions: List["_models.TraceItemConsumptionDto"],
        operation: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword material_line: Required.
        :paramtype material_line: int
        :keyword operation:
        :paramtype operation: int
        :keyword consumptions: Required.
        :paramtype consumptions: list[~ignos.api.client.models.TraceItemConsumptionDto]
        """
        super().__init__(**kwargs)
        self.material_line = material_line
        self.operation = operation
        self.consumptions = consumptions


class TraceMaterialDetailDto(_serialization.Model):
    """TraceMaterialDetailDto.

    All required parameters must be populated in order to send to server.

    :ivar material_line: Required.
    :vartype material_line: int
    :ivar operation:
    :vartype operation: int
    :ivar material_part_number: Required.
    :vartype material_part_number: str
    :ivar status: Required. Known values are: "None", "ForceInclude", and "Exclude".
    :vartype status: str or ~ignos.api.client.models.TraceIncludeStatus
    """

    _validation = {
        "material_line": {"required": True},
        "material_part_number": {"required": True, "min_length": 1},
        "status": {"required": True},
    }

    _attribute_map = {
        "material_line": {"key": "materialLine", "type": "int"},
        "operation": {"key": "operation", "type": "int"},
        "material_part_number": {"key": "materialPartNumber", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        material_line: int,
        material_part_number: str,
        status: Union[str, "_models.TraceIncludeStatus"],
        operation: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword material_line: Required.
        :paramtype material_line: int
        :keyword operation:
        :paramtype operation: int
        :keyword material_part_number: Required.
        :paramtype material_part_number: str
        :keyword status: Required. Known values are: "None", "ForceInclude", and "Exclude".
        :paramtype status: str or ~ignos.api.client.models.TraceIncludeStatus
        """
        super().__init__(**kwargs)
        self.material_line = material_line
        self.operation = operation
        self.material_part_number = material_part_number
        self.status = status


class TraceWorkOrderListDto(_serialization.Model):
    """TraceWorkOrderListDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
     "ProductionFinished", and "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity:
    :vartype produced_quantity: float
    :ivar scrapped_quantity:
    :vartype scrapped_quantity: float
    :ivar customer_order_reference:
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "part": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "customer_order_reference": {"key": "customerOrderReference", "type": "WorkorderCustomerOrderReferenceDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        part: "_models.PartDto",
        quantity: float,
        status: Union[str, "_models.WorkorderStatus"],
        unit: Optional[str] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        produced_quantity: Optional[float] = None,
        scrapped_quantity: Optional[float] = None,
        customer_order_reference: Optional["_models.WorkorderCustomerOrderReferenceDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
         "ProductionFinished", and "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity:
        :paramtype produced_quantity: float
        :keyword scrapped_quantity:
        :paramtype scrapped_quantity: float
        :keyword customer_order_reference:
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.part = part
        self.quantity = quantity
        self.unit = unit
        self.status = status
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.customer_order_reference = customer_order_reference


class TraceWorkOrderListDtoPagedResult(_serialization.Model):
    """TraceWorkOrderListDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.TraceWorkOrderListDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[TraceWorkOrderListDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.TraceWorkOrderListDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.TraceWorkOrderListDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class TrackingEventDto(_serialization.Model):
    """TrackingEventDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: int
    :ivar created: Required.
    :vartype created: ~datetime.datetime
    :ivar created_by: Required.
    :vartype created_by: str
    :ivar location: Required.
    :vartype location: ~ignos.api.client.models.LocationDto
    :ivar status: Required. Known values are: "Manual", "BookingPending", "BookingCancelled",
     "BookingInProgress", and "BookingComplete".
    :vartype status: str or ~ignos.api.client.models.TrackingStatusDto
    :ivar booking_id:
    :vartype booking_id: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "id": {"required": True},
        "created": {"required": True},
        "created_by": {"required": True, "min_length": 1},
        "location": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "created": {"key": "created", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "location": {"key": "location", "type": "LocationDto"},
        "status": {"key": "status", "type": "str"},
        "booking_id": {"key": "bookingId", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        created: datetime.datetime,
        created_by: str,
        location: "_models.LocationDto",
        status: Union[str, "_models.TrackingStatusDto"],
        booking_id: Optional[str] = None,
        comment: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: int
        :keyword created: Required.
        :paramtype created: ~datetime.datetime
        :keyword created_by: Required.
        :paramtype created_by: str
        :keyword location: Required.
        :paramtype location: ~ignos.api.client.models.LocationDto
        :keyword status: Required. Known values are: "Manual", "BookingPending", "BookingCancelled",
         "BookingInProgress", and "BookingComplete".
        :paramtype status: str or ~ignos.api.client.models.TrackingStatusDto
        :keyword booking_id:
        :paramtype booking_id: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.created = created
        self.created_by = created_by
        self.location = location
        self.status = status
        self.booking_id = booking_id
        self.comment = comment


class TrackingHistoryDto(_serialization.Model):
    """TrackingHistoryDto.

    All required parameters must be populated in order to send to server.

    :ivar tracking_id: Required.
    :vartype tracking_id: str
    :ivar pallet_number: Required.
    :vartype pallet_number: int
    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar tracking_events: Required.
    :vartype tracking_events: list[~ignos.api.client.models.TrackingEventDto]
    """

    _validation = {
        "tracking_id": {"required": True, "min_length": 1},
        "pallet_number": {"required": True},
        "work_order_id": {"required": True, "min_length": 1},
        "tracking_events": {"required": True},
    }

    _attribute_map = {
        "tracking_id": {"key": "trackingId", "type": "str"},
        "pallet_number": {"key": "palletNumber", "type": "int"},
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "tracking_events": {"key": "trackingEvents", "type": "[TrackingEventDto]"},
    }

    def __init__(
        self,
        *,
        tracking_id: str,
        pallet_number: int,
        work_order_id: str,
        tracking_events: List["_models.TrackingEventDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword tracking_id: Required.
        :paramtype tracking_id: str
        :keyword pallet_number: Required.
        :paramtype pallet_number: int
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword tracking_events: Required.
        :paramtype tracking_events: list[~ignos.api.client.models.TrackingEventDto]
        """
        super().__init__(**kwargs)
        self.tracking_id = tracking_id
        self.pallet_number = pallet_number
        self.work_order_id = work_order_id
        self.tracking_events = tracking_events


class TrackingHistoryUpdateDto(_serialization.Model):
    """TrackingHistoryUpdateDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar location_id: Required.
    :vartype location_id: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "work_order_id": {"required": True, "min_length": 1},
        "location_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "location_id": {"key": "locationId", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(self, *, work_order_id: str, location_id: str, comment: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword location_id: Required.
        :paramtype location_id: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.work_order_id = work_order_id
        self.location_id = location_id
        self.comment = comment


class TrackingUpdateDto(_serialization.Model):
    """TrackingUpdateDto.

    All required parameters must be populated in order to send to server.

    :ivar tracking_id: Required.
    :vartype tracking_id: str
    :ivar location_id: Required.
    :vartype location_id: str
    :ivar comment:
    :vartype comment: str
    """

    _validation = {
        "tracking_id": {"required": True, "min_length": 1},
        "location_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tracking_id": {"key": "trackingId", "type": "str"},
        "location_id": {"key": "locationId", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
    }

    def __init__(self, *, tracking_id: str, location_id: str, comment: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword tracking_id: Required.
        :paramtype tracking_id: str
        :keyword location_id: Required.
        :paramtype location_id: str
        :keyword comment:
        :paramtype comment: str
        """
        super().__init__(**kwargs)
        self.tracking_id = tracking_id
        self.location_id = location_id
        self.comment = comment


class TrackingWorkOrderDto(_serialization.Model):
    """TrackingWorkOrderDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar tracking_history: Required.
    :vartype tracking_history: list[~ignos.api.client.models.TrackingHistoryDto]
    """

    _validation = {
        "work_order_id": {"required": True, "min_length": 1},
        "part": {"required": True},
        "tracking_history": {"required": True},
    }

    _attribute_map = {
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "tracking_history": {"key": "trackingHistory", "type": "[TrackingHistoryDto]"},
    }

    def __init__(
        self,
        *,
        work_order_id: str,
        part: "_models.PartDto",
        tracking_history: List["_models.TrackingHistoryDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword tracking_history: Required.
        :paramtype tracking_history: list[~ignos.api.client.models.TrackingHistoryDto]
        """
        super().__init__(**kwargs)
        self.work_order_id = work_order_id
        self.part = part
        self.tracking_history = tracking_history


class UnregisteredToolValueDto(_serialization.Model):
    """UnregisteredToolValueDto.

    All required parameters must be populated in order to send to server.

    :ivar unregistered_tool: Required.
    :vartype unregistered_tool: str
    :ivar count: Required.
    :vartype count: int
    """

    _validation = {
        "unregistered_tool": {"required": True, "min_length": 1},
        "count": {"required": True},
    }

    _attribute_map = {
        "unregistered_tool": {"key": "unregisteredTool", "type": "str"},
        "count": {"key": "count", "type": "int"},
    }

    def __init__(self, *, unregistered_tool: str, count: int, **kwargs: Any) -> None:
        """
        :keyword unregistered_tool: Required.
        :paramtype unregistered_tool: str
        :keyword count: Required.
        :paramtype count: int
        """
        super().__init__(**kwargs)
        self.unregistered_tool = unregistered_tool
        self.count = count


class UpdateAssetRequest(_serialization.Model):
    """UpdateAssetRequest.

    All required parameters must be populated in order to send to server.

    :ivar parent_id: Required.
    :vartype parent_id: int
    :ivar name: Required.
    :vartype name: str
    :ivar description: Required.
    :vartype description: str
    :ivar metadata: Dictionary of :code:`<string>`. Required.
    :vartype metadata: dict[str, str]
    :ivar source:
    :vartype source: str
    """

    _validation = {
        "parent_id": {"required": True},
        "name": {"required": True, "min_length": 1},
        "description": {"required": True, "min_length": 1},
        "metadata": {"required": True},
    }

    _attribute_map = {
        "parent_id": {"key": "parentId", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "source": {"key": "source", "type": "str"},
    }

    def __init__(
        self,
        *,
        parent_id: int,
        name: str,
        description: str,
        metadata: Dict[str, str],
        source: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword parent_id: Required.
        :paramtype parent_id: int
        :keyword name: Required.
        :paramtype name: str
        :keyword description: Required.
        :paramtype description: str
        :keyword metadata: Dictionary of :code:`<string>`. Required.
        :paramtype metadata: dict[str, str]
        :keyword source:
        :paramtype source: str
        """
        super().__init__(**kwargs)
        self.parent_id = parent_id
        self.name = name
        self.description = description
        self.metadata = metadata
        self.source = source


class UpdateCdfConfig(_serialization.Model):
    """UpdateCdfConfig.

    All required parameters must be populated in order to send to server.

    :ivar client_id: Required.
    :vartype client_id: str
    :ivar client_secret:
    :vartype client_secret: str
    """

    _validation = {
        "client_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "client_id": {"key": "clientId", "type": "str"},
        "client_secret": {"key": "clientSecret", "type": "str"},
    }

    def __init__(self, *, client_id: str, client_secret: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword client_id: Required.
        :paramtype client_id: str
        :keyword client_secret:
        :paramtype client_secret: str
        """
        super().__init__(**kwargs)
        self.client_id = client_id
        self.client_secret = client_secret


class UpdateCncMachineCommunicationSettingsRequest(_serialization.Model):  # pylint: disable=name-too-long
    """UpdateCncMachineCommunicationSettingsRequest.

    :ivar from_cloud_to_machine_share:
    :vartype from_cloud_to_machine_share: str
    :ivar from_cloud_to_machine_path:
    :vartype from_cloud_to_machine_path: str
    :ivar from_cloud_to_machine_cam_share:
    :vartype from_cloud_to_machine_cam_share: str
    :ivar from_cloud_to_machine_cam_path:
    :vartype from_cloud_to_machine_cam_path: str
    :ivar from_machine_to_cloud_share:
    :vartype from_machine_to_cloud_share: str
    :ivar from_machine_to_cloud_path:
    :vartype from_machine_to_cloud_path: str
    :ivar domain:
    :vartype domain: str
    :ivar username:
    :vartype username: str
    :ivar password:
    :vartype password: str
    """

    _attribute_map = {
        "from_cloud_to_machine_share": {"key": "fromCloudToMachineShare", "type": "str"},
        "from_cloud_to_machine_path": {"key": "fromCloudToMachinePath", "type": "str"},
        "from_cloud_to_machine_cam_share": {"key": "fromCloudToMachineCamShare", "type": "str"},
        "from_cloud_to_machine_cam_path": {"key": "fromCloudToMachineCamPath", "type": "str"},
        "from_machine_to_cloud_share": {"key": "fromMachineToCloudShare", "type": "str"},
        "from_machine_to_cloud_path": {"key": "fromMachineToCloudPath", "type": "str"},
        "domain": {"key": "domain", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "password": {"key": "password", "type": "str"},
    }

    def __init__(
        self,
        *,
        from_cloud_to_machine_share: Optional[str] = None,
        from_cloud_to_machine_path: Optional[str] = None,
        from_cloud_to_machine_cam_share: Optional[str] = None,
        from_cloud_to_machine_cam_path: Optional[str] = None,
        from_machine_to_cloud_share: Optional[str] = None,
        from_machine_to_cloud_path: Optional[str] = None,
        domain: Optional[str] = None,
        username: Optional[str] = None,
        password: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword from_cloud_to_machine_share:
        :paramtype from_cloud_to_machine_share: str
        :keyword from_cloud_to_machine_path:
        :paramtype from_cloud_to_machine_path: str
        :keyword from_cloud_to_machine_cam_share:
        :paramtype from_cloud_to_machine_cam_share: str
        :keyword from_cloud_to_machine_cam_path:
        :paramtype from_cloud_to_machine_cam_path: str
        :keyword from_machine_to_cloud_share:
        :paramtype from_machine_to_cloud_share: str
        :keyword from_machine_to_cloud_path:
        :paramtype from_machine_to_cloud_path: str
        :keyword domain:
        :paramtype domain: str
        :keyword username:
        :paramtype username: str
        :keyword password:
        :paramtype password: str
        """
        super().__init__(**kwargs)
        self.from_cloud_to_machine_share = from_cloud_to_machine_share
        self.from_cloud_to_machine_path = from_cloud_to_machine_path
        self.from_cloud_to_machine_cam_share = from_cloud_to_machine_cam_share
        self.from_cloud_to_machine_cam_path = from_cloud_to_machine_cam_path
        self.from_machine_to_cloud_share = from_machine_to_cloud_share
        self.from_machine_to_cloud_path = from_machine_to_cloud_path
        self.domain = domain
        self.username = username
        self.password = password


class UpdateCncMachineOperationRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpdateCncMachineOperationRequest.

    All required parameters must be populated in order to send to server.

    :ivar operation:
    :vartype operation: int
    :ivar machine_id:
    :vartype machine_id: str
    :ivar title:
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar chuck_jaws:
    :vartype chuck_jaws: str
    :ivar chuck_pressure:
    :vartype chuck_pressure: str
    :ivar tailstock:
    :vartype tailstock: str
    :ivar tailstock_pressure:
    :vartype tailstock_pressure: str
    :ivar fixture:
    :vartype fixture: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Verified", and "Archived".
    :vartype status: str or ~ignos.api.client.models.CncOperationStatus
    :ivar deleted: Required.
    :vartype deleted: bool
    """

    _validation = {
        "status": {"required": True},
        "deleted": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "machine_id": {"key": "machineId", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "chuck_jaws": {"key": "chuckJaws", "type": "str"},
        "chuck_pressure": {"key": "chuckPressure", "type": "str"},
        "tailstock": {"key": "tailstock", "type": "str"},
        "tailstock_pressure": {"key": "tailstockPressure", "type": "str"},
        "fixture": {"key": "fixture", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "deleted": {"key": "deleted", "type": "bool"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.CncOperationStatus"],
        deleted: bool,
        operation: Optional[int] = None,
        machine_id: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        chuck_jaws: Optional[str] = None,
        chuck_pressure: Optional[str] = None,
        tailstock: Optional[str] = None,
        tailstock_pressure: Optional[str] = None,
        fixture: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation:
        :paramtype operation: int
        :keyword machine_id:
        :paramtype machine_id: str
        :keyword title:
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword chuck_jaws:
        :paramtype chuck_jaws: str
        :keyword chuck_pressure:
        :paramtype chuck_pressure: str
        :keyword tailstock:
        :paramtype tailstock: str
        :keyword tailstock_pressure:
        :paramtype tailstock_pressure: str
        :keyword fixture:
        :paramtype fixture: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Verified", and "Archived".
        :paramtype status: str or ~ignos.api.client.models.CncOperationStatus
        :keyword deleted: Required.
        :paramtype deleted: bool
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.machine_id = machine_id
        self.title = title
        self.description = description
        self.chuck_jaws = chuck_jaws
        self.chuck_pressure = chuck_pressure
        self.tailstock = tailstock
        self.tailstock_pressure = tailstock_pressure
        self.fixture = fixture
        self.status = status
        self.deleted = deleted


class UpdateCncMachineOperationToolRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpdateCncMachineOperationToolRequest.

    All required parameters must be populated in order to send to server.

    :ivar tool_type_id: Required.
    :vartype tool_type_id: str
    :ivar tool_sub_type_id: Required.
    :vartype tool_sub_type_id: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar tool_suffix:
    :vartype tool_suffix: str
    :ivar description:
    :vartype description: str
    :ivar holder_description:
    :vartype holder_description: str
    :ivar geometry:
    :vartype geometry: str
    :ivar size:
    :vartype size: str
    :ivar diameter:
    :vartype diameter: float
    :ivar grade:
    :vartype grade: str
    :ivar radius:
    :vartype radius: float
    :ivar chamfer:
    :vartype chamfer: float
    :ivar width:
    :vartype width: float
    :ivar pitch:
    :vartype pitch: str
    :ivar length:
    :vartype length: float
    :ivar kapr:
    :vartype kapr: float
    :ivar teeth:
    :vartype teeth: int
    :ivar stick_out:
    :vartype stick_out: float
    :ivar apmx:
    :vartype apmx: float
    :ivar usable_length:
    :vartype usable_length: float
    """

    _validation = {
        "tool_type_id": {"required": True, "min_length": 1},
        "tool_sub_type_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tool_type_id": {"key": "toolTypeId", "type": "str"},
        "tool_sub_type_id": {"key": "toolSubTypeId", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "tool_suffix": {"key": "toolSuffix", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "holder_description": {"key": "holderDescription", "type": "str"},
        "geometry": {"key": "geometry", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "diameter": {"key": "diameter", "type": "float"},
        "grade": {"key": "grade", "type": "str"},
        "radius": {"key": "radius", "type": "float"},
        "chamfer": {"key": "chamfer", "type": "float"},
        "width": {"key": "width", "type": "float"},
        "pitch": {"key": "pitch", "type": "str"},
        "length": {"key": "length", "type": "float"},
        "kapr": {"key": "kapr", "type": "float"},
        "teeth": {"key": "teeth", "type": "int"},
        "stick_out": {"key": "stickOut", "type": "float"},
        "apmx": {"key": "apmx", "type": "float"},
        "usable_length": {"key": "usableLength", "type": "float"},
    }

    def __init__(
        self,
        *,
        tool_type_id: str,
        tool_sub_type_id: str,
        tool_number: Optional[str] = None,
        tool_suffix: Optional[str] = None,
        description: Optional[str] = None,
        holder_description: Optional[str] = None,
        geometry: Optional[str] = None,
        size: Optional[str] = None,
        diameter: Optional[float] = None,
        grade: Optional[str] = None,
        radius: Optional[float] = None,
        chamfer: Optional[float] = None,
        width: Optional[float] = None,
        pitch: Optional[str] = None,
        length: Optional[float] = None,
        kapr: Optional[float] = None,
        teeth: Optional[int] = None,
        stick_out: Optional[float] = None,
        apmx: Optional[float] = None,
        usable_length: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tool_type_id: Required.
        :paramtype tool_type_id: str
        :keyword tool_sub_type_id: Required.
        :paramtype tool_sub_type_id: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword tool_suffix:
        :paramtype tool_suffix: str
        :keyword description:
        :paramtype description: str
        :keyword holder_description:
        :paramtype holder_description: str
        :keyword geometry:
        :paramtype geometry: str
        :keyword size:
        :paramtype size: str
        :keyword diameter:
        :paramtype diameter: float
        :keyword grade:
        :paramtype grade: str
        :keyword radius:
        :paramtype radius: float
        :keyword chamfer:
        :paramtype chamfer: float
        :keyword width:
        :paramtype width: float
        :keyword pitch:
        :paramtype pitch: str
        :keyword length:
        :paramtype length: float
        :keyword kapr:
        :paramtype kapr: float
        :keyword teeth:
        :paramtype teeth: int
        :keyword stick_out:
        :paramtype stick_out: float
        :keyword apmx:
        :paramtype apmx: float
        :keyword usable_length:
        :paramtype usable_length: float
        """
        super().__init__(**kwargs)
        self.tool_type_id = tool_type_id
        self.tool_sub_type_id = tool_sub_type_id
        self.tool_number = tool_number
        self.tool_suffix = tool_suffix
        self.description = description
        self.holder_description = holder_description
        self.geometry = geometry
        self.size = size
        self.diameter = diameter
        self.grade = grade
        self.radius = radius
        self.chamfer = chamfer
        self.width = width
        self.pitch = pitch
        self.length = length
        self.kapr = kapr
        self.teeth = teeth
        self.stick_out = stick_out
        self.apmx = apmx
        self.usable_length = usable_length


class UpdateCncMachineRequest(_serialization.Model):
    """UpdateCncMachineRequest.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, name: str, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description


class UpdateCncMachineToolRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpdateCncMachineToolRequest.

    All required parameters must be populated in order to send to server.

    :ivar tool_type_id: Required.
    :vartype tool_type_id: str
    :ivar tool_sub_type_id: Required.
    :vartype tool_sub_type_id: str
    :ivar tool_number:
    :vartype tool_number: str
    :ivar tool_suffix:
    :vartype tool_suffix: str
    :ivar description:
    :vartype description: str
    :ivar holder_description:
    :vartype holder_description: str
    :ivar geometry:
    :vartype geometry: str
    :ivar size:
    :vartype size: str
    :ivar diameter:
    :vartype diameter: float
    :ivar grade:
    :vartype grade: str
    :ivar radius:
    :vartype radius: float
    :ivar chamfer:
    :vartype chamfer: float
    :ivar width:
    :vartype width: float
    :ivar pitch:
    :vartype pitch: str
    :ivar length:
    :vartype length: float
    :ivar kapr:
    :vartype kapr: float
    :ivar teeth:
    :vartype teeth: int
    :ivar stick_out:
    :vartype stick_out: float
    :ivar apmx:
    :vartype apmx: float
    :ivar usable_length:
    :vartype usable_length: float
    """

    _validation = {
        "tool_type_id": {"required": True, "min_length": 1},
        "tool_sub_type_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "tool_type_id": {"key": "toolTypeId", "type": "str"},
        "tool_sub_type_id": {"key": "toolSubTypeId", "type": "str"},
        "tool_number": {"key": "toolNumber", "type": "str"},
        "tool_suffix": {"key": "toolSuffix", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "holder_description": {"key": "holderDescription", "type": "str"},
        "geometry": {"key": "geometry", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "diameter": {"key": "diameter", "type": "float"},
        "grade": {"key": "grade", "type": "str"},
        "radius": {"key": "radius", "type": "float"},
        "chamfer": {"key": "chamfer", "type": "float"},
        "width": {"key": "width", "type": "float"},
        "pitch": {"key": "pitch", "type": "str"},
        "length": {"key": "length", "type": "float"},
        "kapr": {"key": "kapr", "type": "float"},
        "teeth": {"key": "teeth", "type": "int"},
        "stick_out": {"key": "stickOut", "type": "float"},
        "apmx": {"key": "apmx", "type": "float"},
        "usable_length": {"key": "usableLength", "type": "float"},
    }

    def __init__(
        self,
        *,
        tool_type_id: str,
        tool_sub_type_id: str,
        tool_number: Optional[str] = None,
        tool_suffix: Optional[str] = None,
        description: Optional[str] = None,
        holder_description: Optional[str] = None,
        geometry: Optional[str] = None,
        size: Optional[str] = None,
        diameter: Optional[float] = None,
        grade: Optional[str] = None,
        radius: Optional[float] = None,
        chamfer: Optional[float] = None,
        width: Optional[float] = None,
        pitch: Optional[str] = None,
        length: Optional[float] = None,
        kapr: Optional[float] = None,
        teeth: Optional[int] = None,
        stick_out: Optional[float] = None,
        apmx: Optional[float] = None,
        usable_length: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tool_type_id: Required.
        :paramtype tool_type_id: str
        :keyword tool_sub_type_id: Required.
        :paramtype tool_sub_type_id: str
        :keyword tool_number:
        :paramtype tool_number: str
        :keyword tool_suffix:
        :paramtype tool_suffix: str
        :keyword description:
        :paramtype description: str
        :keyword holder_description:
        :paramtype holder_description: str
        :keyword geometry:
        :paramtype geometry: str
        :keyword size:
        :paramtype size: str
        :keyword diameter:
        :paramtype diameter: float
        :keyword grade:
        :paramtype grade: str
        :keyword radius:
        :paramtype radius: float
        :keyword chamfer:
        :paramtype chamfer: float
        :keyword width:
        :paramtype width: float
        :keyword pitch:
        :paramtype pitch: str
        :keyword length:
        :paramtype length: float
        :keyword kapr:
        :paramtype kapr: float
        :keyword teeth:
        :paramtype teeth: int
        :keyword stick_out:
        :paramtype stick_out: float
        :keyword apmx:
        :paramtype apmx: float
        :keyword usable_length:
        :paramtype usable_length: float
        """
        super().__init__(**kwargs)
        self.tool_type_id = tool_type_id
        self.tool_sub_type_id = tool_sub_type_id
        self.tool_number = tool_number
        self.tool_suffix = tool_suffix
        self.description = description
        self.holder_description = holder_description
        self.geometry = geometry
        self.size = size
        self.diameter = diameter
        self.grade = grade
        self.radius = radius
        self.chamfer = chamfer
        self.width = width
        self.pitch = pitch
        self.length = length
        self.kapr = kapr
        self.teeth = teeth
        self.stick_out = stick_out
        self.apmx = apmx
        self.usable_length = usable_length


class UpdateCncPartRequest(_serialization.Model):
    """UpdateCncPartRequest.

    All required parameters must be populated in order to send to server.

    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar part_number:
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    :ivar material:
    :vartype material: str
    :ivar deleted: Required.
    :vartype deleted: bool
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "deleted": {"required": True},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_revision": {"key": "partRevision", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "drawing": {"key": "drawing", "type": "str"},
        "drawing_revision": {"key": "drawingRevision", "type": "str"},
        "material": {"key": "material", "type": "str"},
        "deleted": {"key": "deleted", "type": "bool"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        deleted: bool,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        part_name: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        material: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        :keyword material:
        :paramtype material: str
        :keyword deleted: Required.
        :paramtype deleted: bool
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.part_number = part_number
        self.part_revision = part_revision
        self.part_name = part_name
        self.drawing = drawing
        self.drawing_revision = drawing_revision
        self.material = material
        self.deleted = deleted
        self.description = description


class UpdateCompanyUserRequest(_serialization.Model):
    """UpdateCompanyUserRequest.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar roles: Required.
    :vartype roles: list[str]
    :ivar company_id:
    :vartype company_id: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "roles": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "roles": {"key": "roles", "type": "[str]"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(self, *, name: str, roles: List[str], company_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword roles: Required.
        :paramtype roles: list[str]
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.roles = roles
        self.company_id = company_id


class UpdateDocumentTypeRequest(_serialization.Model):
    """UpdateDocumentTypeRequest.

    All required parameters must be populated in order to send to server.

    :ivar title: Required.
    :vartype title: str
    :ivar description:
    :vartype description: str
    :ivar workflow_type: Required. Known values are: "None", "CustomerProvided",
     "CustomerApproval", and "InternalWithFix".
    :vartype workflow_type: str or ~ignos.api.client.models.DocumentWorkflowType
    :ivar is_internal_document_type: Required.
    :vartype is_internal_document_type: bool
    :ivar is_generated_document_type: Required.
    :vartype is_generated_document_type: bool
    :ivar require_portable_file: Required.
    :vartype require_portable_file: bool
    :ivar category: Required. Known values are: "General", "Procedure", "Drawing", "Report", and
     "Certificate".
    :vartype category: str or ~ignos.api.client.models.DocumentTypeCategory
    :ivar document_requirement_strategy: Required. Known values are: "None", "WorkOrder", "Lot",
     "Drawing", and "CustomerOrderLine".
    :vartype document_requirement_strategy: str or
     ~ignos.api.client.models.DocumentRequirementStrategy
    :ivar can_have_certificate: Required.
    :vartype can_have_certificate: bool
    :ivar generated_document_key:
    :vartype generated_document_key: str
    """

    _validation = {
        "title": {"required": True, "min_length": 1},
        "workflow_type": {"required": True},
        "is_internal_document_type": {"required": True},
        "is_generated_document_type": {"required": True},
        "require_portable_file": {"required": True},
        "category": {"required": True},
        "document_requirement_strategy": {"required": True},
        "can_have_certificate": {"required": True},
    }

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "workflow_type": {"key": "workflowType", "type": "str"},
        "is_internal_document_type": {"key": "isInternalDocumentType", "type": "bool"},
        "is_generated_document_type": {"key": "isGeneratedDocumentType", "type": "bool"},
        "require_portable_file": {"key": "requirePortableFile", "type": "bool"},
        "category": {"key": "category", "type": "str"},
        "document_requirement_strategy": {"key": "documentRequirementStrategy", "type": "str"},
        "can_have_certificate": {"key": "canHaveCertificate", "type": "bool"},
        "generated_document_key": {"key": "generatedDocumentKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        title: str,
        workflow_type: Union[str, "_models.DocumentWorkflowType"],
        is_internal_document_type: bool,
        is_generated_document_type: bool,
        require_portable_file: bool,
        category: Union[str, "_models.DocumentTypeCategory"],
        document_requirement_strategy: Union[str, "_models.DocumentRequirementStrategy"],
        can_have_certificate: bool,
        description: Optional[str] = None,
        generated_document_key: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword title: Required.
        :paramtype title: str
        :keyword description:
        :paramtype description: str
        :keyword workflow_type: Required. Known values are: "None", "CustomerProvided",
         "CustomerApproval", and "InternalWithFix".
        :paramtype workflow_type: str or ~ignos.api.client.models.DocumentWorkflowType
        :keyword is_internal_document_type: Required.
        :paramtype is_internal_document_type: bool
        :keyword is_generated_document_type: Required.
        :paramtype is_generated_document_type: bool
        :keyword require_portable_file: Required.
        :paramtype require_portable_file: bool
        :keyword category: Required. Known values are: "General", "Procedure", "Drawing", "Report", and
         "Certificate".
        :paramtype category: str or ~ignos.api.client.models.DocumentTypeCategory
        :keyword document_requirement_strategy: Required. Known values are: "None", "WorkOrder", "Lot",
         "Drawing", and "CustomerOrderLine".
        :paramtype document_requirement_strategy: str or
         ~ignos.api.client.models.DocumentRequirementStrategy
        :keyword can_have_certificate: Required.
        :paramtype can_have_certificate: bool
        :keyword generated_document_key:
        :paramtype generated_document_key: str
        """
        super().__init__(**kwargs)
        self.title = title
        self.description = description
        self.workflow_type = workflow_type
        self.is_internal_document_type = is_internal_document_type
        self.is_generated_document_type = is_generated_document_type
        self.require_portable_file = require_portable_file
        self.category = category
        self.document_requirement_strategy = document_requirement_strategy
        self.can_have_certificate = can_have_certificate
        self.generated_document_key = generated_document_key


class UpdateDocumentTypeRuleRequest(_serialization.Model):
    """UpdateDocumentTypeRuleRequest.

    All required parameters must be populated in order to send to server.

    :ivar rules: Required.
    :vartype rules: list[~ignos.api.client.models.DocumentTypeRuleDto]
    """

    _validation = {
        "rules": {"required": True},
    }

    _attribute_map = {
        "rules": {"key": "rules", "type": "[DocumentTypeRuleDto]"},
    }

    def __init__(self, *, rules: List["_models.DocumentTypeRuleDto"], **kwargs: Any) -> None:
        """
        :keyword rules: Required.
        :paramtype rules: list[~ignos.api.client.models.DocumentTypeRuleDto]
        """
        super().__init__(**kwargs)
        self.rules = rules


class UpdateMachineGroup(_serialization.Model):
    """UpdateMachineGroup.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar machine_external_ids:
    :vartype machine_external_ids: list[str]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "machine_external_ids": {"key": "machineExternalIds", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        machine_external_ids: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword machine_external_ids:
        :paramtype machine_external_ids: list[str]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.machine_external_ids = machine_external_ids


class UpdateMachineInactivitySubscription(_serialization.Model):
    """UpdateMachineInactivitySubscription.

    All required parameters must be populated in order to send to server.

    :ivar subscription_id: Required.
    :vartype subscription_id: str
    :ivar enabled: Required.
    :vartype enabled: bool
    """

    _validation = {
        "subscription_id": {"required": True, "min_length": 1},
        "enabled": {"required": True},
    }

    _attribute_map = {
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
    }

    def __init__(self, *, subscription_id: str, enabled: bool, **kwargs: Any) -> None:
        """
        :keyword subscription_id: Required.
        :paramtype subscription_id: str
        :keyword enabled: Required.
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.subscription_id = subscription_id
        self.enabled = enabled


class UpdateMeasurementFormCustomerSettings(_serialization.Model):
    """UpdateMeasurementFormCustomerSettings.

    All required parameters must be populated in order to send to server.

    :ivar customer_id: Required.
    :vartype customer_id: str
    :ivar customer_name: Required.
    :vartype customer_name: str
    :ivar include_tools_in_report: Required.
    :vartype include_tools_in_report: bool
    :ivar validation_rule_id:
    :vartype validation_rule_id: str
    :ivar require_calibrated_tools: Required.
    :vartype require_calibrated_tools: bool
    """

    _validation = {
        "customer_id": {"required": True, "min_length": 1},
        "customer_name": {"required": True, "min_length": 1},
        "include_tools_in_report": {"required": True},
        "require_calibrated_tools": {"required": True},
    }

    _attribute_map = {
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "include_tools_in_report": {"key": "includeToolsInReport", "type": "bool"},
        "validation_rule_id": {"key": "validationRuleId", "type": "str"},
        "require_calibrated_tools": {"key": "requireCalibratedTools", "type": "bool"},
    }

    def __init__(
        self,
        *,
        customer_id: str,
        customer_name: str,
        include_tools_in_report: bool,
        require_calibrated_tools: bool,
        validation_rule_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_id: Required.
        :paramtype customer_id: str
        :keyword customer_name: Required.
        :paramtype customer_name: str
        :keyword include_tools_in_report: Required.
        :paramtype include_tools_in_report: bool
        :keyword validation_rule_id:
        :paramtype validation_rule_id: str
        :keyword require_calibrated_tools: Required.
        :paramtype require_calibrated_tools: bool
        """
        super().__init__(**kwargs)
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.include_tools_in_report = include_tools_in_report
        self.validation_rule_id = validation_rule_id
        self.require_calibrated_tools = require_calibrated_tools


class UpdateMeasurementFormInstanceRequest(_serialization.Model):
    """UpdateMeasurementFormInstanceRequest.

    All required parameters must be populated in order to send to server.

    :ivar sequences: Required.
    :vartype sequences: list[~ignos.api.client.models.MeasurementFormWorkorderSequenceDto]
    :ivar suppliers: Required.
    :vartype suppliers: list[~ignos.api.client.models.MeasurementFormWorkorderSupplierDto]
    """

    _validation = {
        "sequences": {"required": True},
        "suppliers": {"required": True},
    }

    _attribute_map = {
        "sequences": {"key": "sequences", "type": "[MeasurementFormWorkorderSequenceDto]"},
        "suppliers": {"key": "suppliers", "type": "[MeasurementFormWorkorderSupplierDto]"},
    }

    def __init__(
        self,
        *,
        sequences: List["_models.MeasurementFormWorkorderSequenceDto"],
        suppliers: List["_models.MeasurementFormWorkorderSupplierDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword sequences: Required.
        :paramtype sequences: list[~ignos.api.client.models.MeasurementFormWorkorderSequenceDto]
        :keyword suppliers: Required.
        :paramtype suppliers: list[~ignos.api.client.models.MeasurementFormWorkorderSupplierDto]
        """
        super().__init__(**kwargs)
        self.sequences = sequences
        self.suppliers = suppliers


class UpdateMeasurementFormSchemaRequest(_serialization.Model):
    """UpdateMeasurementFormSchemaRequest.

    All required parameters must be populated in order to send to server.

    :ivar exclude_from_customer_documentation: Required.
    :vartype exclude_from_customer_documentation: bool
    :ivar specification:
    :vartype specification: str
    """

    _validation = {
        "exclude_from_customer_documentation": {"required": True},
    }

    _attribute_map = {
        "exclude_from_customer_documentation": {"key": "excludeFromCustomerDocumentation", "type": "bool"},
        "specification": {"key": "specification", "type": "str"},
    }

    def __init__(
        self, *, exclude_from_customer_documentation: bool, specification: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword exclude_from_customer_documentation: Required.
        :paramtype exclude_from_customer_documentation: bool
        :keyword specification:
        :paramtype specification: str
        """
        super().__init__(**kwargs)
        self.exclude_from_customer_documentation = exclude_from_customer_documentation
        self.specification = specification


class UpdateMeasurementFormSettings(_serialization.Model):
    """UpdateMeasurementFormSettings.

    All required parameters must be populated in order to send to server.

    :ivar convert_inch_to_mm: Required.
    :vartype convert_inch_to_mm: bool
    :ivar validate_measuring_tools: Required.
    :vartype validate_measuring_tools: bool
    :ivar validate_measuring_tools_for_suppliers: Required.
    :vartype validate_measuring_tools_for_suppliers: bool
    :ivar generate_schema_requirements: Required.
    :vartype generate_schema_requirements: bool
    :ivar generate_schema_instances: Required.
    :vartype generate_schema_instances: bool
    :ivar auto_complete_schema_instances: Required.
    :vartype auto_complete_schema_instances: bool
    :ivar generate_report_for_approved_instances: Required.
    :vartype generate_report_for_approved_instances: bool
    :ivar include_measuring_tools_in_report_as_default: Required.
    :vartype include_measuring_tools_in_report_as_default: bool
    :ivar resource_types_blocking_auto_workflow:
    :vartype resource_types_blocking_auto_workflow: list[str]
    """

    _validation = {
        "convert_inch_to_mm": {"required": True},
        "validate_measuring_tools": {"required": True},
        "validate_measuring_tools_for_suppliers": {"required": True},
        "generate_schema_requirements": {"required": True},
        "generate_schema_instances": {"required": True},
        "auto_complete_schema_instances": {"required": True},
        "generate_report_for_approved_instances": {"required": True},
        "include_measuring_tools_in_report_as_default": {"required": True},
    }

    _attribute_map = {
        "convert_inch_to_mm": {"key": "convertInchToMm", "type": "bool"},
        "validate_measuring_tools": {"key": "validateMeasuringTools", "type": "bool"},
        "validate_measuring_tools_for_suppliers": {"key": "validateMeasuringToolsForSuppliers", "type": "bool"},
        "generate_schema_requirements": {"key": "generateSchemaRequirements", "type": "bool"},
        "generate_schema_instances": {"key": "generateSchemaInstances", "type": "bool"},
        "auto_complete_schema_instances": {"key": "autoCompleteSchemaInstances", "type": "bool"},
        "generate_report_for_approved_instances": {"key": "generateReportForApprovedInstances", "type": "bool"},
        "include_measuring_tools_in_report_as_default": {
            "key": "includeMeasuringToolsInReportAsDefault",
            "type": "bool",
        },
        "resource_types_blocking_auto_workflow": {"key": "resourceTypesBlockingAutoWorkflow", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        convert_inch_to_mm: bool,
        validate_measuring_tools: bool,
        validate_measuring_tools_for_suppliers: bool,
        generate_schema_requirements: bool,
        generate_schema_instances: bool,
        auto_complete_schema_instances: bool,
        generate_report_for_approved_instances: bool,
        include_measuring_tools_in_report_as_default: bool,
        resource_types_blocking_auto_workflow: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword convert_inch_to_mm: Required.
        :paramtype convert_inch_to_mm: bool
        :keyword validate_measuring_tools: Required.
        :paramtype validate_measuring_tools: bool
        :keyword validate_measuring_tools_for_suppliers: Required.
        :paramtype validate_measuring_tools_for_suppliers: bool
        :keyword generate_schema_requirements: Required.
        :paramtype generate_schema_requirements: bool
        :keyword generate_schema_instances: Required.
        :paramtype generate_schema_instances: bool
        :keyword auto_complete_schema_instances: Required.
        :paramtype auto_complete_schema_instances: bool
        :keyword generate_report_for_approved_instances: Required.
        :paramtype generate_report_for_approved_instances: bool
        :keyword include_measuring_tools_in_report_as_default: Required.
        :paramtype include_measuring_tools_in_report_as_default: bool
        :keyword resource_types_blocking_auto_workflow:
        :paramtype resource_types_blocking_auto_workflow: list[str]
        """
        super().__init__(**kwargs)
        self.convert_inch_to_mm = convert_inch_to_mm
        self.validate_measuring_tools = validate_measuring_tools
        self.validate_measuring_tools_for_suppliers = validate_measuring_tools_for_suppliers
        self.generate_schema_requirements = generate_schema_requirements
        self.generate_schema_instances = generate_schema_instances
        self.auto_complete_schema_instances = auto_complete_schema_instances
        self.generate_report_for_approved_instances = generate_report_for_approved_instances
        self.include_measuring_tools_in_report_as_default = include_measuring_tools_in_report_as_default
        self.resource_types_blocking_auto_workflow = resource_types_blocking_auto_workflow


class UpdateMeasuringToolRequest(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpdateMeasuringToolRequest.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar manufacturer: Required.
    :vartype manufacturer: str
    :ivar type_id: Required.
    :vartype type_id: str
    :ivar sub_type_id:
    :vartype sub_type_id: str
    :ivar unit_id:
    :vartype unit_id: str
    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    :ivar serial_number:
    :vartype serial_number: str
    :ivar default_location:
    :vartype default_location: str
    :ivar precision:
    :vartype precision: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
        "manufacturer": {"required": True, "min_length": 1},
        "type_id": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "manufacturer": {"key": "manufacturer", "type": "str"},
        "type_id": {"key": "typeId", "type": "str"},
        "sub_type_id": {"key": "subTypeId", "type": "str"},
        "unit_id": {"key": "unitId", "type": "str"},
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "min": {"key": "min", "type": "float"},
        "max": {"key": "max", "type": "float"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "default_location": {"key": "defaultLocation", "type": "str"},
        "precision": {"key": "precision", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        manufacturer: str,
        type_id: str,
        sub_type_id: Optional[str] = None,
        unit_id: Optional[str] = None,
        calibration_interval: Optional[int] = None,
        min: Optional[float] = None,  # pylint: disable=redefined-builtin
        max: Optional[float] = None,  # pylint: disable=redefined-builtin
        serial_number: Optional[str] = None,
        default_location: Optional[str] = None,
        precision: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword manufacturer: Required.
        :paramtype manufacturer: str
        :keyword type_id: Required.
        :paramtype type_id: str
        :keyword sub_type_id:
        :paramtype sub_type_id: str
        :keyword unit_id:
        :paramtype unit_id: str
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword default_location:
        :paramtype default_location: str
        :keyword precision:
        :paramtype precision: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.manufacturer = manufacturer
        self.type_id = type_id
        self.sub_type_id = sub_type_id
        self.unit_id = unit_id
        self.calibration_interval = calibration_interval
        self.min = min
        self.max = max
        self.serial_number = serial_number
        self.default_location = default_location
        self.precision = precision


class UpdateMeasuringToolSettings(_serialization.Model):
    """UpdateMeasuringToolSettings.

    All required parameters must be populated in order to send to server.

    :ivar disable_user_defined_identifiers_for_calibrated_tools: Required.
    :vartype disable_user_defined_identifiers_for_calibrated_tools: bool
    :ivar disable_user_defined_identifiers_for_uncalibrated_tools: Required.
    :vartype disable_user_defined_identifiers_for_uncalibrated_tools: bool
    """

    _validation = {
        "disable_user_defined_identifiers_for_calibrated_tools": {"required": True},
        "disable_user_defined_identifiers_for_uncalibrated_tools": {"required": True},
    }

    _attribute_map = {
        "disable_user_defined_identifiers_for_calibrated_tools": {
            "key": "disableUserDefinedIdentifiersForCalibratedTools",
            "type": "bool",
        },
        "disable_user_defined_identifiers_for_uncalibrated_tools": {
            "key": "disableUserDefinedIdentifiersForUncalibratedTools",
            "type": "bool",
        },
    }

    def __init__(
        self,
        *,
        disable_user_defined_identifiers_for_calibrated_tools: bool,
        disable_user_defined_identifiers_for_uncalibrated_tools: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword disable_user_defined_identifiers_for_calibrated_tools: Required.
        :paramtype disable_user_defined_identifiers_for_calibrated_tools: bool
        :keyword disable_user_defined_identifiers_for_uncalibrated_tools: Required.
        :paramtype disable_user_defined_identifiers_for_uncalibrated_tools: bool
        """
        super().__init__(**kwargs)
        self.disable_user_defined_identifiers_for_calibrated_tools = (
            disable_user_defined_identifiers_for_calibrated_tools
        )
        self.disable_user_defined_identifiers_for_uncalibrated_tools = (
            disable_user_defined_identifiers_for_uncalibrated_tools
        )


class UpdateMeasuringToolSubTypeRequest(_serialization.Model):
    """UpdateMeasuringToolSubTypeRequest.

    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar max_number_of_usages_between_calibration:
    :vartype max_number_of_usages_between_calibration: int
    """

    _attribute_map = {
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "max_number_of_usages_between_calibration": {"key": "maxNumberOfUsagesBetweenCalibration", "type": "int"},
    }

    def __init__(
        self,
        *,
        calibration_interval: Optional[int] = None,
        max_number_of_usages_between_calibration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword max_number_of_usages_between_calibration:
        :paramtype max_number_of_usages_between_calibration: int
        """
        super().__init__(**kwargs)
        self.calibration_interval = calibration_interval
        self.max_number_of_usages_between_calibration = max_number_of_usages_between_calibration


class UpdateMeasuringToolTypeRequest(_serialization.Model):
    """UpdateMeasuringToolTypeRequest.

    :ivar calibration_interval:
    :vartype calibration_interval: int
    :ivar max_number_of_usages_between_calibration:
    :vartype max_number_of_usages_between_calibration: int
    """

    _attribute_map = {
        "calibration_interval": {"key": "calibrationInterval", "type": "int"},
        "max_number_of_usages_between_calibration": {"key": "maxNumberOfUsagesBetweenCalibration", "type": "int"},
    }

    def __init__(
        self,
        *,
        calibration_interval: Optional[int] = None,
        max_number_of_usages_between_calibration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword calibration_interval:
        :paramtype calibration_interval: int
        :keyword max_number_of_usages_between_calibration:
        :paramtype max_number_of_usages_between_calibration: int
        """
        super().__init__(**kwargs)
        self.calibration_interval = calibration_interval
        self.max_number_of_usages_between_calibration = max_number_of_usages_between_calibration


class UpdateMesLink(_serialization.Model):
    """UpdateMesLink.

    :ivar id:
    :vartype id: str
    :ivar uri:
    :vartype uri: str
    :ivar name:
    :vartype name: str
    :ivar type: Known values are: "Static", "Operation", and "WorkOrder".
    :vartype type: str or ~ignos.api.client.models.MesLinkTypeDto
    :ivar company_id:
    :vartype company_id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "uri": {"key": "uri", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        uri: Optional[str] = None,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.MesLinkTypeDto"]] = None,
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword uri:
        :paramtype uri: str
        :keyword name:
        :paramtype name: str
        :keyword type: Known values are: "Static", "Operation", and "WorkOrder".
        :paramtype type: str or ~ignos.api.client.models.MesLinkTypeDto
        :keyword company_id:
        :paramtype company_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.uri = uri
        self.name = name
        self.type = type
        self.company_id = company_id


class UpdateMrbTemplate(_serialization.Model):
    """UpdateMrbTemplate.

    :ivar id:
    :vartype id: str
    :ivar title:
    :vartype title: str
    :ivar table_of_contents:
    :vartype table_of_contents: ~ignos.api.client.models.MrbTemplateTableOfContentsDto
    :ivar elements:
    :vartype elements: list[~ignos.api.client.models.MrbTemplateUpdateElementDto]
    :ivar content_indicator:
    :vartype content_indicator: str
    :ivar no_content_indicator:
    :vartype no_content_indicator: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "table_of_contents": {"key": "tableOfContents", "type": "MrbTemplateTableOfContentsDto"},
        "elements": {"key": "elements", "type": "[MrbTemplateUpdateElementDto]"},
        "content_indicator": {"key": "contentIndicator", "type": "str"},
        "no_content_indicator": {"key": "noContentIndicator", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        title: Optional[str] = None,
        table_of_contents: Optional["_models.MrbTemplateTableOfContentsDto"] = None,
        elements: Optional[List["_models.MrbTemplateUpdateElementDto"]] = None,
        content_indicator: Optional[str] = None,
        no_content_indicator: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword title:
        :paramtype title: str
        :keyword table_of_contents:
        :paramtype table_of_contents: ~ignos.api.client.models.MrbTemplateTableOfContentsDto
        :keyword elements:
        :paramtype elements: list[~ignos.api.client.models.MrbTemplateUpdateElementDto]
        :keyword content_indicator:
        :paramtype content_indicator: str
        :keyword no_content_indicator:
        :paramtype no_content_indicator: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.title = title
        self.table_of_contents = table_of_contents
        self.elements = elements
        self.content_indicator = content_indicator
        self.no_content_indicator = no_content_indicator


class UpdateProgramFileRequest(_serialization.Model):
    """UpdateProgramFileRequest.

    All required parameters must be populated in order to send to server.

    :ivar deleted: Required.
    :vartype deleted: bool
    """

    _validation = {
        "deleted": {"required": True},
    }

    _attribute_map = {
        "deleted": {"key": "deleted", "type": "bool"},
    }

    def __init__(self, *, deleted: bool, **kwargs: Any) -> None:
        """
        :keyword deleted: Required.
        :paramtype deleted: bool
        """
        super().__init__(**kwargs)
        self.deleted = deleted


class UpdateSchemaGroupedElementDto(_serialization.Model):
    """UpdateSchemaGroupedElementDto.

    All required parameters must be populated in order to send to server.

    :ivar balloon_id: Required.
    :vartype balloon_id: str
    :ivar frequency: Required. Known values are: "All", "FirstArticle", "NFirst", "NPercent",
     "ISO2859", "Nth", and "None".
    :vartype frequency: str or ~ignos.api.client.models.MeasurementFrequency
    :ivar frequency_parameter:
    :vartype frequency_parameter: int
    :ivar include_in_customer_documentation: Required.
    :vartype include_in_customer_documentation: bool
    :ivar can_copy:
    :vartype can_copy: bool
    :ivar is_documented_externally: Required.
    :vartype is_documented_externally: bool
    """

    _validation = {
        "balloon_id": {"required": True, "min_length": 1},
        "frequency": {"required": True},
        "include_in_customer_documentation": {"required": True},
        "is_documented_externally": {"required": True},
    }

    _attribute_map = {
        "balloon_id": {"key": "balloonId", "type": "str"},
        "frequency": {"key": "frequency", "type": "str"},
        "frequency_parameter": {"key": "frequencyParameter", "type": "int"},
        "include_in_customer_documentation": {"key": "includeInCustomerDocumentation", "type": "bool"},
        "can_copy": {"key": "canCopy", "type": "bool"},
        "is_documented_externally": {"key": "isDocumentedExternally", "type": "bool"},
    }

    def __init__(
        self,
        *,
        balloon_id: str,
        frequency: Union[str, "_models.MeasurementFrequency"],
        include_in_customer_documentation: bool,
        is_documented_externally: bool,
        frequency_parameter: Optional[int] = None,
        can_copy: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword balloon_id: Required.
        :paramtype balloon_id: str
        :keyword frequency: Required. Known values are: "All", "FirstArticle", "NFirst", "NPercent",
         "ISO2859", "Nth", and "None".
        :paramtype frequency: str or ~ignos.api.client.models.MeasurementFrequency
        :keyword frequency_parameter:
        :paramtype frequency_parameter: int
        :keyword include_in_customer_documentation: Required.
        :paramtype include_in_customer_documentation: bool
        :keyword can_copy:
        :paramtype can_copy: bool
        :keyword is_documented_externally: Required.
        :paramtype is_documented_externally: bool
        """
        super().__init__(**kwargs)
        self.balloon_id = balloon_id
        self.frequency = frequency
        self.frequency_parameter = frequency_parameter
        self.include_in_customer_documentation = include_in_customer_documentation
        self.can_copy = can_copy
        self.is_documented_externally = is_documented_externally


class UpdateSchemaGroupedElementsRequest(_serialization.Model):
    """UpdateSchemaGroupedElementsRequest.

    All required parameters must be populated in order to send to server.

    :ivar grouped_elements: Required.
    :vartype grouped_elements: list[~ignos.api.client.models.UpdateSchemaGroupedElementDto]
    """

    _validation = {
        "grouped_elements": {"required": True},
    }

    _attribute_map = {
        "grouped_elements": {"key": "groupedElements", "type": "[UpdateSchemaGroupedElementDto]"},
    }

    def __init__(self, *, grouped_elements: List["_models.UpdateSchemaGroupedElementDto"], **kwargs: Any) -> None:
        """
        :keyword grouped_elements: Required.
        :paramtype grouped_elements: list[~ignos.api.client.models.UpdateSchemaGroupedElementDto]
        """
        super().__init__(**kwargs)
        self.grouped_elements = grouped_elements


class UpdateSchemaInstanceElementsRequest(_serialization.Model):
    """UpdateSchemaInstanceElementsRequest.

    :ivar elements:
    :vartype elements: list[~ignos.api.client.models.SchemaInstanceElementDto]
    """

    _attribute_map = {
        "elements": {"key": "elements", "type": "[SchemaInstanceElementDto]"},
    }

    def __init__(self, *, elements: Optional[List["_models.SchemaInstanceElementDto"]] = None, **kwargs: Any) -> None:
        """
        :keyword elements:
        :paramtype elements: list[~ignos.api.client.models.SchemaInstanceElementDto]
        """
        super().__init__(**kwargs)
        self.elements = elements


class UpdateTraceManualCompletionRequest(_serialization.Model):
    """UpdateTraceManualCompletionRequest.

    All required parameters must be populated in order to send to server.

    :ivar completed: Required.
    :vartype completed: bool
    """

    _validation = {
        "completed": {"required": True},
    }

    _attribute_map = {
        "completed": {"key": "completed", "type": "bool"},
    }

    def __init__(self, *, completed: bool, **kwargs: Any) -> None:
        """
        :keyword completed: Required.
        :paramtype completed: bool
        """
        super().__init__(**kwargs)
        self.completed = completed


class UpdateTraceRequest(_serialization.Model):
    """UpdateTraceRequest.

    All required parameters must be populated in order to send to server.

    :ivar items: Required.
    :vartype items: list[~ignos.api.client.models.TraceItemDto]
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "items": {"key": "items", "type": "[TraceItemDto]"},
    }

    def __init__(self, *, items: List["_models.TraceItemDto"], **kwargs: Any) -> None:
        """
        :keyword items: Required.
        :paramtype items: list[~ignos.api.client.models.TraceItemDto]
        """
        super().__init__(**kwargs)
        self.items = items


class UpdateWhitelistedMeasuringTool(_serialization.Model):
    """UpdateWhitelistedMeasuringTool.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar value: Required.
    :vartype value: str
    :ivar description: Required.
    :vartype description: str
    """

    _validation = {
        "id": {"required": True},
        "value": {"required": True, "min_length": 1},
        "description": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self, *, id: str, value: str, description: str, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword value: Required.
        :paramtype value: str
        :keyword description: Required.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.value = value
        self.description = description


class UpdateWorkorderOperationEventTimestamps(_serialization.Model):
    """UpdateWorkorderOperationEventTimestamps.

    :ivar event_id:
    :vartype event_id: str
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    """

    _attribute_map = {
        "event_id": {"key": "eventId", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        event_id: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword event_id:
        :paramtype event_id: str
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword end_time:
        :paramtype end_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.event_id = event_id
        self.start_time = start_time
        self.end_time = end_time


class UpdateWorkspaceRequest(_serialization.Model):
    """UpdateWorkspaceRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar settings:
    :vartype settings: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "settings": {"key": "settings", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        settings: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword settings:
        :paramtype settings: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self.settings = settings


class UpdateWorkspaceWidgetSettingsRequest(_serialization.Model):
    """UpdateWorkspaceWidgetSettingsRequest.

    All required parameters must be populated in order to send to server.

    :ivar settings: Required.
    :vartype settings: str
    """

    _validation = {
        "settings": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "settings": {"key": "settings", "type": "str"},
    }

    def __init__(self, *, settings: str, **kwargs: Any) -> None:
        """
        :keyword settings: Required.
        :paramtype settings: str
        """
        super().__init__(**kwargs)
        self.settings = settings


class UpdateWorkspaceWidgetsRequest(_serialization.Model):
    """UpdateWorkspaceWidgetsRequest.

    All required parameters must be populated in order to send to server.

    :ivar widgets: Required.
    :vartype widgets: list[~ignos.api.client.models.WorkspaceWidgetDto]
    """

    _validation = {
        "widgets": {"required": True},
    }

    _attribute_map = {
        "widgets": {"key": "widgets", "type": "[WorkspaceWidgetDto]"},
    }

    def __init__(self, *, widgets: List["_models.WorkspaceWidgetDto"], **kwargs: Any) -> None:
        """
        :keyword widgets: Required.
        :paramtype widgets: list[~ignos.api.client.models.WorkspaceWidgetDto]
        """
        super().__init__(**kwargs)
        self.widgets = widgets


class UploadCamFileDto(_serialization.Model):
    """UploadCamFileDto.

    All required parameters must be populated in order to send to server.

    :ivar upload_url: Required.
    :vartype upload_url: str
    :ivar path: Required.
    :vartype path: str
    :ivar url: Required.
    :vartype url: str
    """

    _validation = {
        "upload_url": {"required": True, "min_length": 1},
        "path": {"required": True, "min_length": 1},
        "url": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_url": {"key": "uploadUrl", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "url": {"key": "url", "type": "str"},
    }

    def __init__(self, *, upload_url: str, path: str, url: str, **kwargs: Any) -> None:
        """
        :keyword upload_url: Required.
        :paramtype upload_url: str
        :keyword path: Required.
        :paramtype path: str
        :keyword url: Required.
        :paramtype url: str
        """
        super().__init__(**kwargs)
        self.upload_url = upload_url
        self.path = path
        self.url = url


class UploadCamFileRequest(_serialization.Model):
    """UploadCamFileRequest.

    All required parameters must be populated in order to send to server.

    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, filename: str, **kwargs: Any) -> None:
        """
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.filename = filename


class UploadCncToolImageRequest(_serialization.Model):
    """UploadCncToolImageRequest.

    All required parameters must be populated in order to send to server.

    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "upload_key": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, upload_key: str, filename: str, **kwargs: Any) -> None:
        """
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.upload_key = upload_key
        self.filename = filename


class UploadDrawingRequest(_serialization.Model):
    """UploadDrawingRequest.

    All required parameters must be populated in order to send to server.

    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "upload_key": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, upload_key: str, filename: str, **kwargs: Any) -> None:
        """
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.upload_key = upload_key
        self.filename = filename


class UploadFileDto(_serialization.Model):
    """UploadFileDto.

    All required parameters must be populated in order to send to server.

    :ivar url: Required.
    :vartype url: str
    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "url": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, url: str, filename: str, **kwargs: Any) -> None:
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.url = url
        self.filename = filename


class UploadFileRequest(_serialization.Model):
    """UploadFileRequest.

    All required parameters must be populated in order to send to server.

    :ivar filenames: Required.
    :vartype filenames: list[str]
    """

    _validation = {
        "filenames": {"required": True},
    }

    _attribute_map = {
        "filenames": {"key": "filenames", "type": "[str]"},
    }

    def __init__(self, *, filenames: List[str], **kwargs: Any) -> None:
        """
        :keyword filenames: Required.
        :paramtype filenames: list[str]
        """
        super().__init__(**kwargs)
        self.filenames = filenames


class UploadInfoDto(_serialization.Model):
    """UploadInfoDto.

    :ivar base_url:
    :vartype base_url: str
    :ivar key:
    :vartype key: str
    :ivar access_key:
    :vartype access_key: str
    """

    _attribute_map = {
        "base_url": {"key": "baseUrl", "type": "str"},
        "key": {"key": "key", "type": "str"},
        "access_key": {"key": "accessKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        base_url: Optional[str] = None,
        key: Optional[str] = None,
        access_key: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword base_url:
        :paramtype base_url: str
        :keyword key:
        :paramtype key: str
        :keyword access_key:
        :paramtype access_key: str
        """
        super().__init__(**kwargs)
        self.base_url = base_url
        self.key = key
        self.access_key = access_key


class UploadPartDrawingRequest(_serialization.Model):
    """UploadPartDrawingRequest.

    All required parameters must be populated in order to send to server.

    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, filename: str, **kwargs: Any) -> None:
        """
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.filename = filename


class UploadRequest(_serialization.Model):
    """UploadRequest.

    All required parameters must be populated in order to send to server.

    :ivar upload_key: Required.
    :vartype upload_key: str
    :ivar filename: Required.
    :vartype filename: str
    """

    _validation = {
        "upload_key": {"required": True, "min_length": 1},
        "filename": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "upload_key": {"key": "uploadKey", "type": "str"},
        "filename": {"key": "filename", "type": "str"},
    }

    def __init__(self, *, upload_key: str, filename: str, **kwargs: Any) -> None:
        """
        :keyword upload_key: Required.
        :paramtype upload_key: str
        :keyword filename: Required.
        :paramtype filename: str
        """
        super().__init__(**kwargs)
        self.upload_key = upload_key
        self.filename = filename


class UpsertCustomerOrderRequest(_serialization.Model):
    """UpsertCustomerOrderRequest.

    All required parameters must be populated in order to send to server.

    :ivar external_order_number: External ordernumber. (ie: What your customer calls this order.).
    :vartype external_order_number: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed", and
     "Deleted".
    :vartype status: str or ~ignos.api.client.models.CustomerOrderStatus
    :ivar customer: Customer info. Required.
    :vartype customer: ~ignos.api.client.models.CustomerDto
    :ivar order_lines: Required.
    :vartype order_lines: list[~ignos.api.client.models.CustomerOrderLineDto]
    """

    _validation = {
        "status": {"required": True},
        "customer": {"required": True},
        "order_lines": {"required": True},
    }

    _attribute_map = {
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "customer": {"key": "customer", "type": "CustomerDto"},
        "order_lines": {"key": "orderLines", "type": "[CustomerOrderLineDto]"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.CustomerOrderStatus"],
        customer: "_models.CustomerDto",
        order_lines: List["_models.CustomerOrderLineDto"],
        external_order_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword external_order_number: External ordernumber. (ie: What your customer calls this
         order.).
        :paramtype external_order_number: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed", and
         "Deleted".
        :paramtype status: str or ~ignos.api.client.models.CustomerOrderStatus
        :keyword customer: Customer info. Required.
        :paramtype customer: ~ignos.api.client.models.CustomerDto
        :keyword order_lines: Required.
        :paramtype order_lines: list[~ignos.api.client.models.CustomerOrderLineDto]
        """
        super().__init__(**kwargs)
        self.external_order_number = external_order_number
        self.status = status
        self.customer = customer
        self.order_lines = order_lines


class UpsertCustomerRequest(_serialization.Model):
    """UpsertCustomerRequest.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar group_id:
    :vartype group_id: str
    :ivar group_name:
    :vartype group_name: str
    """

    _validation = {
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "group_id": {"key": "groupId", "type": "str"},
        "group_name": {"key": "groupName", "type": "str"},
    }

    def __init__(
        self, *, name: str, group_id: Optional[str] = None, group_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword group_id:
        :paramtype group_id: str
        :keyword group_name:
        :paramtype group_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.group_id = group_id
        self.group_name = group_name


class UpsertMrbCompanySettings(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpsertMrbCompanySettings.

    All required parameters must be populated in order to send to server.

    :ivar stamp_with_lot: Required.
    :vartype stamp_with_lot: bool
    :ivar stamp_with_vendor_batch: Required.
    :vartype stamp_with_vendor_batch: bool
    :ivar hide_lot_info: Required.
    :vartype hide_lot_info: bool
    :ivar hide_vendor_batch_info: Required.
    :vartype hide_vendor_batch_info: bool
    :ivar lot_label:
    :vartype lot_label: str
    :ivar vendor_batch_label:
    :vartype vendor_batch_label: str
    :ivar co_c_statement:
    :vartype co_c_statement: str
    :ivar address_lines: Required.
    :vartype address_lines: list[str]
    :ivar sequence_format:
    :vartype sequence_format: str
    :ivar batch_sequence_prefix:
    :vartype batch_sequence_prefix: str
    :ivar batch_sequence_format:
    :vartype batch_sequence_format: str
    :ivar detailed_transactions_missing_in_erp: Required.
    :vartype detailed_transactions_missing_in_erp: bool
    :ivar allow_material_replacement_on_consumptions: Required.
    :vartype allow_material_replacement_on_consumptions: bool
    :ivar non_splittable_trace_units: Required.
    :vartype non_splittable_trace_units: list[str]
    """

    _validation = {
        "stamp_with_lot": {"required": True},
        "stamp_with_vendor_batch": {"required": True},
        "hide_lot_info": {"required": True},
        "hide_vendor_batch_info": {"required": True},
        "address_lines": {"required": True},
        "detailed_transactions_missing_in_erp": {"required": True},
        "allow_material_replacement_on_consumptions": {"required": True},
        "non_splittable_trace_units": {"required": True},
    }

    _attribute_map = {
        "stamp_with_lot": {"key": "stampWithLot", "type": "bool"},
        "stamp_with_vendor_batch": {"key": "stampWithVendorBatch", "type": "bool"},
        "hide_lot_info": {"key": "hideLotInfo", "type": "bool"},
        "hide_vendor_batch_info": {"key": "hideVendorBatchInfo", "type": "bool"},
        "lot_label": {"key": "lotLabel", "type": "str"},
        "vendor_batch_label": {"key": "vendorBatchLabel", "type": "str"},
        "co_c_statement": {"key": "coCStatement", "type": "str"},
        "address_lines": {"key": "addressLines", "type": "[str]"},
        "sequence_format": {"key": "sequenceFormat", "type": "str"},
        "batch_sequence_prefix": {"key": "batchSequencePrefix", "type": "str"},
        "batch_sequence_format": {"key": "batchSequenceFormat", "type": "str"},
        "detailed_transactions_missing_in_erp": {"key": "detailedTransactionsMissingInErp", "type": "bool"},
        "allow_material_replacement_on_consumptions": {"key": "allowMaterialReplacementOnConsumptions", "type": "bool"},
        "non_splittable_trace_units": {"key": "nonSplittableTraceUnits", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        stamp_with_lot: bool,
        stamp_with_vendor_batch: bool,
        hide_lot_info: bool,
        hide_vendor_batch_info: bool,
        address_lines: List[str],
        detailed_transactions_missing_in_erp: bool,
        allow_material_replacement_on_consumptions: bool,
        non_splittable_trace_units: List[str],
        lot_label: Optional[str] = None,
        vendor_batch_label: Optional[str] = None,
        co_c_statement: Optional[str] = None,
        sequence_format: Optional[str] = None,
        batch_sequence_prefix: Optional[str] = None,
        batch_sequence_format: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword stamp_with_lot: Required.
        :paramtype stamp_with_lot: bool
        :keyword stamp_with_vendor_batch: Required.
        :paramtype stamp_with_vendor_batch: bool
        :keyword hide_lot_info: Required.
        :paramtype hide_lot_info: bool
        :keyword hide_vendor_batch_info: Required.
        :paramtype hide_vendor_batch_info: bool
        :keyword lot_label:
        :paramtype lot_label: str
        :keyword vendor_batch_label:
        :paramtype vendor_batch_label: str
        :keyword co_c_statement:
        :paramtype co_c_statement: str
        :keyword address_lines: Required.
        :paramtype address_lines: list[str]
        :keyword sequence_format:
        :paramtype sequence_format: str
        :keyword batch_sequence_prefix:
        :paramtype batch_sequence_prefix: str
        :keyword batch_sequence_format:
        :paramtype batch_sequence_format: str
        :keyword detailed_transactions_missing_in_erp: Required.
        :paramtype detailed_transactions_missing_in_erp: bool
        :keyword allow_material_replacement_on_consumptions: Required.
        :paramtype allow_material_replacement_on_consumptions: bool
        :keyword non_splittable_trace_units: Required.
        :paramtype non_splittable_trace_units: list[str]
        """
        super().__init__(**kwargs)
        self.stamp_with_lot = stamp_with_lot
        self.stamp_with_vendor_batch = stamp_with_vendor_batch
        self.hide_lot_info = hide_lot_info
        self.hide_vendor_batch_info = hide_vendor_batch_info
        self.lot_label = lot_label
        self.vendor_batch_label = vendor_batch_label
        self.co_c_statement = co_c_statement
        self.address_lines = address_lines
        self.sequence_format = sequence_format
        self.batch_sequence_prefix = batch_sequence_prefix
        self.batch_sequence_format = batch_sequence_format
        self.detailed_transactions_missing_in_erp = detailed_transactions_missing_in_erp
        self.allow_material_replacement_on_consumptions = allow_material_replacement_on_consumptions
        self.non_splittable_trace_units = non_splittable_trace_units


class UpsertSupplierToMeasurementFormInstanceRequest(_serialization.Model):  # pylint: disable=name-too-long
    """UpsertSupplierToMeasurementFormInstanceRequest.

    :ivar procurement_order:
    :vartype procurement_order: str
    :ivar procurement_line:
    :vartype procurement_line: int
    :ivar external_order_number:
    :vartype external_order_number: str
    """

    _attribute_map = {
        "procurement_order": {"key": "procurementOrder", "type": "str"},
        "procurement_line": {"key": "procurementLine", "type": "int"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        procurement_order: Optional[str] = None,
        procurement_line: Optional[int] = None,
        external_order_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword procurement_order:
        :paramtype procurement_order: str
        :keyword procurement_line:
        :paramtype procurement_line: int
        :keyword external_order_number:
        :paramtype external_order_number: str
        """
        super().__init__(**kwargs)
        self.procurement_order = procurement_order
        self.procurement_line = procurement_line
        self.external_order_number = external_order_number


class UpsertWorkorder(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpsertWorkorder.

    All required parameters must be populated in order to send to server.

    :ivar workorder: Required.
    :vartype workorder: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
     "ProductionFinished", and "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.WorkorderOperationDto]
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity:
    :vartype produced_quantity: float
    :ivar scrapped_quantity:
    :vartype scrapped_quantity: float
    :ivar customer_order_reference:
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    """

    _validation = {
        "workorder": {"required": True, "min_length": 1},
        "part": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
        "operations": {"required": True},
    }

    _attribute_map = {
        "workorder": {"key": "workorder", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "operations": {"key": "operations", "type": "[WorkorderOperationDto]"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "customer_order_reference": {"key": "customerOrderReference", "type": "WorkorderCustomerOrderReferenceDto"},
    }

    def __init__(
        self,
        *,
        workorder: str,
        part: "_models.PartDto",
        quantity: float,
        status: Union[str, "_models.WorkorderStatus"],
        operations: List["_models.WorkorderOperationDto"],
        unit: Optional[str] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        produced_quantity: Optional[float] = None,
        scrapped_quantity: Optional[float] = None,
        customer_order_reference: Optional["_models.WorkorderCustomerOrderReferenceDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workorder: Required.
        :paramtype workorder: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
         "ProductionFinished", and "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.WorkorderOperationDto]
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity:
        :paramtype produced_quantity: float
        :keyword scrapped_quantity:
        :paramtype scrapped_quantity: float
        :keyword customer_order_reference:
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        """
        super().__init__(**kwargs)
        self.workorder = workorder
        self.part = part
        self.quantity = quantity
        self.unit = unit
        self.status = status
        self.operations = operations
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.customer_order_reference = customer_order_reference


class UpsertWorkOrderConsumptionsRequest(_serialization.Model):
    """UpsertWorkOrderConsumptionsRequest.

    All required parameters must be populated in order to send to server.

    :ivar material_consumptions: Required.
    :vartype material_consumptions: list[~ignos.api.client.models.MaterialConsumptionDto]
    """

    _validation = {
        "material_consumptions": {"required": True},
    }

    _attribute_map = {
        "material_consumptions": {"key": "materialConsumptions", "type": "[MaterialConsumptionDto]"},
    }

    def __init__(self, *, material_consumptions: List["_models.MaterialConsumptionDto"], **kwargs: Any) -> None:
        """
        :keyword material_consumptions: Required.
        :paramtype material_consumptions: list[~ignos.api.client.models.MaterialConsumptionDto]
        """
        super().__init__(**kwargs)
        self.material_consumptions = material_consumptions


class UpsertWorkOrderTracesRequest(_serialization.Model):
    """UpsertWorkOrderTracesRequest.

    All required parameters must be populated in order to send to server.

    :ivar traces: Required.
    :vartype traces: list[~ignos.api.client.models.WorkOrderTraceItemDto]
    """

    _validation = {
        "traces": {"required": True},
    }

    _attribute_map = {
        "traces": {"key": "traces", "type": "[WorkOrderTraceItemDto]"},
    }

    def __init__(self, *, traces: List["_models.WorkOrderTraceItemDto"], **kwargs: Any) -> None:
        """
        :keyword traces: Required.
        :paramtype traces: list[~ignos.api.client.models.WorkOrderTraceItemDto]
        """
        super().__init__(**kwargs)
        self.traces = traces


class UpsertWorkorderV2(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UpsertWorkorderV2.

    All required parameters must be populated in order to send to server.

    :ivar work_order: Required.
    :vartype work_order: str
    :ivar company_id:
    :vartype company_id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
     "ProductionFinished", and "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.WorkorderOperationDto]
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity:
    :vartype produced_quantity: float
    :ivar scrapped_quantity:
    :vartype scrapped_quantity: float
    :ivar customer_order_reference:
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    :ivar planner:
    :vartype planner: ~ignos.api.client.models.UserDto
    :ivar project_leader:
    :vartype project_leader: ~ignos.api.client.models.UserDto
    :ivar delivery_location:
    :vartype delivery_location: ~ignos.api.client.models.WarehouseLocationDto
    :ivar project:
    :vartype project: ~ignos.api.client.models.WorkOrderProjectDto
    :ivar start_date:
    :vartype start_date: ~datetime.datetime
    :ivar end_date:
    :vartype end_date: ~datetime.datetime
    :ivar bom_position:
    :vartype bom_position: str
    :ivar trace_type: Known values are: "None", "Lot", "Batch", and "SerialNumber".
    :vartype trace_type: str or ~ignos.api.client.models.TraceType
    """

    _validation = {
        "work_order": {"required": True, "min_length": 1},
        "part": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
        "operations": {"required": True},
    }

    _attribute_map = {
        "work_order": {"key": "workOrder", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "operations": {"key": "operations", "type": "[WorkorderOperationDto]"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "customer_order_reference": {"key": "customerOrderReference", "type": "WorkorderCustomerOrderReferenceDto"},
        "planner": {"key": "planner", "type": "UserDto"},
        "project_leader": {"key": "projectLeader", "type": "UserDto"},
        "delivery_location": {"key": "deliveryLocation", "type": "WarehouseLocationDto"},
        "project": {"key": "project", "type": "WorkOrderProjectDto"},
        "start_date": {"key": "startDate", "type": "iso-8601"},
        "end_date": {"key": "endDate", "type": "iso-8601"},
        "bom_position": {"key": "bomPosition", "type": "str"},
        "trace_type": {"key": "traceType", "type": "str"},
    }

    def __init__(
        self,
        *,
        work_order: str,
        part: "_models.PartDto",
        quantity: float,
        status: Union[str, "_models.WorkorderStatus"],
        operations: List["_models.WorkorderOperationDto"],
        company_id: Optional[str] = None,
        unit: Optional[str] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        produced_quantity: Optional[float] = None,
        scrapped_quantity: Optional[float] = None,
        customer_order_reference: Optional["_models.WorkorderCustomerOrderReferenceDto"] = None,
        planner: Optional["_models.UserDto"] = None,
        project_leader: Optional["_models.UserDto"] = None,
        delivery_location: Optional["_models.WarehouseLocationDto"] = None,
        project: Optional["_models.WorkOrderProjectDto"] = None,
        start_date: Optional[datetime.datetime] = None,
        end_date: Optional[datetime.datetime] = None,
        bom_position: Optional[str] = None,
        trace_type: Optional[Union[str, "_models.TraceType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword work_order: Required.
        :paramtype work_order: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
         "ProductionFinished", and "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.WorkorderOperationDto]
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity:
        :paramtype produced_quantity: float
        :keyword scrapped_quantity:
        :paramtype scrapped_quantity: float
        :keyword customer_order_reference:
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        :keyword planner:
        :paramtype planner: ~ignos.api.client.models.UserDto
        :keyword project_leader:
        :paramtype project_leader: ~ignos.api.client.models.UserDto
        :keyword delivery_location:
        :paramtype delivery_location: ~ignos.api.client.models.WarehouseLocationDto
        :keyword project:
        :paramtype project: ~ignos.api.client.models.WorkOrderProjectDto
        :keyword start_date:
        :paramtype start_date: ~datetime.datetime
        :keyword end_date:
        :paramtype end_date: ~datetime.datetime
        :keyword bom_position:
        :paramtype bom_position: str
        :keyword trace_type: Known values are: "None", "Lot", "Batch", and "SerialNumber".
        :paramtype trace_type: str or ~ignos.api.client.models.TraceType
        """
        super().__init__(**kwargs)
        self.work_order = work_order
        self.company_id = company_id
        self.part = part
        self.quantity = quantity
        self.unit = unit
        self.status = status
        self.operations = operations
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.customer_order_reference = customer_order_reference
        self.planner = planner
        self.project_leader = project_leader
        self.delivery_location = delivery_location
        self.project = project
        self.start_date = start_date
        self.end_date = end_date
        self.bom_position = bom_position
        self.trace_type = trace_type


class UptimeDowntimeDto(_serialization.Model):
    """UptimeDowntimeDto.

    :ivar uptime_in_seconds:
    :vartype uptime_in_seconds: int
    :ivar downtime_in_seconds:
    :vartype downtime_in_seconds: int
    :ivar power_on_time_in_seconds:
    :vartype power_on_time_in_seconds: int
    """

    _attribute_map = {
        "uptime_in_seconds": {"key": "uptimeInSeconds", "type": "int"},
        "downtime_in_seconds": {"key": "downtimeInSeconds", "type": "int"},
        "power_on_time_in_seconds": {"key": "powerOnTimeInSeconds", "type": "int"},
    }

    def __init__(
        self,
        *,
        uptime_in_seconds: Optional[int] = None,
        downtime_in_seconds: Optional[int] = None,
        power_on_time_in_seconds: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword uptime_in_seconds:
        :paramtype uptime_in_seconds: int
        :keyword downtime_in_seconds:
        :paramtype downtime_in_seconds: int
        :keyword power_on_time_in_seconds:
        :paramtype power_on_time_in_seconds: int
        """
        super().__init__(**kwargs)
        self.uptime_in_seconds = uptime_in_seconds
        self.downtime_in_seconds = downtime_in_seconds
        self.power_on_time_in_seconds = power_on_time_in_seconds


class UptimeDowntimesDto(_serialization.Model):
    """UptimeDowntimesDto.

    :ivar today:
    :vartype today: ~ignos.api.client.models.UptimeDowntimeDto
    :ivar seven_days:
    :vartype seven_days: ~ignos.api.client.models.UptimeDowntimeDto
    :ivar thirty_days:
    :vartype thirty_days: ~ignos.api.client.models.UptimeDowntimeDto
    :ivar ninety_days:
    :vartype ninety_days: ~ignos.api.client.models.UptimeDowntimeDto
    :ivar year_to_date:
    :vartype year_to_date: ~ignos.api.client.models.UptimeDowntimeDto
    :ivar total:
    :vartype total: ~ignos.api.client.models.UptimeDowntimeDto
    """

    _attribute_map = {
        "today": {"key": "today", "type": "UptimeDowntimeDto"},
        "seven_days": {"key": "sevenDays", "type": "UptimeDowntimeDto"},
        "thirty_days": {"key": "thirtyDays", "type": "UptimeDowntimeDto"},
        "ninety_days": {"key": "ninetyDays", "type": "UptimeDowntimeDto"},
        "year_to_date": {"key": "yearToDate", "type": "UptimeDowntimeDto"},
        "total": {"key": "total", "type": "UptimeDowntimeDto"},
    }

    def __init__(
        self,
        *,
        today: Optional["_models.UptimeDowntimeDto"] = None,
        seven_days: Optional["_models.UptimeDowntimeDto"] = None,
        thirty_days: Optional["_models.UptimeDowntimeDto"] = None,
        ninety_days: Optional["_models.UptimeDowntimeDto"] = None,
        year_to_date: Optional["_models.UptimeDowntimeDto"] = None,
        total: Optional["_models.UptimeDowntimeDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword today:
        :paramtype today: ~ignos.api.client.models.UptimeDowntimeDto
        :keyword seven_days:
        :paramtype seven_days: ~ignos.api.client.models.UptimeDowntimeDto
        :keyword thirty_days:
        :paramtype thirty_days: ~ignos.api.client.models.UptimeDowntimeDto
        :keyword ninety_days:
        :paramtype ninety_days: ~ignos.api.client.models.UptimeDowntimeDto
        :keyword year_to_date:
        :paramtype year_to_date: ~ignos.api.client.models.UptimeDowntimeDto
        :keyword total:
        :paramtype total: ~ignos.api.client.models.UptimeDowntimeDto
        """
        super().__init__(**kwargs)
        self.today = today
        self.seven_days = seven_days
        self.thirty_days = thirty_days
        self.ninety_days = ninety_days
        self.year_to_date = year_to_date
        self.total = total


class UserAppDto(_serialization.Model):
    """UserAppDto.

    All required parameters must be populated in order to send to server.

    :ivar key: Required.
    :vartype key: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar direct_access: Required.
    :vartype direct_access: bool
    """

    _validation = {
        "key": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "direct_access": {"required": True},
    }

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "direct_access": {"key": "directAccess", "type": "bool"},
    }

    def __init__(
        self, *, key: str, name: str, direct_access: bool, description: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword key: Required.
        :paramtype key: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword direct_access: Required.
        :paramtype direct_access: bool
        """
        super().__init__(**kwargs)
        self.key = key
        self.name = name
        self.description = description
        self.direct_access = direct_access


class UserDetailsDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UserDetailsDto.

    :ivar id:
    :vartype id: str
    :ivar full_name:
    :vartype full_name: str
    :ivar upn:
    :vartype upn: str
    :ivar roles:
    :vartype roles: list[str]
    :ivar given_name:
    :vartype given_name: str
    :ivar sur_name:
    :vartype sur_name: str
    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar is_external_user:
    :vartype is_external_user: bool
    :ivar is_beta_tester:
    :vartype is_beta_tester: bool
    :ivar has_access_to_ignos:
    :vartype has_access_to_ignos: bool
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "full_name": {"key": "fullName", "type": "str"},
        "upn": {"key": "upn", "type": "str"},
        "roles": {"key": "roles", "type": "[str]"},
        "given_name": {"key": "givenName", "type": "str"},
        "sur_name": {"key": "surName", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "customer_id": {"key": "customerId", "type": "str"},
        "is_external_user": {"key": "isExternalUser", "type": "bool"},
        "is_beta_tester": {"key": "isBetaTester", "type": "bool"},
        "has_access_to_ignos": {"key": "hasAccessToIgnos", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        full_name: Optional[str] = None,
        upn: Optional[str] = None,
        roles: Optional[List[str]] = None,
        given_name: Optional[str] = None,
        sur_name: Optional[str] = None,
        tenant_id: Optional[str] = None,
        customer_id: Optional[str] = None,
        is_external_user: Optional[bool] = None,
        is_beta_tester: Optional[bool] = None,
        has_access_to_ignos: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword full_name:
        :paramtype full_name: str
        :keyword upn:
        :paramtype upn: str
        :keyword roles:
        :paramtype roles: list[str]
        :keyword given_name:
        :paramtype given_name: str
        :keyword sur_name:
        :paramtype sur_name: str
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword is_external_user:
        :paramtype is_external_user: bool
        :keyword is_beta_tester:
        :paramtype is_beta_tester: bool
        :keyword has_access_to_ignos:
        :paramtype has_access_to_ignos: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.full_name = full_name
        self.upn = upn
        self.roles = roles
        self.given_name = given_name
        self.sur_name = sur_name
        self.tenant_id = tenant_id
        self.customer_id = customer_id
        self.is_external_user = is_external_user
        self.is_beta_tester = is_beta_tester
        self.has_access_to_ignos = has_access_to_ignos


class UserDto(_serialization.Model):
    """UserDto.

    :ivar id:
    :vartype id: str
    :ivar full_name:
    :vartype full_name: str
    :ivar upn:
    :vartype upn: str
    :ivar email:
    :vartype email: str
    :ivar is_beta_tester:
    :vartype is_beta_tester: bool
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "full_name": {"key": "fullName", "type": "str"},
        "upn": {"key": "upn", "type": "str"},
        "email": {"key": "email", "type": "str"},
        "is_beta_tester": {"key": "isBetaTester", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        full_name: Optional[str] = None,
        upn: Optional[str] = None,
        email: Optional[str] = None,
        is_beta_tester: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword full_name:
        :paramtype full_name: str
        :keyword upn:
        :paramtype upn: str
        :keyword email:
        :paramtype email: str
        :keyword is_beta_tester:
        :paramtype is_beta_tester: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.full_name = full_name
        self.upn = upn
        self.email = email
        self.is_beta_tester = is_beta_tester


class UserDtoPagedResult(_serialization.Model):
    """UserDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.UserDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[UserDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.UserDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.UserDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class UtilizationDetailsDto(_serialization.Model):
    """UtilizationDetailsDto.

    All required parameters must be populated in order to send to server.

    :ivar machine_id: Required.
    :vartype machine_id: int
    :ivar machine_name: Required.
    :vartype machine_name: str
    :ivar machine_state_text:
    :vartype machine_state_text: str
    :ivar machine_state: Known values are: "InCycle", "MasterCam", "MdiCycle", "CamCycle", "Idle",
     "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
     "EStop", "Alarm", and "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar power_on_utilization:
    :vartype power_on_utilization: float
    """

    _validation = {
        "machine_id": {"required": True},
        "machine_name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "machine_id": {"key": "machineId", "type": "int"},
        "machine_name": {"key": "machineName", "type": "str"},
        "machine_state_text": {"key": "machineStateText", "type": "str"},
        "machine_state": {"key": "machineState", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "power_on_utilization": {"key": "powerOnUtilization", "type": "float"},
    }

    def __init__(
        self,
        *,
        machine_id: int,
        machine_name: str,
        machine_state_text: Optional[str] = None,
        machine_state: Optional[Union[str, "_models.MachineState"]] = None,
        start_time: Optional[datetime.datetime] = None,
        power_on_utilization: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword machine_id: Required.
        :paramtype machine_id: int
        :keyword machine_name: Required.
        :paramtype machine_name: str
        :keyword machine_state_text:
        :paramtype machine_state_text: str
        :keyword machine_state: Known values are: "InCycle", "MasterCam", "MdiCycle", "CamCycle",
         "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
         "EStop", "Alarm", and "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword power_on_utilization:
        :paramtype power_on_utilization: float
        """
        super().__init__(**kwargs)
        self.machine_id = machine_id
        self.machine_name = machine_name
        self.machine_state_text = machine_state_text
        self.machine_state = machine_state
        self.start_time = start_time
        self.power_on_utilization = power_on_utilization


class UtilizationDto(_serialization.Model):
    """UtilizationDto.

    All required parameters must be populated in order to send to server.

    :ivar power_on: Required.
    :vartype power_on: ~ignos.api.client.models.PowerOnUtilizationV2Dto
    :ivar uptime_downtimes: Required.
    :vartype uptime_downtimes: ~ignos.api.client.models.UptimeDowntimesDto
    """

    _validation = {
        "power_on": {"required": True},
        "uptime_downtimes": {"required": True},
    }

    _attribute_map = {
        "power_on": {"key": "powerOn", "type": "PowerOnUtilizationV2Dto"},
        "uptime_downtimes": {"key": "uptimeDowntimes", "type": "UptimeDowntimesDto"},
    }

    def __init__(
        self,
        *,
        power_on: "_models.PowerOnUtilizationV2Dto",
        uptime_downtimes: "_models.UptimeDowntimesDto",
        **kwargs: Any
    ) -> None:
        """
        :keyword power_on: Required.
        :paramtype power_on: ~ignos.api.client.models.PowerOnUtilizationV2Dto
        :keyword uptime_downtimes: Required.
        :paramtype uptime_downtimes: ~ignos.api.client.models.UptimeDowntimesDto
        """
        super().__init__(**kwargs)
        self.power_on = power_on
        self.uptime_downtimes = uptime_downtimes


class UtilizationListDto(_serialization.Model):
    """UtilizationListDto.

    :ivar machines:
    :vartype machines: list[~ignos.api.client.models.MachineUtilizationDto]
    """

    _attribute_map = {
        "machines": {"key": "machines", "type": "[MachineUtilizationDto]"},
    }

    def __init__(self, *, machines: Optional[List["_models.MachineUtilizationDto"]] = None, **kwargs: Any) -> None:
        """
        :keyword machines:
        :paramtype machines: list[~ignos.api.client.models.MachineUtilizationDto]
        """
        super().__init__(**kwargs)
        self.machines = machines


class UtilizationSummaryDto(_serialization.Model):
    """UtilizationSummaryDto.

    All required parameters must be populated in order to send to server.

    :ivar factory: Required.
    :vartype factory: ~ignos.api.client.models.FactoryUtilizationDto
    :ivar groups: Required.
    :vartype groups: list[~ignos.api.client.models.MachineGroupUtilizationDto]
    :ivar ungrouped_machines: Required.
    :vartype ungrouped_machines: list[~ignos.api.client.models.MachineUtilizationV2Dto]
    """

    _validation = {
        "factory": {"required": True},
        "groups": {"required": True},
        "ungrouped_machines": {"required": True},
    }

    _attribute_map = {
        "factory": {"key": "factory", "type": "FactoryUtilizationDto"},
        "groups": {"key": "groups", "type": "[MachineGroupUtilizationDto]"},
        "ungrouped_machines": {"key": "ungroupedMachines", "type": "[MachineUtilizationV2Dto]"},
    }

    def __init__(
        self,
        *,
        factory: "_models.FactoryUtilizationDto",
        groups: List["_models.MachineGroupUtilizationDto"],
        ungrouped_machines: List["_models.MachineUtilizationV2Dto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword factory: Required.
        :paramtype factory: ~ignos.api.client.models.FactoryUtilizationDto
        :keyword groups: Required.
        :paramtype groups: list[~ignos.api.client.models.MachineGroupUtilizationDto]
        :keyword ungrouped_machines: Required.
        :paramtype ungrouped_machines: list[~ignos.api.client.models.MachineUtilizationV2Dto]
        """
        super().__init__(**kwargs)
        self.factory = factory
        self.groups = groups
        self.ungrouped_machines = ungrouped_machines


class UtilizationWorkorderDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """UtilizationWorkorderDto.

    :ivar id:
    :vartype id: str
    :ivar operation:
    :vartype operation: int
    :ivar is_setup:
    :vartype is_setup: bool
    :ivar part_number:
    :vartype part_number: str
    :ivar part_name:
    :vartype part_name: str
    :ivar customer:
    :vartype customer: ~ignos.api.client.models.CustomerDto
    :ivar customer_order:
    :vartype customer_order: str
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar workorder_utilization:
    :vartype workorder_utilization: float
    :ivar compared_to_average:
    :vartype compared_to_average: float
    :ivar workorder_description:
    :vartype workorder_description: str
    :ivar operation_description:
    :vartype operation_description: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "is_setup": {"key": "isSetup", "type": "bool"},
        "part_number": {"key": "partNumber", "type": "str"},
        "part_name": {"key": "partName", "type": "str"},
        "customer": {"key": "customer", "type": "CustomerDto"},
        "customer_order": {"key": "customerOrder", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "workorder_utilization": {"key": "workorderUtilization", "type": "float"},
        "compared_to_average": {"key": "comparedToAverage", "type": "float"},
        "workorder_description": {"key": "workorderDescription", "type": "str"},
        "operation_description": {"key": "operationDescription", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        operation: Optional[int] = None,
        is_setup: Optional[bool] = None,
        part_number: Optional[str] = None,
        part_name: Optional[str] = None,
        customer: Optional["_models.CustomerDto"] = None,
        customer_order: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        workorder_utilization: Optional[float] = None,
        compared_to_average: Optional[float] = None,
        workorder_description: Optional[str] = None,
        operation_description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword operation:
        :paramtype operation: int
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword customer:
        :paramtype customer: ~ignos.api.client.models.CustomerDto
        :keyword customer_order:
        :paramtype customer_order: str
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword workorder_utilization:
        :paramtype workorder_utilization: float
        :keyword compared_to_average:
        :paramtype compared_to_average: float
        :keyword workorder_description:
        :paramtype workorder_description: str
        :keyword operation_description:
        :paramtype operation_description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.operation = operation
        self.is_setup = is_setup
        self.part_number = part_number
        self.part_name = part_name
        self.customer = customer
        self.customer_order = customer_order
        self.start_time = start_time
        self.workorder_utilization = workorder_utilization
        self.compared_to_average = compared_to_average
        self.workorder_description = workorder_description
        self.operation_description = operation_description


class ValidationRuleDto(_serialization.Model):
    """ValidationRuleDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: str, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class WarehouseLocationDto(_serialization.Model):
    """WarehouseLocationDto.

    All required parameters must be populated in order to send to server.

    :ivar zone:
    :vartype zone: str
    :ivar location: Required.
    :vartype location: str
    :ivar warehouse:
    :vartype warehouse: str
    :ivar site:
    :vartype site: str
    """

    _validation = {
        "location": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "zone": {"key": "zone", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "warehouse": {"key": "warehouse", "type": "str"},
        "site": {"key": "site", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        zone: Optional[str] = None,
        warehouse: Optional[str] = None,
        site: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword zone:
        :paramtype zone: str
        :keyword location: Required.
        :paramtype location: str
        :keyword warehouse:
        :paramtype warehouse: str
        :keyword site:
        :paramtype site: str
        """
        super().__init__(**kwargs)
        self.zone = zone
        self.location = location
        self.warehouse = warehouse
        self.site = site


class WhitelistMeasuringTool(_serialization.Model):
    """WhitelistMeasuringTool.

    All required parameters must be populated in order to send to server.

    :ivar value: Required.
    :vartype value: str
    :ivar description: Required.
    :vartype description: str
    """

    _validation = {
        "value": {"required": True, "min_length": 1},
        "description": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, value: str, description: str, **kwargs: Any) -> None:
        """
        :keyword value: Required.
        :paramtype value: str
        :keyword description: Required.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.description = description


class WorkerDto(_serialization.Model):
    """WorkerDto.

    :ivar personnel_number:
    :vartype personnel_number: str
    :ivar badge_id:
    :vartype badge_id: str
    """

    _attribute_map = {
        "personnel_number": {"key": "personnelNumber", "type": "str"},
        "badge_id": {"key": "badgeId", "type": "str"},
    }

    def __init__(
        self, *, personnel_number: Optional[str] = None, badge_id: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword personnel_number:
        :paramtype personnel_number: str
        :keyword badge_id:
        :paramtype badge_id: str
        """
        super().__init__(**kwargs)
        self.personnel_number = personnel_number
        self.badge_id = badge_id


class WorkOrderAttachmentDto(_serialization.Model):
    """WorkOrderAttachmentDto.

    :ivar created_by:
    :vartype created_by: ~ignos.api.client.models.UserDto
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar modified_by:
    :vartype modified_by: ~ignos.api.client.models.UserDto
    :ivar modified:
    :vartype modified: ~datetime.datetime
    :ivar name:
    :vartype name: str
    :ivar notes:
    :vartype notes: str
    :ivar attachment_type:
    :vartype attachment_type: str
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "UserDto"},
        "created": {"key": "created", "type": "iso-8601"},
        "modified_by": {"key": "modifiedBy", "type": "UserDto"},
        "modified": {"key": "modified", "type": "iso-8601"},
        "name": {"key": "name", "type": "str"},
        "notes": {"key": "notes", "type": "str"},
        "attachment_type": {"key": "attachmentType", "type": "str"},
    }

    def __init__(
        self,
        *,
        created_by: Optional["_models.UserDto"] = None,
        created: Optional[datetime.datetime] = None,
        modified_by: Optional["_models.UserDto"] = None,
        modified: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        notes: Optional[str] = None,
        attachment_type: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by:
        :paramtype created_by: ~ignos.api.client.models.UserDto
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword modified_by:
        :paramtype modified_by: ~ignos.api.client.models.UserDto
        :keyword modified:
        :paramtype modified: ~datetime.datetime
        :keyword name:
        :paramtype name: str
        :keyword notes:
        :paramtype notes: str
        :keyword attachment_type:
        :paramtype attachment_type: str
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created = created
        self.modified_by = modified_by
        self.modified = modified
        self.name = name
        self.notes = notes
        self.attachment_type = attachment_type


class WorkOrderConsumptionDto(_serialization.Model):
    """WorkOrderConsumptionDto.

    All required parameters must be populated in order to send to server.

    :ivar work_order_id: Required.
    :vartype work_order_id: str
    :ivar company_id:
    :vartype company_id: str
    :ivar consumptions: Required.
    :vartype consumptions: list[~ignos.api.client.models.MaterialConsumptionDto]
    """

    _validation = {
        "work_order_id": {"required": True, "min_length": 1},
        "consumptions": {"required": True},
    }

    _attribute_map = {
        "work_order_id": {"key": "workOrderId", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "consumptions": {"key": "consumptions", "type": "[MaterialConsumptionDto]"},
    }

    def __init__(
        self,
        *,
        work_order_id: str,
        consumptions: List["_models.MaterialConsumptionDto"],
        company_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword work_order_id: Required.
        :paramtype work_order_id: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword consumptions: Required.
        :paramtype consumptions: list[~ignos.api.client.models.MaterialConsumptionDto]
        """
        super().__init__(**kwargs)
        self.work_order_id = work_order_id
        self.company_id = company_id
        self.consumptions = consumptions


class WorkorderCustomerOrderReferenceDto(_serialization.Model):
    """WorkorderCustomerOrderReferenceDto.

    :ivar customer_order:
    :vartype customer_order: str
    :ivar customer_order_line:
    :vartype customer_order_line: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar external_order_number:
    :vartype external_order_number: str
    """

    _attribute_map = {
        "customer_order": {"key": "customerOrder", "type": "str"},
        "customer_order_line": {"key": "customerOrderLine", "type": "int"},
        "customer_id": {"key": "customerId", "type": "str"},
        "customer_name": {"key": "customerName", "type": "str"},
        "external_order_number": {"key": "externalOrderNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        customer_order: Optional[str] = None,
        customer_order_line: Optional[int] = None,
        customer_id: Optional[str] = None,
        customer_name: Optional[str] = None,
        external_order_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword customer_order:
        :paramtype customer_order: str
        :keyword customer_order_line:
        :paramtype customer_order_line: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword external_order_number:
        :paramtype external_order_number: str
        """
        super().__init__(**kwargs)
        self.customer_order = customer_order
        self.customer_order_line = customer_order_line
        self.customer_id = customer_id
        self.customer_name = customer_name
        self.external_order_number = external_order_number


class WorkorderDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """WorkorderDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit: Required.
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
     "ProductionFinished", and "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.WorkorderOperationDto]
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar customer_order_reference: Required.
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    :ivar project:
    :vartype project: ~ignos.api.client.models.WorkOrderProjectDto
    :ivar planner:
    :vartype planner: ~ignos.api.client.models.UserDto
    :ivar project_leader:
    :vartype project_leader: ~ignos.api.client.models.UserDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "part": {"required": True},
        "quantity": {"required": True},
        "unit": {"required": True, "min_length": 1},
        "status": {"required": True},
        "operations": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
        "customer_order_reference": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "operations": {"key": "operations", "type": "[WorkorderOperationDto]"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "customer_order_reference": {"key": "customerOrderReference", "type": "WorkorderCustomerOrderReferenceDto"},
        "project": {"key": "project", "type": "WorkOrderProjectDto"},
        "planner": {"key": "planner", "type": "UserDto"},
        "project_leader": {"key": "projectLeader", "type": "UserDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        part: "_models.PartDto",
        quantity: float,
        unit: str,
        status: Union[str, "_models.WorkorderStatus"],
        operations: List["_models.WorkorderOperationDto"],
        produced_quantity: float,
        scrapped_quantity: float,
        customer_order_reference: "_models.WorkorderCustomerOrderReferenceDto",
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        project: Optional["_models.WorkOrderProjectDto"] = None,
        planner: Optional["_models.UserDto"] = None,
        project_leader: Optional["_models.UserDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit: Required.
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
         "ProductionFinished", and "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.WorkorderOperationDto]
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword customer_order_reference: Required.
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        :keyword project:
        :paramtype project: ~ignos.api.client.models.WorkOrderProjectDto
        :keyword planner:
        :paramtype planner: ~ignos.api.client.models.UserDto
        :keyword project_leader:
        :paramtype project_leader: ~ignos.api.client.models.UserDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.part = part
        self.quantity = quantity
        self.unit = unit
        self.status = status
        self.operations = operations
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.customer_order_reference = customer_order_reference
        self.project = project
        self.planner = planner
        self.project_leader = project_leader


class WorkorderDtoPagedResult(_serialization.Model):
    """WorkorderDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.WorkorderDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[WorkorderDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.WorkorderDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.WorkorderDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class WorkorderHierarchyDto(_serialization.Model):
    """WorkorderHierarchyDto.

    All required parameters must be populated in order to send to server.

    :ivar workorder: Required.
    :vartype workorder: str
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar total_quantity: Required.
    :vartype total_quantity: float
    :ivar workorders: Required.
    :vartype workorders: list[~ignos.api.client.models.WorkorderHierarchyDto]
    """

    _validation = {
        "workorder": {"required": True, "min_length": 1},
        "quantity": {"required": True},
        "total_quantity": {"required": True},
        "workorders": {"required": True},
    }

    _attribute_map = {
        "workorder": {"key": "workorder", "type": "str"},
        "quantity": {"key": "quantity", "type": "float"},
        "total_quantity": {"key": "totalQuantity", "type": "float"},
        "workorders": {"key": "workorders", "type": "[WorkorderHierarchyDto]"},
    }

    def __init__(
        self,
        *,
        workorder: str,
        quantity: float,
        total_quantity: float,
        workorders: List["_models.WorkorderHierarchyDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword workorder: Required.
        :paramtype workorder: str
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword total_quantity: Required.
        :paramtype total_quantity: float
        :keyword workorders: Required.
        :paramtype workorders: list[~ignos.api.client.models.WorkorderHierarchyDto]
        """
        super().__init__(**kwargs)
        self.workorder = workorder
        self.quantity = quantity
        self.total_quantity = total_quantity
        self.workorders = workorders


class WorkorderImportTraceItemDto(_serialization.Model):
    """WorkorderImportTraceItemDto.

    All required parameters must be populated in order to send to server.

    :ivar sequence: Required.
    :vartype sequence: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar lot:
    :vartype lot: str
    :ivar active: Required.
    :vartype active: bool
    """

    _validation = {
        "sequence": {"required": True, "min_length": 1},
        "active": {"required": True},
    }

    _attribute_map = {
        "sequence": {"key": "sequence", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "lot": {"key": "lot", "type": "str"},
        "active": {"key": "active", "type": "bool"},
    }

    def __init__(
        self,
        *,
        sequence: str,
        active: bool,
        serial_number: Optional[str] = None,
        lot: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword lot:
        :paramtype lot: str
        :keyword active: Required.
        :paramtype active: bool
        """
        super().__init__(**kwargs)
        self.sequence = sequence
        self.serial_number = serial_number
        self.lot = lot
        self.active = active


class WorkorderListDto(_serialization.Model):
    """WorkorderListDto.

    All required parameters must be populated in order to send to server.

    :ivar id:
    :vartype id: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
     "ProductionFinished", and "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity:
    :vartype produced_quantity: float
    :ivar scrapped_quantity:
    :vartype scrapped_quantity: float
    :ivar customer_order_reference:
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    """

    _validation = {
        "part": {"required": True},
        "quantity": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "quantity": {"key": "quantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "customer_order_reference": {"key": "customerOrderReference", "type": "WorkorderCustomerOrderReferenceDto"},
    }

    def __init__(
        self,
        *,
        part: "_models.PartDto",
        quantity: float,
        status: Union[str, "_models.WorkorderStatus"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        unit: Optional[str] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        produced_quantity: Optional[float] = None,
        scrapped_quantity: Optional[float] = None,
        customer_order_reference: Optional["_models.WorkorderCustomerOrderReferenceDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword status: Required. Known values are: "Draft", "Ready", "Ongoing", "Completed",
         "ProductionFinished", and "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity:
        :paramtype produced_quantity: float
        :keyword scrapped_quantity:
        :paramtype scrapped_quantity: float
        :keyword customer_order_reference:
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.part = part
        self.quantity = quantity
        self.unit = unit
        self.status = status
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.customer_order_reference = customer_order_reference


class WorkorderListDtoPagedResult(_serialization.Model):
    """WorkorderListDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.WorkorderListDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[WorkorderListDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.WorkorderListDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.WorkorderListDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class WorkorderMaterialDto(_serialization.Model):
    """WorkorderMaterialDto.

    All required parameters must be populated in order to send to server.

    :ivar material_line: Required.
    :vartype material_line: int
    :ivar status: Required. Known values are: "Unknown", "NotStarted", "Partial", and "Completed".
    :vartype status: str or ~ignos.api.client.models.MaterialStatus
    :ivar material: Required.
    :vartype material: ~ignos.api.client.models.PartDto
    :ivar quantity_per_part: Required.
    :vartype quantity_per_part: float
    :ivar fixed_quantity: Required.
    :vartype fixed_quantity: bool
    :ivar used_quantity: Required.
    :vartype used_quantity: float
    :ivar unit: Required.
    :vartype unit: str
    :ivar trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
    :vartype trace_type: str or ~ignos.api.client.models.TraceType
    """

    _validation = {
        "material_line": {"required": True},
        "status": {"required": True},
        "material": {"required": True},
        "quantity_per_part": {"required": True},
        "fixed_quantity": {"required": True},
        "used_quantity": {"required": True},
        "unit": {"required": True, "min_length": 1},
        "trace_type": {"required": True},
    }

    _attribute_map = {
        "material_line": {"key": "materialLine", "type": "int"},
        "status": {"key": "status", "type": "str"},
        "material": {"key": "material", "type": "PartDto"},
        "quantity_per_part": {"key": "quantityPerPart", "type": "float"},
        "fixed_quantity": {"key": "fixedQuantity", "type": "bool"},
        "used_quantity": {"key": "usedQuantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "trace_type": {"key": "traceType", "type": "str"},
    }

    def __init__(
        self,
        *,
        material_line: int,
        status: Union[str, "_models.MaterialStatus"],
        material: "_models.PartDto",
        quantity_per_part: float,
        fixed_quantity: bool,
        used_quantity: float,
        unit: str,
        trace_type: Union[str, "_models.TraceType"],
        **kwargs: Any
    ) -> None:
        """
        :keyword material_line: Required.
        :paramtype material_line: int
        :keyword status: Required. Known values are: "Unknown", "NotStarted", "Partial", and
         "Completed".
        :paramtype status: str or ~ignos.api.client.models.MaterialStatus
        :keyword material: Required.
        :paramtype material: ~ignos.api.client.models.PartDto
        :keyword quantity_per_part: Required.
        :paramtype quantity_per_part: float
        :keyword fixed_quantity: Required.
        :paramtype fixed_quantity: bool
        :keyword used_quantity: Required.
        :paramtype used_quantity: float
        :keyword unit: Required.
        :paramtype unit: str
        :keyword trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
        :paramtype trace_type: str or ~ignos.api.client.models.TraceType
        """
        super().__init__(**kwargs)
        self.material_line = material_line
        self.status = status
        self.material = material
        self.quantity_per_part = quantity_per_part
        self.fixed_quantity = fixed_quantity
        self.used_quantity = used_quantity
        self.unit = unit
        self.trace_type = trace_type


class WorkorderOperationDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """WorkorderOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar operation: Required.
    :vartype operation: int
    :ivar description:
    :vartype description: str
    :ivar planned_setup_time: Required.
    :vartype planned_setup_time: float
    :ivar planned_production_time_per_part: Required.
    :vartype planned_production_time_per_part: float
    :ivar planned_production_time: Required.
    :vartype planned_production_time: float
    :ivar fixed_time:
    :vartype fixed_time: bool
    :ivar resource:
    :vartype resource: ~ignos.api.client.models.ResourceDto
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar actual_start:
    :vartype actual_start: ~datetime.datetime
    :ivar actual_end:
    :vartype actual_end: ~datetime.datetime
    :ivar status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
     "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar used_production_time: Required.
    :vartype used_production_time: float
    :ivar used_setup_time: Required.
    :vartype used_setup_time: float
    :ivar materials: Required.
    :vartype materials: list[~ignos.api.client.models.WorkorderMaterialDto]
    """

    _validation = {
        "operation": {"required": True},
        "planned_setup_time": {"required": True},
        "planned_production_time_per_part": {"required": True},
        "planned_production_time": {"required": True},
        "status": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
        "used_production_time": {"required": True},
        "used_setup_time": {"required": True},
        "materials": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "description": {"key": "description", "type": "str"},
        "planned_setup_time": {"key": "plannedSetupTime", "type": "float"},
        "planned_production_time_per_part": {"key": "plannedProductionTimePerPart", "type": "float"},
        "planned_production_time": {"key": "plannedProductionTime", "type": "float"},
        "fixed_time": {"key": "fixedTime", "type": "bool"},
        "resource": {"key": "resource", "type": "ResourceDto"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "actual_start": {"key": "actualStart", "type": "iso-8601"},
        "actual_end": {"key": "actualEnd", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "used_production_time": {"key": "usedProductionTime", "type": "float"},
        "used_setup_time": {"key": "usedSetupTime", "type": "float"},
        "materials": {"key": "materials", "type": "[WorkorderMaterialDto]"},
    }

    def __init__(
        self,
        *,
        operation: int,
        planned_setup_time: float,
        planned_production_time_per_part: float,
        planned_production_time: float,
        status: Union[str, "_models.OperationStatusDto"],
        produced_quantity: float,
        scrapped_quantity: float,
        used_production_time: float,
        used_setup_time: float,
        materials: List["_models.WorkorderMaterialDto"],
        description: Optional[str] = None,
        fixed_time: Optional[bool] = None,
        resource: Optional["_models.ResourceDto"] = None,
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        actual_start: Optional[datetime.datetime] = None,
        actual_end: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation: Required.
        :paramtype operation: int
        :keyword description:
        :paramtype description: str
        :keyword planned_setup_time: Required.
        :paramtype planned_setup_time: float
        :keyword planned_production_time_per_part: Required.
        :paramtype planned_production_time_per_part: float
        :keyword planned_production_time: Required.
        :paramtype planned_production_time: float
        :keyword fixed_time:
        :paramtype fixed_time: bool
        :keyword resource:
        :paramtype resource: ~ignos.api.client.models.ResourceDto
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword actual_start:
        :paramtype actual_start: ~datetime.datetime
        :keyword actual_end:
        :paramtype actual_end: ~datetime.datetime
        :keyword status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
         "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword used_production_time: Required.
        :paramtype used_production_time: float
        :keyword used_setup_time: Required.
        :paramtype used_setup_time: float
        :keyword materials: Required.
        :paramtype materials: list[~ignos.api.client.models.WorkorderMaterialDto]
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.description = description
        self.planned_setup_time = planned_setup_time
        self.planned_production_time_per_part = planned_production_time_per_part
        self.planned_production_time = planned_production_time
        self.fixed_time = fixed_time
        self.resource = resource
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.actual_start = actual_start
        self.actual_end = actual_end
        self.status = status
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.used_production_time = used_production_time
        self.used_setup_time = used_setup_time
        self.materials = materials


class WorkorderOperationEventDto(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """WorkorderOperationEventDto.

    All required parameters must be populated in order to send to server.

    :ivar event_id: Required.
    :vartype event_id: str
    :ivar external_id:
    :vartype external_id: str
    :ivar company_id:
    :vartype company_id: str
    :ivar workorder: Required.
    :vartype workorder: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    :ivar is_setup: Required.
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar description:
    :vartype description: str
    :ivar part:
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar workorder_description:
    :vartype workorder_description: str
    :ivar operation_description:
    :vartype operation_description: str
    """

    _validation = {
        "event_id": {"required": True, "min_length": 1},
        "workorder": {"required": True, "min_length": 1},
        "operation": {"required": True},
        "start_time": {"required": True},
        "is_setup": {"required": True},
        "resource_id": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "event_id": {"key": "eventId", "type": "str"},
        "external_id": {"key": "externalId", "type": "str"},
        "company_id": {"key": "companyId", "type": "str"},
        "workorder": {"key": "workorder", "type": "str"},
        "operation": {"key": "operation", "type": "int"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "is_setup": {"key": "isSetup", "type": "bool"},
        "employee": {"key": "employee", "type": "EmployeeDto"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "part": {"key": "part", "type": "PartDto"},
        "workorder_description": {"key": "workorderDescription", "type": "str"},
        "operation_description": {"key": "operationDescription", "type": "str"},
    }

    def __init__(
        self,
        *,
        event_id: str,
        workorder: str,
        operation: int,
        start_time: datetime.datetime,
        is_setup: bool,
        resource_id: str,
        external_id: Optional[str] = None,
        company_id: Optional[str] = None,
        end_time: Optional[datetime.datetime] = None,
        employee: Optional["_models.EmployeeDto"] = None,
        description: Optional[str] = None,
        part: Optional["_models.PartDto"] = None,
        workorder_description: Optional[str] = None,
        operation_description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword event_id: Required.
        :paramtype event_id: str
        :keyword external_id:
        :paramtype external_id: str
        :keyword company_id:
        :paramtype company_id: str
        :keyword workorder: Required.
        :paramtype workorder: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword start_time: Required.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time:
        :paramtype end_time: ~datetime.datetime
        :keyword is_setup: Required.
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword description:
        :paramtype description: str
        :keyword part:
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword workorder_description:
        :paramtype workorder_description: str
        :keyword operation_description:
        :paramtype operation_description: str
        """
        super().__init__(**kwargs)
        self.event_id = event_id
        self.external_id = external_id
        self.company_id = company_id
        self.workorder = workorder
        self.operation = operation
        self.start_time = start_time
        self.end_time = end_time
        self.is_setup = is_setup
        self.employee = employee
        self.resource_id = resource_id
        self.description = description
        self.part = part
        self.workorder_description = workorder_description
        self.operation_description = operation_description


class WorkOrderProjectDto(_serialization.Model):
    """WorkOrderProjectDto.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar project_manager:
    :vartype project_manager: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "project_manager": {"key": "projectManager", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        project_manager: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword project_manager:
        :paramtype project_manager: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.project_manager = project_manager


class WorkOrderProjectDtoPagedResult(_serialization.Model):
    """WorkOrderProjectDtoPagedResult.

    All required parameters must be populated in order to send to server.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.WorkOrderProjectDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[WorkOrderProjectDto]"},
        "continuation_token": {"key": "continuationToken", "type": "str"},
    }

    def __init__(
        self, *, results: List["_models.WorkOrderProjectDto"], continuation_token: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.WorkOrderProjectDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super().__init__(**kwargs)
        self.results = results
        self.continuation_token = continuation_token


class WorkOrderTraceItemDto(_serialization.Model):
    """WorkOrderTraceItemDto.

    All required parameters must be populated in order to send to server.

    :ivar sequence: Required.
    :vartype sequence: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar lot:
    :vartype lot: str
    :ivar active: Required.
    :vartype active: bool
    """

    _validation = {
        "sequence": {"required": True, "min_length": 1},
        "active": {"required": True},
    }

    _attribute_map = {
        "sequence": {"key": "sequence", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "str"},
        "lot": {"key": "lot", "type": "str"},
        "active": {"key": "active", "type": "bool"},
    }

    def __init__(
        self,
        *,
        sequence: str,
        active: bool,
        serial_number: Optional[str] = None,
        lot: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sequence: Required.
        :paramtype sequence: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword lot:
        :paramtype lot: str
        :keyword active: Required.
        :paramtype active: bool
        """
        super().__init__(**kwargs)
        self.sequence = sequence
        self.serial_number = serial_number
        self.lot = lot
        self.active = active


class WorkOrderTraceMaterialDto(_serialization.Model):
    """WorkOrderTraceMaterialDto.

    All required parameters must be populated in order to send to server.

    :ivar material_line: Required.
    :vartype material_line: int
    :ivar status: Required. Known values are: "Unknown", "NotStarted", "Partial", and "Completed".
    :vartype status: str or ~ignos.api.client.models.MaterialStatus
    :ivar material: Required.
    :vartype material: ~ignos.api.client.models.PartDto
    :ivar quantity_per_part: Required.
    :vartype quantity_per_part: float
    :ivar fixed_quantity: Required.
    :vartype fixed_quantity: bool
    :ivar used_quantity: Required.
    :vartype used_quantity: float
    :ivar unit: Required.
    :vartype unit: str
    :ivar trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
    :vartype trace_type: str or ~ignos.api.client.models.TraceType
    :ivar consumptions: Required.
    :vartype consumptions: list[~ignos.api.client.models.MaterialConsumptionDto]
    """

    _validation = {
        "material_line": {"required": True},
        "status": {"required": True},
        "material": {"required": True},
        "quantity_per_part": {"required": True},
        "fixed_quantity": {"required": True},
        "used_quantity": {"required": True},
        "unit": {"required": True, "min_length": 1},
        "trace_type": {"required": True},
        "consumptions": {"required": True},
    }

    _attribute_map = {
        "material_line": {"key": "materialLine", "type": "int"},
        "status": {"key": "status", "type": "str"},
        "material": {"key": "material", "type": "PartDto"},
        "quantity_per_part": {"key": "quantityPerPart", "type": "float"},
        "fixed_quantity": {"key": "fixedQuantity", "type": "bool"},
        "used_quantity": {"key": "usedQuantity", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "trace_type": {"key": "traceType", "type": "str"},
        "consumptions": {"key": "consumptions", "type": "[MaterialConsumptionDto]"},
    }

    def __init__(
        self,
        *,
        material_line: int,
        status: Union[str, "_models.MaterialStatus"],
        material: "_models.PartDto",
        quantity_per_part: float,
        fixed_quantity: bool,
        used_quantity: float,
        unit: str,
        trace_type: Union[str, "_models.TraceType"],
        consumptions: List["_models.MaterialConsumptionDto"],
        **kwargs: Any
    ) -> None:
        """
        :keyword material_line: Required.
        :paramtype material_line: int
        :keyword status: Required. Known values are: "Unknown", "NotStarted", "Partial", and
         "Completed".
        :paramtype status: str or ~ignos.api.client.models.MaterialStatus
        :keyword material: Required.
        :paramtype material: ~ignos.api.client.models.PartDto
        :keyword quantity_per_part: Required.
        :paramtype quantity_per_part: float
        :keyword fixed_quantity: Required.
        :paramtype fixed_quantity: bool
        :keyword used_quantity: Required.
        :paramtype used_quantity: float
        :keyword unit: Required.
        :paramtype unit: str
        :keyword trace_type: Required. Known values are: "None", "Lot", "Batch", and "SerialNumber".
        :paramtype trace_type: str or ~ignos.api.client.models.TraceType
        :keyword consumptions: Required.
        :paramtype consumptions: list[~ignos.api.client.models.MaterialConsumptionDto]
        """
        super().__init__(**kwargs)
        self.material_line = material_line
        self.status = status
        self.material = material
        self.quantity_per_part = quantity_per_part
        self.fixed_quantity = fixed_quantity
        self.used_quantity = used_quantity
        self.unit = unit
        self.trace_type = trace_type
        self.consumptions = consumptions


class WorkOrderTraceOperationDto(_serialization.Model):
    """WorkOrderTraceOperationDto.

    All required parameters must be populated in order to send to server.

    :ivar operation: Required.
    :vartype operation: int
    :ivar description: Required.
    :vartype description: str
    :ivar resource: Required.
    :vartype resource: ~ignos.api.client.models.ResourceDto
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
     "Stopped".
    :vartype status: str or ~ignos.api.client.models.OperationStatusDto
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar materials: Required.
    :vartype materials: list[~ignos.api.client.models.WorkOrderTraceMaterialDto]
    """

    _validation = {
        "operation": {"required": True},
        "description": {"required": True, "min_length": 1},
        "resource": {"required": True},
        "status": {"required": True},
        "produced_quantity": {"required": True},
        "scrapped_quantity": {"required": True},
        "materials": {"required": True},
    }

    _attribute_map = {
        "operation": {"key": "operation", "type": "int"},
        "description": {"key": "description", "type": "str"},
        "resource": {"key": "resource", "type": "ResourceDto"},
        "planned_start": {"key": "plannedStart", "type": "iso-8601"},
        "planned_end": {"key": "plannedEnd", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
        "produced_quantity": {"key": "producedQuantity", "type": "float"},
        "scrapped_quantity": {"key": "scrappedQuantity", "type": "float"},
        "materials": {"key": "materials", "type": "[WorkOrderTraceMaterialDto]"},
    }

    def __init__(
        self,
        *,
        operation: int,
        description: str,
        resource: "_models.ResourceDto",
        status: Union[str, "_models.OperationStatusDto"],
        produced_quantity: float,
        scrapped_quantity: float,
        materials: List["_models.WorkOrderTraceMaterialDto"],
        planned_start: Optional[datetime.datetime] = None,
        planned_end: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation: Required.
        :paramtype operation: int
        :keyword description: Required.
        :paramtype description: str
        :keyword resource: Required.
        :paramtype resource: ~ignos.api.client.models.ResourceDto
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword status: Required. Known values are: "NotReady", "Ready", "Ongoing", "Completed", and
         "Stopped".
        :paramtype status: str or ~ignos.api.client.models.OperationStatusDto
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword materials: Required.
        :paramtype materials: list[~ignos.api.client.models.WorkOrderTraceMaterialDto]
        """
        super().__init__(**kwargs)
        self.operation = operation
        self.description = description
        self.resource = resource
        self.planned_start = planned_start
        self.planned_end = planned_end
        self.status = status
        self.produced_quantity = produced_quantity
        self.scrapped_quantity = scrapped_quantity
        self.materials = materials


class WorkspaceDto(_serialization.Model):
    """WorkspaceDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar user_object_id: Required.
    :vartype user_object_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar settings: Required.
    :vartype settings: str
    :ivar widgets: Required.
    :vartype widgets: list[~ignos.api.client.models.WorkspaceWidgetDto]
    :ivar widget_settings: Dictionary of :code:`<string>`. Required.
    :vartype widget_settings: dict[str, str]
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "user_object_id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
        "settings": {"required": True, "min_length": 1},
        "widgets": {"required": True},
        "widget_settings": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "user_object_id": {"key": "userObjectId", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "settings": {"key": "settings", "type": "str"},
        "widgets": {"key": "widgets", "type": "[WorkspaceWidgetDto]"},
        "widget_settings": {"key": "widgetSettings", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        user_object_id: str,
        name: str,
        settings: str,
        widgets: List["_models.WorkspaceWidgetDto"],
        widget_settings: Dict[str, str],
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword user_object_id: Required.
        :paramtype user_object_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword settings: Required.
        :paramtype settings: str
        :keyword widgets: Required.
        :paramtype widgets: list[~ignos.api.client.models.WorkspaceWidgetDto]
        :keyword widget_settings: Dictionary of :code:`<string>`. Required.
        :paramtype widget_settings: dict[str, str]
        """
        super().__init__(**kwargs)
        self.id = id
        self.user_object_id = user_object_id
        self.name = name
        self.description = description
        self.settings = settings
        self.widgets = widgets
        self.widget_settings = widget_settings


class WorkspaceListDto(_serialization.Model):
    """WorkspaceListDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "name": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description


class WorkspaceWidgetBreakpointDto(_serialization.Model):
    """WorkspaceWidgetBreakpointDto.

    :ivar x:
    :vartype x: int
    :ivar y:
    :vartype y: int
    :ivar w:
    :vartype w: int
    :ivar h:
    :vartype h: int
    """

    _attribute_map = {
        "x": {"key": "x", "type": "int"},
        "y": {"key": "y", "type": "int"},
        "w": {"key": "w", "type": "int"},
        "h": {"key": "h", "type": "int"},
    }

    def __init__(
        self,
        *,
        x: Optional[int] = None,
        y: Optional[int] = None,
        w: Optional[int] = None,
        h: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword x:
        :paramtype x: int
        :keyword y:
        :paramtype y: int
        :keyword w:
        :paramtype w: int
        :keyword h:
        :paramtype h: int
        """
        super().__init__(**kwargs)
        self.x = x
        self.y = y
        self.w = w
        self.h = h


class WorkspaceWidgetDto(_serialization.Model):
    """WorkspaceWidgetDto.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar type: Required.
    :vartype type: str
    :ivar sm:
    :vartype sm: ~ignos.api.client.models.WorkspaceWidgetBreakpointDto
    :ivar md:
    :vartype md: ~ignos.api.client.models.WorkspaceWidgetBreakpointDto
    :ivar lg:
    :vartype lg: ~ignos.api.client.models.WorkspaceWidgetBreakpointDto
    """

    _validation = {
        "id": {"required": True, "min_length": 1},
        "type": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "sm": {"key": "sm", "type": "WorkspaceWidgetBreakpointDto"},
        "md": {"key": "md", "type": "WorkspaceWidgetBreakpointDto"},
        "lg": {"key": "lg", "type": "WorkspaceWidgetBreakpointDto"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: str,
        sm: Optional["_models.WorkspaceWidgetBreakpointDto"] = None,
        md: Optional["_models.WorkspaceWidgetBreakpointDto"] = None,
        lg: Optional["_models.WorkspaceWidgetBreakpointDto"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword type: Required.
        :paramtype type: str
        :keyword sm:
        :paramtype sm: ~ignos.api.client.models.WorkspaceWidgetBreakpointDto
        :keyword md:
        :paramtype md: ~ignos.api.client.models.WorkspaceWidgetBreakpointDto
        :keyword lg:
        :paramtype lg: ~ignos.api.client.models.WorkspaceWidgetBreakpointDto
        """
        super().__init__(**kwargs)
        self.id = id
        self.type = type
        self.sm = sm
        self.md = md
        self.lg = lg
