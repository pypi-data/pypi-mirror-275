# Copyright (c) 2015, Scott J Maddox. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file.

# This file was generated by `scripts/gen_dfd_pyx.py`.
# Do not edit this file directly, or your changes will be lost.
'''
First derivatives of the Fermi-Dirac integrals.
'''
from fdint cimport _fdint
import numpy

def dfdm7h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfdm7h(phi, out)
        return out
    else:
        return _fdint.dfdm7h(phi)

def dfdm5h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfdm5h(phi, out)
        return out
    else:
        return _fdint.dfdm5h(phi)

def dfdm3h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfdm3h(phi, out)
        return out
    else:
        return _fdint.dfdm3h(phi)

def dfdm1h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfdm1h(phi, out)
        return out
    else:
        return _fdint.dfdm1h(phi)

def dfd1h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd1h(phi, out)
        return out
    else:
        return _fdint.dfd1h(phi)

def dfd3h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd3h(phi, out)
        return out
    else:
        return _fdint.dfd3h(phi)

def dfd5h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd5h(phi, out)
        return out
    else:
        return _fdint.dfd5h(phi)

def dfd7h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd7h(phi, out)
        return out
    else:
        return _fdint.dfd7h(phi)

def dfd9h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd9h(phi, out)
        return out
    else:
        return _fdint.dfd9h(phi)

def dfd11h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd11h(phi, out)
        return out
    else:
        return _fdint.dfd11h(phi)

def dfd13h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd13h(phi, out)
        return out
    else:
        return _fdint.dfd13h(phi)

def dfd15h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd15h(phi, out)
        return out
    else:
        return _fdint.dfd15h(phi)

def dfd17h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd17h(phi, out)
        return out
    else:
        return _fdint.dfd17h(phi)

def dfd19h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd19h(phi, out)
        return out
    else:
        return _fdint.dfd19h(phi)

def dfd21h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd21h(phi, out)
        return out
    else:
        return _fdint.dfd21h(phi)

def dfd23h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd23h(phi, out)
        return out
    else:
        return _fdint.dfd23h(phi)

def dfd2h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd2h(phi, out)
        return out
    else:
        return _fdint.dfd2h(phi)

def dfd4h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd4h(phi, out)
        return out
    else:
        return _fdint.dfd4h(phi)

def dfd6h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd6h(phi, out)
        return out
    else:
        return _fdint.dfd6h(phi)

def dfd8h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd8h(phi, out)
        return out
    else:
        return _fdint.dfd8h(phi)

def dfd10h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd10h(phi, out)
        return out
    else:
        return _fdint.dfd10h(phi)

def dfd12h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd12h(phi, out)
        return out
    else:
        return _fdint.dfd12h(phi)

def dfd14h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd14h(phi, out)
        return out
    else:
        return _fdint.dfd14h(phi)

def dfd16h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd16h(phi, out)
        return out
    else:
        return _fdint.dfd16h(phi)

def dfd18h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd18h(phi, out)
        return out
    else:
        return _fdint.dfd18h(phi)

def dfd20h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd20h(phi, out)
        return out
    else:
        return _fdint.dfd20h(phi)

def dfd22h(phi, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdfd22h(phi, out)
        return out
    else:
        return _fdint.dfd22h(phi)
