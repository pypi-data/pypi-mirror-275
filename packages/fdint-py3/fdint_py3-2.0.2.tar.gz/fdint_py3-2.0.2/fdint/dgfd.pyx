# Copyright (c) 2015, Scott J Maddox. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file.

# This file was generated by `scripts/gen_dgfd_pyx.py`.
# Do not edit this file directly, or your changes will be lost.
'''
First derivatives of the generalized Fermi-Dirac integrals.
'''
from fdint cimport _fdint
import numpy

def dgfdm1h(phi, beta, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        assert isinstance(beta, numpy.ndarray) and beta.shape[0] == num
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdgfdm1h(phi, beta, out)
        return out
    else:
        assert not isinstance(beta, numpy.ndarray)
        return _fdint.dgfdm1h(phi, beta)

def dgfd1h(phi, beta, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        assert isinstance(beta, numpy.ndarray) and beta.shape[0] == num
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdgfd1h(phi, beta, out)
        return out
    else:
        assert not isinstance(beta, numpy.ndarray)
        return _fdint.dgfd1h(phi, beta)

def dgfd3h(phi, beta, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        assert isinstance(beta, numpy.ndarray) and beta.shape[0] == num
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdgfd3h(phi, beta, out)
        return out
    else:
        assert not isinstance(beta, numpy.ndarray)
        return _fdint.dgfd3h(phi, beta)

def dgfd5h(phi, beta, out=None):
    cdef int num
    if isinstance(phi, numpy.ndarray):
        num = phi.shape[0]
        assert isinstance(beta, numpy.ndarray) and beta.shape[0] == num
        if out is None:
            out = numpy.empty(num)
        else:
            assert isinstance(out, numpy.ndarray) and out.shape[0] == num
        _fdint.vdgfd5h(phi, beta, out)
        return out
    else:
        assert not isinstance(beta, numpy.ndarray)
        return _fdint.dgfd5h(phi, beta)
