from ._base_client import MongoBaseClient as MongoBaseClient
from .builders import AggregationBuilder as AggregationBuilder, QueryBuilder as QueryBuilder
from .models import AggregatePag as AggregatePag, Pagination as Pagination
from .types import BM as BM, T as T
from _typeshed import Incomplete
from pymongo.results import DeleteResult as DeleteResult, InsertManyResult as InsertManyResult, InsertOneResult as InsertOneResult, UpdateResult as UpdateResult
from typing import Any, Sequence

class MongoConnection:
    host: Incomplete
    port: Incomplete
    tz_aware: Incomplete
    connect: Incomplete
    kwargs: Incomplete
    def __init__(self, host: str | Sequence[str] | None, port: int | None = None, tz_aware: bool | None = None, connect: bool | None = None, **kwargs: Any) -> None: ...
    def async_client(self, database_name: str, collection_name: str, model: type[BM]) -> MongoAsyncClient[BM]: ...
    def sync_client(self, database_name: str, collection_name: str, model: type[BM]) -> MongoSyncClient[BM]: ...

class MongoSyncClient(MongoBaseClient[BM]):
    connection: Incomplete
    database_name: Incomplete
    collection_name: Incomplete
    response_class: Incomplete
    client: Incomplete
    database: Incomplete
    collection: Incomplete
    def __init__(self, connection: MongoConnection, database: str, collection: str, response_class: type[BM]) -> None: ...
    def insert_one(self, document: BM) -> InsertOneResult: ...
    def insert_many(self, documents: list[BM]) -> InsertManyResult: ...
    def update_one(self, query: QueryBuilder, document: BM, upsert: bool = False) -> UpdateResult: ...
    def update_many(self, document: BM, query: QueryBuilder = ..., upsert: bool = False) -> UpdateResult: ...
    def find_one(self, query: QueryBuilder) -> BM | None: ...
    def find_many(self, query: QueryBuilder = ..., limit: int = 0, skip: int = 0) -> list[BM]: ...
    def pagination(self, query: QueryBuilder = ..., page: int = 0, per_page: int = 10) -> Pagination[BM]: ...
    def delete_one(self, query: QueryBuilder) -> DeleteResult: ...
    def delete_many(self, query: QueryBuilder = ...) -> DeleteResult: ...
    def count_documents(self, query: QueryBuilder = ...) -> int: ...
    def aggregation(self, document_class: type[T], pipeline: AggregationBuilder = ...) -> list[T]: ...
    def aggregation_pagination(self, document_class: type[T], pipeline: AggregationBuilder = ..., page: int = 0, per_page: int = 10) -> Pagination[T]: ...

class MongoAsyncClient(MongoBaseClient[BM]):
    connection: Incomplete
    database_name: Incomplete
    collection_name: Incomplete
    response_class: Incomplete
    client: Incomplete
    database: Incomplete
    collection: Incomplete
    def __init__(self, connection: MongoConnection, database: str, collection: str, response_class: type[BM]) -> None: ...
    async def insert_one(self, document: BM) -> InsertOneResult: ...
    async def insert_many(self, documents: list[BM]) -> InsertManyResult: ...
    async def update_one(self, query: QueryBuilder, document: BM, upsert: bool = False) -> UpdateResult: ...
    async def update_many(self, document: BM, query: QueryBuilder = ..., upsert: bool = False) -> UpdateResult: ...
    async def find_one(self, query: QueryBuilder) -> BM | None: ...
    async def find_many(self, query: QueryBuilder = ..., limit: int = 0, skip: int = 0) -> list[BM]: ...
    async def delete_one(self, query: QueryBuilder) -> DeleteResult: ...
    async def delete_many(self, query: QueryBuilder = ...) -> DeleteResult: ...
    async def count_documents(self, query: QueryBuilder = ...) -> int: ...
    async def aggregation(self, document_class: type[T], pipeline: AggregationBuilder = ...) -> list[T]: ...
    async def pagination(self, query: QueryBuilder = ..., page: int = 0, per_page: int = 10) -> Pagination[BM]: ...
    async def aggregation_pagination(self, document_class: type[T], pipeline: AggregationBuilder = ..., page: int = 0, per_page: int = 10) -> Pagination[T]: ...
