from typing import Any, Callable

__all__ = ['AggregationBuilder', 'QueryBuilder']

class AggregationBuilder:
    def __init__(self) -> None: ...
    def set_group(self, query: dict[str, Any], body: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_match(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_project(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_sort(self, key: str, by: int, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_limit(self, limit: int, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_skip(self, skip: int, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_unwind(self, key: str, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_lookup(self, key: str, from_collection: str, local_field: str, foreign_field: str, as_field: str, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_add_fields(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_facet(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def build(self) -> list[dict[str, Any]]: ...

class QueryBuilder:
    def __init__(self) -> None: ...
    def set_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_not_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_greater_than(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_greater_than_or_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_less_than(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_less_than_or_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_in(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_not_in(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_regex(self, key: str, value: Any, case_sensivite: bool = True, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_not_regex(self, key: str, value: Any, case_sensivite: bool = True, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_element_match(self, key: str, query: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_or(self, *querys: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_and(self, *querys: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_nor(self, *querys: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def update_query(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def remove_key(self, key: str, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def build(self) -> dict[str, Any]: ...
