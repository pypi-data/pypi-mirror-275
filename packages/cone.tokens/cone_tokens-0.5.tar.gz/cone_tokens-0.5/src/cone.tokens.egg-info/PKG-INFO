Metadata-Version: 2.1
Name: cone.tokens
Version: 0.5
Summary: cone token api
Home-page: http://github.com/conestack/cone.tokens
Author: Cone Contributors
Author-email: dev@conestack.org
License: MIT
Keywords: node pyramid cone web
Classifier: Environment :: Web Environment
Classifier: Programming Language :: Python
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
License-File: LICENSE.rst
Requires-Dist: setuptools
Requires-Dist: cone.sql
Requires-Dist: python-dateutil
Requires-Dist: qrcode[pil]
Provides-Extra: test
Requires-Dist: zope.testrunner; extra == "test"

.. image:: https://img.shields.io/pypi/v/cone.tokens.svg
    :target: https://pypi.python.org/pypi/cone.tokens
    :alt: Latest PyPI version

.. image:: https://img.shields.io/pypi/dm/cone.tokens.svg
    :target: https://pypi.python.org/pypi/cone.tokens
    :alt: Number of PyPI downloads

.. image:: https://github.com/conestack/cone.tokens/actions/workflows/python-package.yml/badge.svg
    :target: https://github.com/conestack/cone.tokens/actions/workflows/python-package.yml
    :alt: Package build

.. image:: https://coveralls.io/repos/github/bluedynamics/cone.tokens/badge.svg?branch=master
    :target: https://coveralls.io/github/bluedynamics/cone.tokens?branch=master

This package provides a unique token generator for ``cone.app``.

Features:

* QR Code generation
* JSON API for token management


Application ini file configuration
==================================

- **cone.tokens.config_file**: Required. Path to tokens json config file.

- **cone.tokens.settings_node_path**: Optional. Application node path to token settings node.

- **cone.tokens.entryfactory**: Optional. Node class used as entry node factory.


JSON API
========

``cone.tokens`` provides a JSON API for token management.


query_token
-----------

Query token by value. It expects a ``GET`` request.

**Schema**: URL/tokens/query_token

**Params**

- ``value``: A string containing the token value to look up.

**Response**

- ``success``: True or False.
- ``token``: Token data or null if token not exists.
- ``message``: On failure the error message is returned.


add_token
---------

``add_token`` is for generating a new token. It expects a ``POST`` request.

**Schema**: URL/tokens/add_token

**Params**

- ``value``: A string containing the token value. If empty, the token uuid gets used as value.
- ``valid_from``: A datetime in isoformat. If empty, token has no effective date.
- ``valid_to``: A datetime in isoformat. If empty, token has no expiration date.
- ``usage_count``: An integer defining how often the token can be consumed. If -1, token can be consumed unlimited times.
- ``lock_time``: Time in seconds the token is locked after consumption as integer.

**Response**

- ``success``: True or False.
- ``token_uid``: On success the token uid is returned.
- ``message``: On failure the error message is returned.


consume_token
-------------

``consume_token`` is for consuming a token. It expects a ``GET`` request.

**Schema**: URL/tokens/<UUID>/consume_token

**Params**

- No parametes expected.

**Response**

- ``success``: True or False.
- ``consumed``: On success flag whether token consumption was valid.
- ``message``: On failure the error message is returned.


update_token
------------

``edit_token`` is for editing a token. It expects a ``POST`` request.

**Schema**: URL/tokens/<UUID>/update_token

**Params**

- ``value``: A string containing the token value. If empty, the token uuid gets used as value. Unchanged if parameter is omitted.
- ``valid_from``: A datetime in isoformat. If empty, token has no effective date. Unchanged if parameter is omitted.
- ``valid_to``: A datetime in isoformat. If empty, token has no expiration date. Unchanged if parameter is omitted.
- ``usage_count``: An integer defining how often the token can be consumed. If -1, token can be consumed unlimited times. Unchanged if parameter is omitted.
- ``lock_time``: Time in seconds the token is locked after consumption as integer. Unchanged if parameter is omitted.

**Response**

- ``success``: True or False.
- ``message``: On failure the error message is returned.


delete_token
------------

``delete_token`` is for deleting a token. It expects a ``POST`` request.

**Schema**: URL/tokens/<UUID>/delete_token

**Params**

- No parametes expected.

**Response**

- ``success``: True or False.
- ``message``: On failure the error message is returned.


TODO
====

- Introduce ``consume`` permission for JSON API.


Contributors
============

- Robert Niederreiter
- Torben Baumgartner
- Lena Daxenbichler


Changes
=======

0.5 (2024-05-23)
----------------

- Update Makefile.
  [rnix]

- ``properties`` and ``metadata`` of ``cone.tokens.model.Tokens`` are instance
  properties now.
  [rnix]

- Use ``ts.http_request`` instead of ``ts.ajax.request``.
  [rnix]


0.4 (2024-02-12)
----------------

- Adopt Settings UI changes from ``cone.app``.
  [rnix]


0.3 (2023-09-28)
----------------

- Tokens can be bulk deleted.
  [lenadax]

- Tokens can be created from scanned value.
  [rnix]


0.2 (2023-09-27)
----------------

- Actually upload package to pypi.
  [rnix]


0.1 (2023-09-27)
----------------

- Initial work.
  [rnix, toalba, lenadax]


License
=======

MIT License

Copyright (c) 2023-2024, Cone Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
