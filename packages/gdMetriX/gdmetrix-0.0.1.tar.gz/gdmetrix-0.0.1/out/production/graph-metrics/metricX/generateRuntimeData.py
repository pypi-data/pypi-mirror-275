import random
import timeit

import matplotlib.pyplot as plt
import networkx as nx

import symmetry as sym

random.seed(10023548)

purchase, trans, rot, refl, pixel = [], [], [], [], []

purchase_cutoff = 13

for i in range(0, 1):
    size = i
    random_graph = nx.fast_gnp_random_graph(i, 0.25, random.randint(1, 10000000))
    random_embedding = {n: [random.uniform(-100, 100), random.uniform(-100, 100)] for n in range(0, i + 1)}

    nx.set_node_attributes(random_graph, random_embedding, "pos")

    time_purchase = 0 if i > purchase_cutoff else timeit.timeit(lambda: sym.reflective_symmetry(random_graph), number=1)
    time_translational = timeit.timeit(lambda: sym.edge_based_symmetry(random_graph, sym.SymmetryType.TRANSLATIONAL),
                                       number=3) / 3
    time_rotational = timeit.timeit(lambda: sym.edge_based_symmetry(random_graph, sym.SymmetryType.ROTATIONAL),
                                    number=3) / 3
    time_reflective = timeit.timeit(lambda: sym.edge_based_symmetry(random_graph, sym.SymmetryType.REFLECTIVE),
                                    number=3) / 3
    time_pixel = timeit.timeit(lambda: sym.visual_symmetry(random_graph), number=3) / 3

    print(purchase)
    print()
    print(trans)
    print()
    print(rot)
    print()
    print(refl)
    print()
    print(pixel)

    print("Size:", i)
    print(time_purchase)
    print(time_translational)
    print(time_rotational)
    print(time_reflective)
    print(time_pixel)
    print()
    print()

    if i <= purchase_cutoff:
        purchase.append(time_purchase)
    trans.append(time_translational)
    rot.append(time_rotational)
    refl.append(time_reflective)
    pixel.append(time_pixel)

print(purchase)
print(trans)
print(rot)
print(refl)
print(pixel)

purchase = [6.5999999998567205e-06, 4.4999999997408224e-06, 0.002871299999999799, 0.0032377999999999574,
            0.002221699999999771, 0.040195300000000156, 0.01036600000000032, 0.004151000000000238, 0.041603499999999904,
            1.0979177999999994, 0.6551106999999998, 1.7047142000000006, 3.7848644, 76.57242360000001]

trans = [1.4000000000032506e-05, 8.80000000010502e-06, 1.6633333333201012e-05, 0.00021696666666655892,
         0.00015046666666673758, 0.0003421999999999592, 0.0004412333333333092, 0.00021740000000007123,
         0.00044103333333348854, 0.0008568666666667705, 0.0007063666666666061, 0.0009502333333332539,
         0.0014537000000001872, 0.002728833333335956, 0.004327399999998723, 0.0027951333333362527, 0.005182233333333859,
         0.010115833333334953, 0.009661200000001221, 0.019130166666665598, 0.015330633333329994, 0.01573323333333576,
         0.026389133333334296, 0.035022266666662936, 0.05992563333333578, 0.02434949999999958, 0.04368919999999813,
         0.05151126666666528, 0.04605909999999843, 0.07571710000000091, 0.08187503333333268, 0.08803019999999624,
         0.09242929999999679, 0.109271233333331, 0.09584180000000231, 0.11707593333333459, 0.1695504000000009,
         0.17927560000000162, 0.15175263333333078, 0.16934673333333686, 0.23598170000000115, 0.2535693666666627,
         0.23993593333332797, 0.2818109333333325, 0.32410853333333495, 0.3590556666666676, 0.3507763333333287,
         0.45040450000000004, 0.4048165000000002, 0.7451966000000046, 0.6396600999999956, 0.6471277333333395,
         0.7776824666666661, 0.6829330999999949, 0.7948982666666685, 0.7985710666666629, 0.9409023333333266,
         0.8818214666666601, 1.0337564666666594, 1.110912600000006, 1.1627134666666545, 1.840136100000014,
         1.374199200000002, 1.4985059333333386, 1.601506633333334, 1.4148153000000054, 1.7994500666666984,
         2.10734263333336, 2.0272812333333454, 2.2497714333333456, 2.517407299999983, 2.2826251333333403,
         2.765218533333344, 2.6034743000000162, 3.000814233333358, 2.890561733333319, 3.639007066666674,
         3.3338496666666138, 3.2372594333332927, 3.6157810666666896]

rot = [4.866666666547559e-06, 5.50000000002863e-06, 6.733333333415932e-06, 0.0002159000000000096,
       0.00017380000000007575, 0.0004988000000000584, 0.0006545999999999866, 0.0002565666666665874,
       0.000593266666666814, 0.001234866666666612, 0.0011585666666666938, 0.0016182333333330707, 0.0022552666666667185,
       0.004323100000002948, 0.00841570000000047, 0.0039635333333336575, 0.009199066666667477, 0.024593666666665587,
       0.018182933333335427, 0.03756626666666326, 0.0307898999999973, 0.028616999999997006, 0.044838366666667184,
       0.07410246666666846, 0.08816150000000296, 0.04787563333333367, 0.08916290000000042, 0.08611470000000072,
       0.10299373333333506, 0.1503711666666637, 0.13360976666666602, 0.15859503333333672, 0.21282673333333454,
       0.21701203333333297, 0.20942026666666416, 0.219468166666663, 0.31584803333333394, 0.3619976999999987,
       0.28792300000000165, 0.32996453333332926, 0.4464685000000041, 0.49913843333333335, 0.4650816999999942,
       0.5446760666666629, 0.5874961999999945, 0.6896756666666685, 0.7798827000000017, 0.8704636999999972,
       0.7699998333333345, 1.2873316333333378, 1.1034288000000079, 1.1430390333333378, 1.5963856333333315,
       1.5322888999999975, 1.6515052999999966, 1.7282206666666677, 1.9606074333333368, 1.6614646333333287,
       2.1034667333333346, 2.274704566666666, 2.3351207666666673, 3.591120066666671, 2.842554866666679,
       3.1735317000000123, 3.163199866666654, 3.4638148333333447, 3.5216184000000035, 4.323401266666679,
       4.401857566666649, 4.437015133333337, 4.9306048333333665, 4.646220833333359, 5.369624466666703,
       5.233840233333315, 6.234997466666641, 6.008883666666672, 6.068860733333319, 6.446835199999971, 6.744189466666664,
       6.928756933333337]

refl = [4.266666666641328e-06, 4.93333333340118e-06, 6.833333333400304e-06, 0.0004929666666666499,
        0.00031696666666662193, 0.0009417666666666769, 0.0012410333333334005, 0.0007222666666666377,
        0.0012191666666666972, 0.002678966666666819, 0.002114666666666487, 0.002980866666666415, 0.0033832333333331612,
        0.008368966666665756, 0.013805400000000153, 0.007898333333334525, 0.016274233333329374, 0.03866260000000447,
        0.029927333333333195, 0.053534933333333846, 0.04134479999999977, 0.045064966666667296, 0.08292090000000012,
        0.10269386666666946, 0.11505093333333605, 0.07563093333333389, 0.13450183333333143, 0.12569866666666485,
        0.1708630333333332, 0.22243096666666418, 0.19915696666666824, 0.2312053666666666, 0.2657972333333352,
        0.3057202666666683, 0.3123719666666697, 0.34273420000000004, 0.4174874999999976, 0.51995096666667,
        0.4354509666666691, 0.5323975000000019, 0.7116571333333374, 0.765305033333334, 0.6776452000000006,
        0.831780900000003, 0.9099710666666662, 1.078828033333328, 1.1093028333333355, 1.3599937000000086,
        1.5743350999999943, 2.022182799999996, 1.875923700000006, 1.654526599999997, 2.4047502000000045,
        2.2329691666666633, 2.460342799999997, 2.5448518999999883, 2.8671634000000004, 2.7935992666666607,
        3.158148399999997, 3.3994778666666625, 3.5627519000000043, 4.614432366666658, 4.23979483333333,
        4.455197100000002, 4.893535100000008, 4.3691945000000105, 5.061423066666673, 6.541604800000035,
        6.235933533333347, 6.732281499999999, 7.957233733333358, 7.200112700000015, 8.127948066666667,
        8.441458233333302, 8.984914333333336, 14.456832566666662, 9.362281000000015, 9.850930800000015,
        10.242874500000047, 10.833754166666646]

pixel = [3.533333333471944e-06, 3.5000000000451337e-06, 0.11376966666666677, 0.11184153333333342, 0.1057928333333334,
         0.10409759999999994, 0.10418216666666662, 0.10217549999999982, 0.1001452666666669, 0.0951762666666669,
         0.09293589999999992, 0.08970779999999993, 0.08808416666666652, 0.08800713333333476, 0.09903130000000242,
         0.09942093333333446, 0.09714036666666459, 0.1114410333333306, 0.10014226666666559, 0.10004246666666934,
         0.09757889999999729, 0.10140576666666827, 0.09423263333333409, 0.09149499999999951, 0.09804446666666422,
         0.1059868333333327, 0.09246293333333237, 0.08898233333333394, 0.09211799999999926, 0.08655010000000136,
         0.10047869999999648, 0.08488069999999936, 0.084778666666665, 0.08600503333333147, 0.08498656666666686,
         0.09111016666666671, 0.09485536666666405, 0.08875896666666468, 0.09205573333333443, 0.08624213333333348,
         0.08812459999999571, 0.08487766666666137, 0.08782576666666841, 0.08533993333333001, 0.08532879999999447,
         0.09420990000000036, 0.08866470000000011, 0.11501033333333528, 0.19559063333333407, 0.13772043333333764,
         0.1349958666666661, 0.09694036666667216, 0.10999023333332995, 0.10038413333333551, 0.11178346666666054,
         0.11101466666667648, 0.11076399999999846, 0.11451419999999264, 0.10425776666666782, 0.12299460000000788,
         0.12149079999998473, 0.10285176666665545, 0.12948396666666895, 0.10661216666666935, 0.10438073333333857,
         0.10765313333331505, 0.1113366000000345, 0.11613183333334594, 0.10726066666666156, 0.11393156666664102,
         0.11589093333335161, 0.1547715666666439, 0.10835596666667395, 0.10494343333330865, 0.10843756666668014,
         0.13931510000001404, 0.1211796666666487, 0.10354133333332054, 0.13322509999996632, 0.09615633333335911]

# purchase = np.random.rand(100)
# trans = np.random.rand(100)
# rot = np.random.rand(100)
# refl = np.random.rand(100)
# pixel = np.random.rand(100)

plt.figure(figsize=(8, 5))

# Plotting
plt.plot(purchase, label='Purchase')
plt.plot(trans, label='KMP - translational')
plt.plot(rot, label='KMP - rotational')
plt.plot(refl, label='KMP - reflective')
plt.plot(pixel, label='Pixel-based')

plt.ylim(0, 11)

# Adding labels and legend
plt.xlabel('n')
plt.ylabel('Time [s]')
plt.title('Symmetry metrics - Runtime comparision')
plt.legend()

plt.text(len(trans) - 1, trans[-1], f'{trans[-1]:.1f}', ha='left', va='bottom')
plt.text(len(trans) - 1, rot[-1], f'{rot[-1]:.1f}', ha='left', va='bottom')
plt.text(len(trans) - 1, refl[-1] - 0.5, f'{refl[-1]:.1f}', ha='left', va='bottom')
plt.text(len(trans) - 1, pixel[-1], f'{pixel[-1]:.1f}', ha='left', va='bottom')
plt.grid(True, linestyle='dotted')

# Display the plot
plt.show()
