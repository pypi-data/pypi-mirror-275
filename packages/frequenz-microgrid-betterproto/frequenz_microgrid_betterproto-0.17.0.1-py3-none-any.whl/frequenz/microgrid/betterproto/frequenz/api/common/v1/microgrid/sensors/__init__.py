# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: frequenz/api/common/v1/microgrid/sensors/sensors.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import List

import betterproto

from ... import (
    metrics as __metrics__,
    microgrid as __microgrid__,
)


class SensorCategory(betterproto.Enum):
    """Enumerated sensor categories."""

    SENSOR_CATEGORY_UNSPECIFIED = 0
    """Unspecified"""

    SENSOR_CATEGORY_THERMOMETER = 1
    """Thermometer (temperature sensor)"""

    SENSOR_CATEGORY_HYGROMETER = 2
    """Hygrometer (humidity sensor)"""

    SENSOR_CATEGORY_BAROMETER = 3
    """Barometer (pressure sensor)."""

    SENSOR_CATEGORY_PYRANOMETER = 4
    """Pyranometer (solar irradiance sensor)."""

    SENSOR_CATEGORY_ANEMOMETER = 5
    """Anemometer (wind velocity and direction sensor)."""

    SENSOR_CATEGORY_ACCELEROMETER = 6
    """Accelerometers (acceleration sensor)."""

    SENSOR_CATEGORY_GENERAL = 7
    """General sensors, which do not fall in any of the above categories"""


class SensorMetric(betterproto.Enum):
    """Enumrated sensor metrics."""

    SENSOR_METRIC_UNSPECIFIED = 0
    """Unspecified."""

    SENSOR_METRIC_TEMPERATURE = 1
    """Temperature. In Celsius (°C)."""

    SENSOR_METRIC_HUMIDITY = 2
    """Humidity In percentage (%)."""

    SENSOR_METRIC_PRESSURE = 3
    """Pressure In Pascal (Pa)."""

    SENSOR_METRIC_IRRADIANCE = 4
    """Irradiance / Radiation flux In watts per square meter (W / m^2)."""

    SENSOR_METRIC_VELOCITY = 5
    """Velocity In meters per second (m / s)."""

    SENSOR_METRIC_ACCELERATION = 6
    """Acceleration. In meters per second per second (m / s^2)"""

    SENSOR_METRIC_ANGLE = 7
    """
    Metric to represent angles, for metrics like direction. In angles with
    respect to the (magnetic) North (°).
    """

    SENSOR_METRIC_DEW_POINT = 8
    """
    Dew point. The temperature at which the air becomes saturated with water
    vapor. In Celsius (°C).
    """


class SensorStateCode(betterproto.Enum):
    """
    Enum to represent the various states that a sensor can be in. This enum is
    unified across all sensor categories for consistency.
    """

    SENSOR_STATE_CODE_UNSPECIFIED = 0
    """
    Default value when the sensor state is not explicitly set. This is the zero
    value of the enum.
    """

    SENSOR_STATE_CODE_ON = 1
    """The sensor is up and running."""

    SENSOR_STATE_CODE_ERROR = 2
    """The sensor is in an error state."""


class SensorErrorCode(betterproto.Enum):
    """A representation of all possible errors that can occur in sensors."""

    SENSOR_ERROR_CODE_UNSPECIFIED = 0
    """Default value. No specific error is specified."""

    SENSOR_ERROR_CODE_UNKNOWN = 1
    """
    The sensor is reporting an unknown or an undefined error, and the sender
    cannot parse the sensor error to any of the variants below.
    """

    SENSOR_ERROR_CODE_INTERNAL = 2
    """Error indicating an internal error within the sensor."""


@dataclass(eq=False, repr=False)
class Sensor(betterproto.Message):
    """
    A sensor that measures a physical metric in the microgrid's surrounding
    environment.
    """

    id: int = betterproto.uint64_field(1)
    """A unique identifier for the sensor."""

    microgrid_id: int = betterproto.uint64_field(2)
    """Unique identifier of the parent microgrid_id."""

    name: str = betterproto.string_field(3)
    """An optional name for the sensor."""

    category: "SensorCategory" = betterproto.enum_field(4)
    """The category of the sensor."""

    manufacturer: str = betterproto.string_field(5)
    """The sensor manufacturer."""

    model_name: str = betterproto.string_field(6)
    """The model name of the sensor."""

    operational_lifetime: "__microgrid__.Lifetime" = betterproto.message_field(7)
    """The operational lifetime of the sensor."""


@dataclass(eq=False, repr=False)
class SensorData(betterproto.Message):
    """
    SensorData message aggregates multiple metrics, operational states, and
    errors, related to a specific microgrid sensor. !!! example   Example
    output of a component data message:   ```    {      sensor_id: 13,
    metric_samples: [        /* list of metrics for multiple timestamps */
    {          sampled_at: "2023-10-01T00:00:00Z",          metric:
    "METRIC_SENSOR_TEMPERATURE",          value: metric_value_variant:
    {simple_metric: {value: 23.5},        },        {          sampled_at:
    "2023-10-01T00:00:00Z",          metric: "METRIC_SENSOR_RELATIVE_HUMIDITY",
    value: metric_value_variant: {simple_metric: {value: 23.5},        }
    ],      states: [        {          sampled_at: "2023-10-01T00:00:00Z",
    states: [],          errors: [],        },      ]    }  ```
    """

    sensor_id: int = betterproto.uint64_field(1)
    """The ID of the microgrid sensors."""

    metric_samples: List["SensorMetricSample"] = betterproto.message_field(2)
    """List of measurements for a metric of the specific microgrid sensor."""

    states: List["SensorState"] = betterproto.message_field(3)
    """List of states of a specific microgrid sensor."""


@dataclass(eq=False, repr=False)
class SensorState(betterproto.Message):
    """Representation of a sensor state and errors."""

    sampled_at: datetime = betterproto.message_field(1)
    """The time at which the state was sampled."""

    states: List["SensorStateCode"] = betterproto.enum_field(2)
    """
    List of states of the microgrid sensor. !!! note    The list will contain
    unique members. No state will exist twice in    this list.
    """

    errors: List["SensorErrorCode"] = betterproto.enum_field(4)
    """
    List of errors for the microgrid sensor. !!! note    This list is expected
    to have errors if and only if the sensor is in    an error state. !!! note
    The list will contain unique members. No error will exist twice in    this
    list.
    """


@dataclass(eq=False, repr=False)
class SensorMetricSample(betterproto.Message):
    """Representation of a sampled sensor metric along with its value."""

    sampled_at: datetime = betterproto.message_field(1)
    """The UTC timestamp of when the metric was sampled."""

    metric: "__metrics__.Metric" = betterproto.enum_field(2)
    """The metric that was sampled."""

    value: "__metrics__.MetricValueVariant" = betterproto.message_field(3)
    """The value of the sampled metric."""
