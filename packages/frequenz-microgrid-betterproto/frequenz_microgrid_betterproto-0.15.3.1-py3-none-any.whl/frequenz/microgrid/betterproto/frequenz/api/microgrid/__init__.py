# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: frequenz/api/microgrid/microgrid.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ..common import (
    components as _common_components__,
    metrics as _common_metrics__,
)
from . import (
    battery,
    ev_charger,
    grid,
    inverter,
    meter,
    sensor,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class SetBoundsParamTargetMetric(betterproto.Enum):
    """An enumerated list of metrics whose bounds can be set."""

    TARGET_METRIC_UNSPECIFIED = 0
    TARGET_METRIC_POWER_ACTIVE = 1
    TARGET_METRIC_CURRENT = 2
    TARGET_METRIC_CURRENT_PHASE_1 = 3
    TARGET_METRIC_CURRENT_PHASE_2 = 4
    TARGET_METRIC_CURRENT_PHASE_3 = 5
    TARGET_METRIC_POWER_REACTIVE = 6


@dataclass(eq=False, repr=False)
class Location(betterproto.Message):
    """
    A pair of geographical co-ordinates, representing the location of a place.
    """

    latitude: float = betterproto.float_field(1)
    """The latitude of the place."""

    longitude: float = betterproto.float_field(2)
    """The longitude of the place."""


@dataclass(eq=False, repr=False)
class MicrogridMetadata(betterproto.Message):
    """Metadata that describes a microgrid."""

    microgrid_id: int = betterproto.uint64_field(1)
    """
    The microgrid ID. This is a natural number that uniquely identifies a given
    microgrid.
    """

    location: "Location" = betterproto.message_field(2)
    """The location of the microgrid, in geographical co-ordinates."""


@dataclass(eq=False, repr=False)
class ComponentFilter(betterproto.Message):
    """Parameters for filtering the components."""

    ids: List[int] = betterproto.uint64_field(1)
    """Return components that have the specified IDs only."""

    categories: List["_common_components__.ComponentCategory"] = betterproto.enum_field(
        2
    )
    """Return components that have the specified categories only."""


@dataclass(eq=False, repr=False)
class ComponentIdParam(betterproto.Message):
    """
    Encapsulation of a component ID, intended to be used as a parameter for rpc
    methods.
    """

    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class ConnectionFilter(betterproto.Message):
    """Parameters for filtering the component connections"""

    starts: List[int] = betterproto.uint64_field(1)
    """
    Only return connections that start from the specified component ID(s): if
    empty, connections with any `start` will be returned
    """

    ends: List[int] = betterproto.uint64_field(2)
    """
    Only return connections that end at the specified component ID(s): if
    empty, connections with any `end` will be returned
    """


@dataclass(eq=False, repr=False)
class PowerLevelParam(betterproto.Message):
    """
    Parameters for setting the charge/discharge power of an appropriate
    component.
    """

    component_id: int = betterproto.uint64_field(1)
    """The ID of the component to set the output power of."""

    power_w: int = betterproto.uint64_field(2)
    """
    The output power level, in watts. This is always a +ve integer. The sign of
    the power level is controlled by the implementations of the `Charge` and
    `Discharge` RPC methods.
    """


@dataclass(eq=False, repr=False)
class SetPowerActiveParam(betterproto.Message):
    """
    Parameters for setting the active power of an appropriate component using
    the `SetPowerActive` RPC.
    """

    component_id: int = betterproto.uint64_field(1)
    """The ID of the component to set the output active power of."""

    power: float = betterproto.float_field(2)
    """
    The output active power level, in watts. -ve values are for discharging,
    and +ve values are for charging.
    """


@dataclass(eq=False, repr=False)
class SetPowerReactiveParam(betterproto.Message):
    """
    Parameters for setting the reactive power of an appropriate component using
    the `SetPowerReactive` RPC.
    """

    component_id: int = betterproto.uint64_field(1)
    """The ID of the component to set the output reactive power of."""

    power: float = betterproto.float_field(2)
    """
    The output reactive power level, in VAr. -ve values are for inductive
    (lagging) power , and +ve values are for  capacitive (leading) power.
    """


@dataclass(eq=False, repr=False)
class SetBoundsParam(betterproto.Message):
    """
    Parameters for setting bounds of a given metric of a given component.
    """

    component_id: int = betterproto.uint64_field(1)
    """The ID of the target component."""

    target_metric: "SetBoundsParamTargetMetric" = betterproto.enum_field(2)
    """The target metric whose bounds have to be set."""

    bounds: "_common_metrics__.Bounds" = betterproto.message_field(3)
    """The bounds for the target metric."""


@dataclass(eq=False, repr=False)
class Component(betterproto.Message):
    """
    A generic message for components. It is used to represent any category of
    component, with its static parameters.
    """

    id: int = betterproto.uint64_field(1)
    """A unique identifier for the component."""

    name: str = betterproto.string_field(2)
    """An optional name for the component."""

    category: "_common_components__.ComponentCategory" = betterproto.enum_field(3)
    """The category of the component."""

    manufacturer: str = betterproto.string_field(4)
    """The component manufacturer."""

    model_name: str = betterproto.string_field(5)
    """The model name of the component."""

    grid: "grid.Metadata" = betterproto.message_field(11, group="metadata")
    battery: "battery.Metadata" = betterproto.message_field(12, group="metadata")
    inverter: "inverter.Metadata" = betterproto.message_field(13, group="metadata")
    meter: "meter.Metadata" = betterproto.message_field(14, group="metadata")
    ev_charger: "ev_charger.Metadata" = betterproto.message_field(15, group="metadata")
    sensor: "sensor.Metadata" = betterproto.message_field(16, group="metadata")


@dataclass(eq=False, repr=False)
class ComponentList(betterproto.Message):
    """
    A message containing a list of components, used as a return typ in certain
    RPC methods.
    """

    components: List["Component"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ComponentData(betterproto.Message):
    """
    A generic container for data that can originate from any component type.
    """

    ts: datetime = betterproto.message_field(1)
    """The timestamp of when the data was measured."""

    id: int = betterproto.uint64_field(2)
    """The component ID."""

    meter: "meter.Meter" = betterproto.message_field(3, group="data")
    inverter: "inverter.Inverter" = betterproto.message_field(4, group="data")
    battery: "battery.Battery" = betterproto.message_field(5, group="data")
    ev_charger: "ev_charger.EvCharger" = betterproto.message_field(6, group="data")
    sensor: "sensor.Sensor" = betterproto.message_field(7, group="data")


@dataclass(eq=False, repr=False)
class Connection(betterproto.Message):
    """
    Describes a single connection between components of the microgrid, with
    direction away from the grid endpoint, meaning it is aligned with positive
    current according to the passive sign convention:
    https://en.wikipedia.org/wiki/Passive_sign_convention
    """

    start: int = betterproto.uint64_field(1)
    """`id` of the component the connection starts from"""

    end: int = betterproto.uint64_field(2)
    """`id` of the component the connection points to"""


@dataclass(eq=False, repr=False)
class ConnectionList(betterproto.Message):
    """List of connections between components"""

    connections: List["Connection"] = betterproto.message_field(1)


class MicrogridStub(betterproto.ServiceStub):
    async def get_microgrid_metadata(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MicrogridMetadata":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/GetMicrogridMetadata",
            betterproto_lib_google_protobuf_empty,
            MicrogridMetadata,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_components(
        self,
        component_filter: "ComponentFilter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ComponentList":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/ListComponents",
            component_filter,
            ComponentList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_connections(
        self,
        connection_filter: "ConnectionFilter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ConnectionList":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/ListConnections",
            connection_filter,
            ConnectionList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_component_data(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["ComponentData"]:
        async for response in self._unary_stream(
            "/frequenz.api.microgrid.Microgrid/StreamComponentData",
            component_id_param,
            ComponentData,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def can_stream_data(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.BoolValue":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/CanStreamData",
            component_id_param,
            betterproto_lib_google_protobuf.BoolValue,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_exclusion_bounds(
        self,
        set_bounds_param: "SetBoundsParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Timestamp":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/AddExclusionBounds",
            set_bounds_param,
            betterproto_lib_google_protobuf.Timestamp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_inclusion_bounds(
        self,
        set_bounds_param: "SetBoundsParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Timestamp":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/AddInclusionBounds",
            set_bounds_param,
            betterproto_lib_google_protobuf.Timestamp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_power_active(
        self,
        set_power_active_param: "SetPowerActiveParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/SetPowerActive",
            set_power_active_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_power_reactive(
        self,
        set_power_reactive_param: "SetPowerReactiveParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/SetPowerReactive",
            set_power_reactive_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/Start",
            component_id_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def hot_standby(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/HotStandby",
            component_id_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cold_standby(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/ColdStandby",
            component_id_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/Stop",
            component_id_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def error_ack(
        self,
        component_id_param: "ComponentIdParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/frequenz.api.microgrid.Microgrid/ErrorAck",
            component_id_param,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MicrogridBase(ServiceBase):

    async def get_microgrid_metadata(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "MicrogridMetadata":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_components(
        self, component_filter: "ComponentFilter"
    ) -> "ComponentList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_connections(
        self, connection_filter: "ConnectionFilter"
    ) -> "ConnectionList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_component_data(
        self, component_id_param: "ComponentIdParam"
    ) -> AsyncIterator["ComponentData"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ComponentData()

    async def can_stream_data(
        self, component_id_param: "ComponentIdParam"
    ) -> "betterproto_lib_google_protobuf.BoolValue":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_exclusion_bounds(
        self, set_bounds_param: "SetBoundsParam"
    ) -> "betterproto_lib_google_protobuf.Timestamp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_inclusion_bounds(
        self, set_bounds_param: "SetBoundsParam"
    ) -> "betterproto_lib_google_protobuf.Timestamp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_power_active(
        self, set_power_active_param: "SetPowerActiveParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_power_reactive(
        self, set_power_reactive_param: "SetPowerReactiveParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start(
        self, component_id_param: "ComponentIdParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def hot_standby(
        self, component_id_param: "ComponentIdParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cold_standby(
        self, component_id_param: "ComponentIdParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop(
        self, component_id_param: "ComponentIdParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def error_ack(
        self, component_id_param: "ComponentIdParam"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_microgrid_metadata(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, MicrogridMetadata]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_microgrid_metadata(request)
        await stream.send_message(response)

    async def __rpc_list_components(
        self, stream: "grpclib.server.Stream[ComponentFilter, ComponentList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_components(request)
        await stream.send_message(response)

    async def __rpc_list_connections(
        self, stream: "grpclib.server.Stream[ConnectionFilter, ConnectionList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_connections(request)
        await stream.send_message(response)

    async def __rpc_stream_component_data(
        self, stream: "grpclib.server.Stream[ComponentIdParam, ComponentData]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream_component_data,
            stream,
            request,
        )

    async def __rpc_can_stream_data(
        self,
        stream: "grpclib.server.Stream[ComponentIdParam, betterproto_lib_google_protobuf.BoolValue]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_stream_data(request)
        await stream.send_message(response)

    async def __rpc_add_exclusion_bounds(
        self,
        stream: "grpclib.server.Stream[SetBoundsParam, betterproto_lib_google_protobuf.Timestamp]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_exclusion_bounds(request)
        await stream.send_message(response)

    async def __rpc_add_inclusion_bounds(
        self,
        stream: "grpclib.server.Stream[SetBoundsParam, betterproto_lib_google_protobuf.Timestamp]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_inclusion_bounds(request)
        await stream.send_message(response)

    async def __rpc_set_power_active(
        self,
        stream: "grpclib.server.Stream[SetPowerActiveParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_power_active(request)
        await stream.send_message(response)

    async def __rpc_set_power_reactive(
        self,
        stream: "grpclib.server.Stream[SetPowerReactiveParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_power_reactive(request)
        await stream.send_message(response)

    async def __rpc_start(
        self,
        stream: "grpclib.server.Stream[ComponentIdParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start(request)
        await stream.send_message(response)

    async def __rpc_hot_standby(
        self,
        stream: "grpclib.server.Stream[ComponentIdParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.hot_standby(request)
        await stream.send_message(response)

    async def __rpc_cold_standby(
        self,
        stream: "grpclib.server.Stream[ComponentIdParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cold_standby(request)
        await stream.send_message(response)

    async def __rpc_stop(
        self,
        stream: "grpclib.server.Stream[ComponentIdParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop(request)
        await stream.send_message(response)

    async def __rpc_error_ack(
        self,
        stream: "grpclib.server.Stream[ComponentIdParam, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.error_ack(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/frequenz.api.microgrid.Microgrid/GetMicrogridMetadata": grpclib.const.Handler(
                self.__rpc_get_microgrid_metadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                MicrogridMetadata,
            ),
            "/frequenz.api.microgrid.Microgrid/ListComponents": grpclib.const.Handler(
                self.__rpc_list_components,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentFilter,
                ComponentList,
            ),
            "/frequenz.api.microgrid.Microgrid/ListConnections": grpclib.const.Handler(
                self.__rpc_list_connections,
                grpclib.const.Cardinality.UNARY_UNARY,
                ConnectionFilter,
                ConnectionList,
            ),
            "/frequenz.api.microgrid.Microgrid/StreamComponentData": grpclib.const.Handler(
                self.__rpc_stream_component_data,
                grpclib.const.Cardinality.UNARY_STREAM,
                ComponentIdParam,
                ComponentData,
            ),
            "/frequenz.api.microgrid.Microgrid/CanStreamData": grpclib.const.Handler(
                self.__rpc_can_stream_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentIdParam,
                betterproto_lib_google_protobuf.BoolValue,
            ),
            "/frequenz.api.microgrid.Microgrid/AddExclusionBounds": grpclib.const.Handler(
                self.__rpc_add_exclusion_bounds,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetBoundsParam,
                betterproto_lib_google_protobuf.Timestamp,
            ),
            "/frequenz.api.microgrid.Microgrid/AddInclusionBounds": grpclib.const.Handler(
                self.__rpc_add_inclusion_bounds,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetBoundsParam,
                betterproto_lib_google_protobuf.Timestamp,
            ),
            "/frequenz.api.microgrid.Microgrid/SetPowerActive": grpclib.const.Handler(
                self.__rpc_set_power_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetPowerActiveParam,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/frequenz.api.microgrid.Microgrid/SetPowerReactive": grpclib.const.Handler(
                self.__rpc_set_power_reactive,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetPowerReactiveParam,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/frequenz.api.microgrid.Microgrid/Start": grpclib.const.Handler(
                self.__rpc_start,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentIdParam,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/frequenz.api.microgrid.Microgrid/HotStandby": grpclib.const.Handler(
                self.__rpc_hot_standby,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentIdParam,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/frequenz.api.microgrid.Microgrid/ColdStandby": grpclib.const.Handler(
                self.__rpc_cold_standby,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentIdParam,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/frequenz.api.microgrid.Microgrid/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentIdParam,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/frequenz.api.microgrid.Microgrid/ErrorAck": grpclib.const.Handler(
                self.__rpc_error_ack,
                grpclib.const.Cardinality.UNARY_UNARY,
                ComponentIdParam,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
