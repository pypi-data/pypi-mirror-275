# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: frequenz/api/microgrid/sensor.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ...common import components as __common_components__
from .. import common as _common__


class ComponentState(betterproto.Enum):
    """Enumerated sensor states."""

    COMPONENT_STATE_UNSPECIFIED = 0
    """Unspecified state."""

    COMPONENT_STATE_OK = 1
    """The sensor is behaving as expected."""

    COMPONENT_STATE_ERROR = 2
    """The sensor is in an error state."""


class ErrorCode(betterproto.Enum):
    """Enumerated sensor error codes."""

    ERROR_CODE_UNSPECIFIED = 0
    """Unspecified."""


class SensorMetric(betterproto.Enum):
    """The type of the metric reported in a sensor data sample."""

    SENSOR_METRIC_UNSPECIFIED = 0
    """Unspecified."""

    SENSOR_METRIC_TEMPERATURE = 1
    """Temperature. In Celsius (°C)."""

    SENSOR_METRIC_HUMIDITY = 2
    """Humidity In percentage (%)."""

    SENSOR_METRIC_PRESSURE = 3
    """Pressure In Pascal (Pa)."""

    SENSOR_METRIC_IRRADIANCE = 4
    """Irradiance / Radiation flux In watts per square meter (W / m^2)."""

    SENSOR_METRIC_VELOCITY = 5
    """Velocity In meters per second (m / s)."""

    SENSOR_METRIC_ACCELERATION = 6
    """Acceleration. In meters per second per second (m / s^2)"""

    SENSOR_METRIC_ANGLE = 7
    """
    Metric to represent angles, for metrics like direction. In angles with
    respect to the (magnetic) North (°).
    """

    SENSOR_METRIC_DEW_POINT = 8
    """
    Dew point. The temperature at which the air becomes saturated with water
    vapor. In Celsius (°C).
    """


@dataclass(eq=False, repr=False)
class Metadata(betterproto.Message):
    """The sensor metadata."""

    type: "__common_components__.SensorType" = betterproto.enum_field(1)
    """The sensor type."""


@dataclass(eq=False, repr=False)
class State(betterproto.Message):
    """State message."""

    component_state: "ComponentState" = betterproto.enum_field(1)
    """The state of the overall component."""


@dataclass(eq=False, repr=False)
class Error(betterproto.Message):
    """Error message."""

    code: "ErrorCode" = betterproto.enum_field(1)
    """The error code."""

    level: "_common__.ErrorLevel" = betterproto.enum_field(2)
    """The error severity level."""

    msg: str = betterproto.string_field(3)
    """The error message."""


@dataclass(eq=False, repr=False)
class SensorData(betterproto.Message):
    """A value of a single metric."""

    value: float = betterproto.float_field(1)
    """The metric value."""

    sensor_metric: "SensorMetric" = betterproto.enum_field(2)
    """The metric name."""


@dataclass(eq=False, repr=False)
class Data(betterproto.Message):
    """Sensor data."""

    sensor_data: List["SensorData"] = betterproto.message_field(1)
    """AC metrics of the inverter."""


@dataclass(eq=False, repr=False)
class Properties(betterproto.Message):
    """Sensor properties."""

    firmware_ver: str = betterproto.string_field(1)
    """The firmware version of the component."""


@dataclass(eq=False, repr=False)
class Sensor(betterproto.Message):
    """Sensor details"""

    properties: "Properties" = betterproto.message_field(1)
    """The component properties"""

    state: "State" = betterproto.message_field(2)
    """The sensor's state."""

    errors: List["Error"] = betterproto.message_field(3)
    """
    A list of errors encountered the component. An empty list implies no error.
    """

    data: "Data" = betterproto.message_field(4)
    """Sensor data object."""
