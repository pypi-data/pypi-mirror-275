# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: frequenz/api/microgrid/inverter.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ...common import (
    components as __common_components__,
    metrics as __common_metrics__,
)
from ...common.metrics import electrical as __common_metrics_electrical__
from .. import common as _common__


class Type(betterproto.Enum):
    """Enumerated inverter types."""

    TYPE_UNSPECIFIED = 0
    TYPE_BATTERY = 1
    TYPE_SOLAR = 2
    TYPE_HYBRID = 3


class ComponentState(betterproto.Enum):
    """Enumerated inverter states."""

    COMPONENT_STATE_UNSPECIFIED = 0
    """Default value."""

    COMPONENT_STATE_OFF = 1
    """Inverter is switched off."""

    COMPONENT_STATE_SWITCHING_ON = 2
    """
    The inverter is starting up and needs some time to become fully
    operational.
    """

    COMPONENT_STATE_SWITCHING_OFF = 3
    """
    The inverter is switching off and needs some time to fully shut down.
    """

    COMPONENT_STATE_STANDBY = 4
    """
    The inverter is in a standby state, and is disconnected from the grid. When
    connected to the grid, it run a few tests, and move to the `IDLE` state.
    """

    COMPONENT_STATE_IDLE = 5
    """The inverter is idle."""

    COMPONENT_STATE_CHARGING = 10
    """
    The inverter is consuming electrical energy to charge batteries. Applicable
    to `BATTERY` and `HYBRID` inverters only.
    """

    COMPONENT_STATE_DISCHARGING = 11
    """The inverter is generating electrical energy."""

    COMPONENT_STATE_ERROR = 14
    """The inverter is in a faulty state."""

    COMPONENT_STATE_UNAVAILABLE = 15
    """
    The inverter is online, but currently unavailable, possibly due to a pre-
    scheduled maintenance.
    """

    COMPONENT_STATE_UNKNOWN = 16
    """
    The state is provided by the device, but it can not be parsed as any of the
    above (known) states.
    """


class ErrorCode(betterproto.Enum):
    """Enumerated inverter error codes."""

    ERROR_CODE_UNSPECIFIED = 0
    """Unspecified."""


@dataclass(eq=False, repr=False)
class Metadata(betterproto.Message):
    """The inverter metadata."""

    type: "__common_components__.InverterType" = betterproto.enum_field(1)
    """The inverter type."""


@dataclass(eq=False, repr=False)
class State(betterproto.Message):
    """State message."""

    component_state: "ComponentState" = betterproto.enum_field(1)
    """The state of the overall component."""


@dataclass(eq=False, repr=False)
class Error(betterproto.Message):
    """Error message."""

    code: "ErrorCode" = betterproto.enum_field(1)
    """The error code."""

    level: "_common__.ErrorLevel" = betterproto.enum_field(2)
    """The error severity level."""

    msg: str = betterproto.string_field(3)
    """The error message."""


@dataclass(eq=False, repr=False)
class Data(betterproto.Message):
    """Inverter data."""

    dc_battery: "__common_metrics_electrical__.Dc" = betterproto.message_field(4)
    """
    DC metrics for the inverter-battery linkage. This is applicable to
    `BATTERY` and `HYBRID` inverters only.
    """

    dc_solar: "__common_metrics_electrical__.Dc" = betterproto.message_field(5)
    """
    DC metrics for the inverter-PV linkage. This is applicable to `SOLAR` and
    `HYBRID` inverters only.
    """

    ac: "__common_metrics_electrical__.Ac" = betterproto.message_field(2)
    """AC metrics of the inverter."""

    temperature: "__common_metrics__.Metric" = betterproto.message_field(3)
    """The verall temperature of the inverter. In degree Celsius (Â°C)."""


@dataclass(eq=False, repr=False)
class Properties(betterproto.Message):
    """Inverter properties."""

    firmware_ver: str = betterproto.string_field(1)
    """The firmware version of the component."""


@dataclass(eq=False, repr=False)
class Inverter(betterproto.Message):
    """Inverter message definition."""

    properties: "Properties" = betterproto.message_field(1)
    """The component properties"""

    state: "State" = betterproto.message_field(2)
    """The inverter's state."""

    errors: List["Error"] = betterproto.message_field(3)
    """
    A list of errors encountered the component. An empty list implies no error.
    """

    data: "Data" = betterproto.message_field(4)
    """An inverter data object."""
