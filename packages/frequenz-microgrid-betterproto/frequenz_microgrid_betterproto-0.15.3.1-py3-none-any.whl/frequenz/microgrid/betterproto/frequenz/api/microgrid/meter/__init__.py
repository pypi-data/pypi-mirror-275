# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: frequenz/api/microgrid/meter.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ...common.metrics import electrical as __common_metrics_electrical__
from .. import common as _common__


class Type(betterproto.Enum):
    """Enumerated meter types."""

    TYPE_UNSPECIFIED = 0
    TYPE_PRODUCTION = 1
    """AC production power meter / inverter production AC power (fallback)"""

    TYPE_CONSUMPTION = 2
    """Consumption meter"""

    TYPE_FEED_IN = 3
    """Exported to grid meter"""

    TYPE_PURCHASED = 4
    """Imported power from grid meter"""


class ComponentState(betterproto.Enum):
    """Enumerated meter states."""

    COMPONENT_STATE_UNSPECIFIED = 0
    """Unspecified state."""

    COMPONENT_STATE_OK = 1
    """The meter is behaving as expected."""

    COMPONENT_STATE_ERROR = 2
    """The meter is in an error state."""


class ErrorCode(betterproto.Enum):
    """Enumerated meter error codes."""

    ERROR_CODE_UNSPECIFIED = 0
    """Unspecified."""


@dataclass(eq=False, repr=False)
class Metadata(betterproto.Message):
    """The meter metadata."""

    type: "Type" = betterproto.enum_field(1)
    """The meter type."""


@dataclass(eq=False, repr=False)
class State(betterproto.Message):
    """State message."""

    component_state: "ComponentState" = betterproto.enum_field(1)
    """The state of the overall component."""


@dataclass(eq=False, repr=False)
class Error(betterproto.Message):
    """Error message."""

    code: "ErrorCode" = betterproto.enum_field(1)
    """The error code."""

    level: "_common__.ErrorLevel" = betterproto.enum_field(2)
    """The error severity level."""

    msg: str = betterproto.string_field(3)
    """The error message."""


@dataclass(eq=False, repr=False)
class Data(betterproto.Message):
    """Meter data."""

    ac: "__common_metrics_electrical__.Ac" = betterproto.message_field(1)
    """AC metrics of the inverter."""


@dataclass(eq=False, repr=False)
class Properties(betterproto.Message):
    """Meter properties."""

    firmware_ver: str = betterproto.string_field(1)
    """The firmware version of the component."""


@dataclass(eq=False, repr=False)
class Meter(betterproto.Message):
    """Meter details"""

    properties: "Properties" = betterproto.message_field(1)
    """The component properties"""

    state: "State" = betterproto.message_field(2)
    """The meter's state."""

    errors: List["Error"] = betterproto.message_field(3)
    """
    A list of errors encountered the component. An empty list implies no error.
    """

    data: "Data" = betterproto.message_field(4)
    """A meter data object."""
