# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class Section(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'elemental_id': 'str',
        'id': 'int',
        'name': 'str',
        'object_search': 'AttributeOperationSpec',
        'path': 'str',
        'project': 'int',
        'related_search': 'AttributeOperationSpec',
        'tator_user_sections': 'str',
        'visible': 'bool'
    }

    attribute_map = {
        'elemental_id': 'elemental_id',
        'id': 'id',
        'name': 'name',
        'object_search': 'object_search',
        'path': 'path',
        'project': 'project',
        'related_search': 'related_search',
        'tator_user_sections': 'tator_user_sections',
        'visible': 'visible'
    }

    def __init__(self, elemental_id=None, id=None, name=None, object_search=None, path=None, project=None, related_search=None, tator_user_sections=None, visible=None, local_vars_configuration=None):  # noqa: E501
        """Section - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._elemental_id = None
        self._id = None
        self._name = None
        self._object_search = None
        self._path = None
        self._project = None
        self._related_search = None
        self._tator_user_sections = None
        self._visible = None
        self.discriminator = None

        self.elemental_id = elemental_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if object_search is not None:
            self.object_search = object_search
        self.path = path
        if project is not None:
            self.project = project
        if related_search is not None:
            self.related_search = related_search
        if tator_user_sections is not None:
            self.tator_user_sections = tator_user_sections
        if visible is not None:
            self.visible = visible

    @property
    def elemental_id(self):
        """
        The elemental ID of the object.

        :return: The elemental_id of this Section. 
        :rtype: str
        """
        return self._elemental_id

    @elemental_id.setter
    def elemental_id(self, elemental_id):
        """
        The elemental ID of the object.

        :param elemental_id: The elemental_id of this Section.
        :type: str
        """

        self._elemental_id = elemental_id

    @property
    def id(self):
        """
        Unique integer identifying the section.

        :return: The id of this Section. 
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Unique integer identifying the section.

        :param id: The id of this Section.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Unique name of the section.

        :return: The name of this Section. 
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Unique name of the section.

        :param name: The name of this Section.
        :type: str
        """

        self._name = name

    @property
    def object_search(self):
        """

        :return: The object_search of this Section. 
        :rtype: AttributeOperationSpec
        """
        return self._object_search

    @object_search.setter
    def object_search(self, object_search):
        """

        :param object_search: The object_search of this Section.
        :type: AttributeOperationSpec
        """

        self._object_search = object_search

    @property
    def path(self):
        """
        A path to represent nested sections. If not supplied, defaults to `re.sub(r'[^A-Za-z0-9_-]',path)`

        :return: The path of this Section. 
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        A path to represent nested sections. If not supplied, defaults to `re.sub(r'[^A-Za-z0-9_-]',path)`

        :param path: The path of this Section.
        :type: str
        """

        self._path = path

    @property
    def project(self):
        """
        Unique integer identifying the project associated with the section.

        :return: The project of this Section. 
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Unique integer identifying the project associated with the section.

        :param project: The project of this Section.
        :type: int
        """

        self._project = project

    @property
    def related_search(self):
        """

        :return: The related_search of this Section. 
        :rtype: AttributeOperationSpec
        """
        return self._related_search

    @related_search.setter
    def related_search(self, related_search):
        """

        :param related_search: The related_search of this Section.
        :type: AttributeOperationSpec
        """

        self._related_search = related_search

    @property
    def tator_user_sections(self):
        """
        Attribute that is applied to media to identify membership to a section.

        :return: The tator_user_sections of this Section. 
        :rtype: str
        """
        return self._tator_user_sections

    @tator_user_sections.setter
    def tator_user_sections(self, tator_user_sections):
        """
        Attribute that is applied to media to identify membership to a section.

        :param tator_user_sections: The tator_user_sections of this Section.
        :type: str
        """

        self._tator_user_sections = tator_user_sections

    @property
    def visible(self):
        """
        Determines the visibility in the UI.

        :return: The visible of this Section. 
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Determines the visibility in the UI.

        :param visible: The visible of this Section.
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Section):
            return True

        return self.to_dict() != other.to_dict()
