{ "version": 3, "file": "py/std/temper_std/temporal.py", "sources": [ "std/temporal.temper.md" ], "sourcesContent": [ "# Temporal\n\nWe're creating an initial Date type to help with developing\nTemper's machinery to connect to existing Date types in\ntarget languages.\n\nSome facts about the Gregorian calendar.\n\n    /** Indexed by the month number: 1 = January */\n    let daysInMonth = [\n      0,\n      /* January   */ 31,\n      /* February  */ 28, // Special case leap days\n      /* March     */ 31,\n      /* April     */ 30,\n      /* May       */ 31,\n      /* June      */ 30,\n      /* July      */ 31,\n      /* August    */ 31,\n      /* September */ 30,\n      /* October   */ 31,\n      /* November  */ 30,\n      /* December  */ 31,\n    ];\n\n    let isLeapYear(year: Int): Boolean {\n       year % 4 == 0 \u0026\u0026 (year % 100 != 0 || year % 400 == 0)\n    }\n\n    /**\n     * If the decimal representation of \\|num\\| is longer than [padding],\n     * then that representation.\n     * Otherwise any sign for [num] followed by the prefix of [padding]\n     * that would bring the integer portion up to the length of [padding].\n     *\n     * ```temper\n     * pad(\u00220000\u0022, 123) == \u00220123\u0022) \u0026\u0026\n     * pad(\u0022000\u0022, 123) == \u0022123\u0022) \u0026\u0026\n     * pad(\u002200\u0022, 123) == \u0022123\u0022) \u0026\u0026\n     * pad(\u00220000\u0022, -123) == \u0022-0123\u0022) \u0026\u0026\n     * pad(\u0022000\u0022, -123) == \u0022-123\u0022) \u0026\u0026\n     * pad(\u002200\u0022, -123) == \u0022-123\u0022)\n     * ```\n     */\n    let pad(padding: String, num: Int): String {\n      let decimal = num.toString(10);\n      var decimalCodePoints = decimal.codePoints;\n      let sign: String;\n      if (decimalCodePoints.read() == 45 /* - */) {\n        sign = \u0022-\u0022;\n        decimalCodePoints = decimalCodePoints.advance(1);\n      } else {\n        sign = \u0022\u0022;\n      }\n      let paddingCp = padding.codePoints;\n      let nNeeded = paddingCp.length - decimalCodePoints.length;\n      if (nNeeded \u003c= 0) {\n        decimal\n      } else {\n        let pad = paddingCp.limit(nNeeded).toString();\n        let decimalOnly = decimalCodePoints.toString();\n        \u0022\u0024{sign}\u0024{pad}\u0024{decimalOnly}\u0022\n      }\n    }\n\n    // Relates months (one-indexed) to numbers used in day-of-week\n    // computations non-leapy.\n    let dayOfWeekLookupTableLeapy: List\u003cInt\u003e = [\n      0, // Not a month\n      0, 3, 4, 0, 2, 5, 0, 3, 6, 1, 4, 6,\n    ];\n    let dayOfWeekLookupTableNotLeapy: List\u003cInt\u003e = [\n      0, // Not a month\n      0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5,\n    ];\n\nHere's just enough of a Date type to get us started.\n\n    /**\n     * A Date identifies a day in the proleptic Gregorian calendar.\n     * It is unconnected to a time of day or a timezone.\n     */\n    @connected(\u0022Date\u0022)\n    export class Date {\n      /** The year.  1900 means 1900. */\n      @connected(\u0022Date::getYear\u0022)\n      public year: Int;\n      /** The month of the year in [1, 12]. */\n      @connected(\u0022Date::getMonth\u0022)\n      public month: Int;\n      /**\n       * The day of the month in [1, 31]\n       * additionally constrained by the length of [month].\n       */\n      @connected(\u0022Date::getDay\u0022)\n      public day: Int;\n\n      @connected(\u0022Date::constructor\u0022)\n      public constructor(year: Int, month: Int, day: Int): Void | Bubble {\n        if (1 \u003c= month \u0026\u0026 month \u003c= 12 \u0026\u0026\n            1 \u003c= day \u0026\u0026 (\n              (month != 2 || day != 29)\n              ? day \u003c= daysInMonth[month]\n              : isLeapYear(year))) {\n          this.year = year;\n          this.month = month;\n          this.day = day;\n        } else {\n          bubble();\n        }\n      }\n\n      /** An ISO 8601 Date string with dashes like \u00222000-12-31\u0022. */\n      @connected(\u0022Date::toString\u0022)\n      public toString(): String {\n         \u0022\u0024{pad(\u00220000\u0022, year)\n        }-\u0024{pad(\u002200\u0022,   month)\n        }-\u0024{pad(\u002200\u0022,   day)}\u0022\n      }\n\n      /**\n       * The count of whole years between the two dates.\n       *\n       * Think of this as floor of the magnitude of a range:\n       *\n       *     ⌊ [start, end] ⌋\n       *\n       * If you think of it as subtraction, you have to reverse\n       * the order of arguments.\n       *\n       *     ⌊ end - start ⌋, NOT ⌊ start - end ⌋\n       *\n       * \u0022Whole year\u0022 is based on month/day calculations, not\n       * day-of-year.  This means that there is one full year\n       * between 2020-03-01 and 2021-03-01 even though, because\n       * February of 2020 has 29 days, 2020-03-01 is the 61st\n       * day of 2020 but 2021-03-01 is only the 60th day of\n       * that year.\n       */\n      @connected(\u0022Date::yearsBetween\u0022)\n      public static let yearsBetween(start: Date, end: Date): Int {\n        let yearDelta = end.year - start.year;\n        let monthDelta = end.month - start.month;\n        yearDelta - (\n            // If the end month/day is before the start's then we\n            // don't have a full year.\n            (monthDelta \u003c 0 || monthDelta == 0 \u0026\u0026 end.day \u003c start.day)\n            ? 1 : 0)\n      }\n\n      /** Today's date in UTC */\n      // TODO: take a zone\n      @connected(\u0022Date::today\u0022)\n      public static let today(): Date;\n\n      /**\n       * ISO 8601 weekday number.\n       *\n       * | Number | Weekday  |\n       * | ------ | -------- |\n       * |      1 | Monday   |\n       * |      2 | Tuesday  |\n       * |      3 | Monday   |\n       * |      4 | Thursday |\n       * |      5 | Friday   |\n       * |      6 | Saturday |\n       * |      7 | Sunday   |\n       */\n      @connected(\u0022Date::getDayOfWeek\u0022)\n      public get dayOfWeek(): Int {\n        // Gauss's method.\n        let y = year;\n        let c = if (y \u003e= 0) { y / 100 } else { -(-y / 100) };\n        let yy = y - (c * 100);\n        // See note below about avoiding negative modulus to see why\n        // some of the offsets differ from Wikipedia's rendering of\n        // Gauss's formula.\n        let janFirst = (8 + 5*((yy + 3) % 4) + 3*(yy - 1) + 5*(c % 4)) % 7;\n        let table = if (isLeapYear(y)) {\n          dayOfWeekLookupTableLeapy\n        } else {\n          dayOfWeekLookupTableNotLeapy\n        };\n        let monthOffset = table[month];\n        // Gauss's method produces a number in 0..6 but\n        // ISO assigns 1..7 where all values are the same\n        // except that Sunday is 7 instead of 0.\n        // Below we do (day + 6) since that is equivalent to\n        // (day - 1) where we end up % 7 but avoids any chance\n        // of a negative left operand to `%`.\n        let gaussWeekday = (janFirst + (day + 6) + monthOffset) % 7;\n        gaussWeekday == 0 ? 7 : gaussWeekday\n      }\n    };\n\nTODO: an auto-balancing Date builder.\nParse from ISO\nOther temporal values\nDay of week\n" ], "names": [ "Sequence", "Any", "int", "bool", "str", "int_to_string", "int_to_string#1274", "string_code_points", "string_code_points#1257", "str_cat", "str_cat#1273", "daysInMonth", "isLeapYear", "year", "return", "t#168", "pad", "padding", "num", "t#228", "decimal", "t#224", "decimalCodePoints", "sign", "paddingCp", "nNeeded", "decimalOnly", "dayOfWeekLookupTableLeapy", "dayOfWeekLookupTableNotLeapy" ], "mappings": "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" }