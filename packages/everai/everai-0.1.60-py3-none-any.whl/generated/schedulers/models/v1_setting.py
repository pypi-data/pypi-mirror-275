# coding: utf-8

"""
    everai/scheduler/v1/register_message.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from pydantic import Field
from generated.schedulers.models.v1_autoscaling_policy import V1AutoscalingPolicy
from generated.schedulers.models.v1_resource_claim import V1ResourceClaim
from generated.schedulers.models.v1_setup_image import V1SetupImage
from generated.schedulers.models.v1_setup_secrets import V1SetupSecrets
from generated.schedulers.models.v1_setup_volumes import V1SetupVolumes
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1Setting(BaseModel):
    """
    V1Setting
    """
    resource_claim: Optional[V1ResourceClaim] = Field(default=None, alias="resourceClaim")
    auto_scaling_policy: Optional[V1AutoscalingPolicy] = Field(default=None, alias="autoScalingPolicy")
    setup_image: Optional[V1SetupImage] = Field(default=None, alias="setupImage")
    setup_volumes: Optional[V1SetupVolumes] = Field(default=None, alias="setupVolumes")
    setup_secrets: Optional[V1SetupSecrets] = Field(default=None, alias="setupSecrets")
    __properties: ClassVar[List[str]] = ["resourceClaim", "autoScalingPolicy", "setupImage", "setupVolumes", "setupSecrets"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1Setting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_claim
        if self.resource_claim:
            _dict['resourceClaim'] = self.resource_claim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_scaling_policy
        if self.auto_scaling_policy:
            _dict['autoScalingPolicy'] = self.auto_scaling_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of setup_image
        if self.setup_image:
            _dict['setupImage'] = self.setup_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of setup_volumes
        if self.setup_volumes:
            _dict['setupVolumes'] = self.setup_volumes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of setup_secrets
        if self.setup_secrets:
            _dict['setupSecrets'] = self.setup_secrets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of V1Setting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resourceClaim": V1ResourceClaim.from_dict(obj.get("resourceClaim")) if obj.get("resourceClaim") is not None else None,
            "autoScalingPolicy": V1AutoscalingPolicy.from_dict(obj.get("autoScalingPolicy")) if obj.get("autoScalingPolicy") is not None else None,
            "setupImage": V1SetupImage.from_dict(obj.get("setupImage")) if obj.get("setupImage") is not None else None,
            "setupVolumes": V1SetupVolumes.from_dict(obj.get("setupVolumes")) if obj.get("setupVolumes") is not None else None,
            "setupSecrets": V1SetupSecrets.from_dict(obj.get("setupSecrets")) if obj.get("setupSecrets") is not None else None
        })
        return _obj


