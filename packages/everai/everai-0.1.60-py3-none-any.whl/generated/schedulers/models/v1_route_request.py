# coding: utf-8

"""
    everai/scheduler/v1/comm/v1/messages.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from generated.schedulers.models.v1_header_entry import V1HeaderEntry
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1RouteRequest(BaseModel):
    """
    V1RouteRequest
    """
    request_id: StrictStr = Field(alias="requestId")
    app_id: StrictStr = Field(alias="appId")
    worker_id: StrictStr = Field(alias="workerId")
    method: StrictStr = Field(description="http method, for example: Get,Post,etc.")
    path: StrictStr
    headers: Optional[List[V1HeaderEntry]] = None
    body: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = None
    timeout_time: StrictInt = Field(alias="timeoutTime")
    max_retry_times: StrictInt = Field(alias="maxRetryTimes")
    __properties: ClassVar[List[str]] = ["requestId", "appId", "workerId", "method", "path", "headers", "body", "timeoutTime", "maxRetryTimes"]

    @field_validator('body')
    def body_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1RouteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item in self.headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of V1RouteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestId": obj.get("requestId"),
            "appId": obj.get("appId"),
            "workerId": obj.get("workerId"),
            "method": obj.get("method"),
            "path": obj.get("path"),
            "headers": [V1HeaderEntry.from_dict(_item) for _item in obj.get("headers")] if obj.get("headers") is not None else None,
            "body": obj.get("body"),
            "timeoutTime": obj.get("timeoutTime"),
            "maxRetryTimes": obj.get("maxRetryTimes")
        })
        return _obj


