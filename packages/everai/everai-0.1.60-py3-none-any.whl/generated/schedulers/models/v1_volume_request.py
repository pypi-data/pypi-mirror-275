# coding: utf-8

"""
    everai/scheduler/v1/comm/v1/messages.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from pydantic import Field
from generated.schedulers.models.v1_create_volume_request import V1CreateVolumeRequest
from generated.schedulers.models.v1_delete_volume_request import V1DeleteVolumeRequest
from generated.schedulers.models.v1_get_volume_request import V1GetVolumeRequest
from generated.schedulers.models.v1_list_volume_request import V1ListVolumeRequest
from generated.schedulers.models.v1_sync_volume_request import V1SyncVolumeRequest
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1VolumeRequest(BaseModel):
    """
    V1VolumeRequest
    """
    create_volume_request: Optional[V1CreateVolumeRequest] = Field(default=None, alias="createVolumeRequest")
    get_volume_request: Optional[V1GetVolumeRequest] = Field(default=None, alias="getVolumeRequest")
    sync_volume_request: Optional[V1SyncVolumeRequest] = Field(default=None, alias="syncVolumeRequest")
    list_volume_request: Optional[V1ListVolumeRequest] = Field(default=None, alias="listVolumeRequest")
    delete_volume_request: Optional[V1DeleteVolumeRequest] = Field(default=None, alias="deleteVolumeRequest")
    __properties: ClassVar[List[str]] = ["createVolumeRequest", "getVolumeRequest", "syncVolumeRequest", "listVolumeRequest", "deleteVolumeRequest"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1VolumeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_volume_request
        if self.create_volume_request:
            _dict['createVolumeRequest'] = self.create_volume_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of get_volume_request
        if self.get_volume_request:
            _dict['getVolumeRequest'] = self.get_volume_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sync_volume_request
        if self.sync_volume_request:
            _dict['syncVolumeRequest'] = self.sync_volume_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_volume_request
        if self.list_volume_request:
            _dict['listVolumeRequest'] = self.list_volume_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_volume_request
        if self.delete_volume_request:
            _dict['deleteVolumeRequest'] = self.delete_volume_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of V1VolumeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createVolumeRequest": V1CreateVolumeRequest.from_dict(obj.get("createVolumeRequest")) if obj.get("createVolumeRequest") is not None else None,
            "getVolumeRequest": V1GetVolumeRequest.from_dict(obj.get("getVolumeRequest")) if obj.get("getVolumeRequest") is not None else None,
            "syncVolumeRequest": V1SyncVolumeRequest.from_dict(obj.get("syncVolumeRequest")) if obj.get("syncVolumeRequest") is not None else None,
            "listVolumeRequest": V1ListVolumeRequest.from_dict(obj.get("listVolumeRequest")) if obj.get("listVolumeRequest") is not None else None,
            "deleteVolumeRequest": V1DeleteVolumeRequest.from_dict(obj.get("deleteVolumeRequest")) if obj.get("deleteVolumeRequest") is not None else None
        })
        return _obj


