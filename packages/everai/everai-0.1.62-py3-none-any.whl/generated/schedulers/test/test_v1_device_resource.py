# coding: utf-8

"""
    everai/scheduler/v1/register_message.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from generated.schedulers.models.v1_device_resource import V1DeviceResource  # noqa: E501

class TestV1DeviceResource(unittest.TestCase):
    """V1DeviceResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DeviceResource:
        """Test V1DeviceResource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DeviceResource`
        """
        model = V1DeviceResource()  # noqa: E501
        if include_optional:
            return V1DeviceResource(
                device_id = '',
                cpu = generated.schedulers.models.schedulerv1_cpu.schedulerv1CPU(
                    model = '', 
                    cores = 56, 
                    threads = 56, 
                    architecture = '', 
                    cpu_num = 56, ),
                memory = generated.schedulers.models.v1_storage_size.v1StorageSize(
                    size = '', 
                    unit = '', ),
                gpu = generated.schedulers.models.schedulerv1_gpu.schedulerv1GPU(
                    model = '', 
                    driver_version = '', 
                    cuda_version = '', 
                    memory = generated.schedulers.models.v1_storage_size.v1StorageSize(
                        size = '', 
                        unit = '', ), 
                    power = '', 
                    gpu_num = 56, ),
                filesystems = [
                    generated.schedulers.models.v1_filesystem.v1Filesystem(
                        device = '', 
                        mount_point = '', 
                        size = generated.schedulers.models.v1_storage_size.v1StorageSize(
                            unit = '', ), 
                        type = '', 
                        bootable = True, 
                        media_type = '', )
                    ],
                bandwidth = generated.schedulers.models.v1_bandwidth.v1Bandwidth(
                    incoming = generated.schedulers.models.v1_bandwidth_size.v1BandwidthSize(
                        size = '', 
                        unit = '', ), 
                    outgoing = generated.schedulers.models.v1_bandwidth_size.v1BandwidthSize(
                        size = '', 
                        unit = '', ), ),
                timezone = '',
                public_address = ''
            )
        else:
            return V1DeviceResource(
                cpu = generated.schedulers.models.schedulerv1_cpu.schedulerv1CPU(
                    model = '', 
                    cores = 56, 
                    threads = 56, 
                    architecture = '', 
                    cpu_num = 56, ),
                memory = generated.schedulers.models.v1_storage_size.v1StorageSize(
                    size = '', 
                    unit = '', ),
                gpu = generated.schedulers.models.schedulerv1_gpu.schedulerv1GPU(
                    model = '', 
                    driver_version = '', 
                    cuda_version = '', 
                    memory = generated.schedulers.models.v1_storage_size.v1StorageSize(
                        size = '', 
                        unit = '', ), 
                    power = '', 
                    gpu_num = 56, ),
                filesystems = [
                    generated.schedulers.models.v1_filesystem.v1Filesystem(
                        device = '', 
                        mount_point = '', 
                        size = generated.schedulers.models.v1_storage_size.v1StorageSize(
                            unit = '', ), 
                        type = '', 
                        bootable = True, 
                        media_type = '', )
                    ],
                timezone = '',
        )
        """

    def testV1DeviceResource(self):
        """Test V1DeviceResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
