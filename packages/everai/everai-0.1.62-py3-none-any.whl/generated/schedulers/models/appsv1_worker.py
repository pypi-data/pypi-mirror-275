# coding: utf-8

"""
    everai/scheduler/v1/comm/v1/messages.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from generated.schedulers.models.v1_worker_worker_status import V1WorkerWorkerStatus
from generated.schedulers.models.worker_worker_detail_status import WorkerWorkerDetailStatus
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Appsv1Worker(BaseModel):
    """
    Appsv1Worker
    """
    id: Optional[StrictStr] = None
    device_id: Optional[StrictStr] = Field(default=None, alias="deviceId")
    status: Optional[V1WorkerWorkerStatus] = None
    detail_status: Optional[WorkerWorkerDetailStatus] = Field(default=None, alias="detailStatus")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    launch_at: Optional[datetime] = Field(default=None, alias="launchAt")
    last_serve_at: Optional[datetime] = Field(default=None, alias="lastServeAt")
    success_count: Optional[StrictInt] = Field(default=None, alias="successCount")
    failed_count: Optional[StrictInt] = Field(default=None, alias="failedCount")
    session_number: Optional[StrictInt] = Field(default=None, alias="sessionNumber")
    __properties: ClassVar[List[str]] = ["id", "deviceId", "status", "detailStatus", "createdAt", "deletedAt", "launchAt", "lastServeAt", "successCount", "failedCount", "sessionNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Appsv1Worker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of Appsv1Worker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "deviceId": obj.get("deviceId"),
            "status": obj.get("status"),
            "detailStatus": obj.get("detailStatus"),
            "createdAt": obj.get("createdAt"),
            "deletedAt": obj.get("deletedAt"),
            "launchAt": obj.get("launchAt"),
            "lastServeAt": obj.get("lastServeAt"),
            "successCount": obj.get("successCount"),
            "failedCount": obj.get("failedCount"),
            "sessionNumber": obj.get("sessionNumber")
        })
        return _obj


