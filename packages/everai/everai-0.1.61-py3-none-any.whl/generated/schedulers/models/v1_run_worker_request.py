# coding: utf-8

"""
    everai/scheduler/v1/comm/v1/messages.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from generated.schedulers.models.v1_resources import V1Resources
from generated.schedulers.models.v1_volume_mount import V1VolumeMount
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1RunWorkerRequest(BaseModel):
    """
    V1RunWorkerRequest
    """
    request_id: Optional[StrictStr] = Field(default=None, alias="requestId")
    id: StrictStr
    user_id: StrictStr = Field(alias="userId")
    app_id: StrictStr = Field(description="app_id is used to mark which user the worker belongs to.", alias="appId")
    repository: StrictStr
    volume_mounts: Optional[List[V1VolumeMount]] = Field(default=None, alias="volumeMounts")
    environments: Optional[Dict[str, StrictStr]] = None
    work_port: StrictInt = Field(alias="workPort")
    resources: Optional[V1Resources] = None
    __properties: ClassVar[List[str]] = ["requestId", "id", "userId", "appId", "repository", "volumeMounts", "environments", "workPort", "resources"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1RunWorkerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in volume_mounts (list)
        _items = []
        if self.volume_mounts:
            for _item in self.volume_mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumeMounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of V1RunWorkerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestId": obj.get("requestId"),
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "appId": obj.get("appId"),
            "repository": obj.get("repository"),
            "volumeMounts": [V1VolumeMount.from_dict(_item) for _item in obj.get("volumeMounts")] if obj.get("volumeMounts") is not None else None,
            "environments": obj.get("environments"),
            "workPort": obj.get("workPort"),
            "resources": V1Resources.from_dict(obj.get("resources")) if obj.get("resources") is not None else None
        })
        return _obj


