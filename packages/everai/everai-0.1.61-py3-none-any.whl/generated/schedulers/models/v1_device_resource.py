# coding: utf-8

"""
    everai/scheduler/v1/comm/v1/messages.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from generated.schedulers.models.v1_bandwidth import V1Bandwidth
from generated.schedulers.models.v1_cpu import V1CPU
from generated.schedulers.models.v1_filesystem import V1Filesystem
from generated.schedulers.models.v1_gpu import V1GPU
from generated.schedulers.models.v1_storage_size import V1StorageSize
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1DeviceResource(BaseModel):
    """
    V1DeviceResource
    """
    device_id: Optional[StrictStr] = Field(default=None, alias="deviceId")
    cpu: V1CPU
    memory: V1StorageSize
    gpu: Optional[V1GPU] = None
    filesystems: Optional[List[V1Filesystem]] = None
    bandwidth: Optional[V1Bandwidth] = None
    timezone: Optional[StrictStr] = None
    public_address: Optional[StrictStr] = Field(default=None, alias="publicAddress")
    __properties: ClassVar[List[str]] = ["deviceId", "cpu", "memory", "gpu", "filesystems", "bandwidth", "timezone", "publicAddress"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1DeviceResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict['memory'] = self.memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gpu
        if self.gpu:
            _dict['gpu'] = self.gpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filesystems (list)
        _items = []
        if self.filesystems:
            for _item in self.filesystems:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filesystems'] = _items
        # override the default output from pydantic by calling `to_dict()` of bandwidth
        if self.bandwidth:
            _dict['bandwidth'] = self.bandwidth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of V1DeviceResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceId": obj.get("deviceId"),
            "cpu": V1CPU.from_dict(obj.get("cpu")) if obj.get("cpu") is not None else None,
            "memory": V1StorageSize.from_dict(obj.get("memory")) if obj.get("memory") is not None else None,
            "gpu": V1GPU.from_dict(obj.get("gpu")) if obj.get("gpu") is not None else None,
            "filesystems": [V1Filesystem.from_dict(_item) for _item in obj.get("filesystems")] if obj.get("filesystems") is not None else None,
            "bandwidth": V1Bandwidth.from_dict(obj.get("bandwidth")) if obj.get("bandwidth") is not None else None,
            "timezone": obj.get("timezone"),
            "publicAddress": obj.get("publicAddress")
        })
        return _obj


