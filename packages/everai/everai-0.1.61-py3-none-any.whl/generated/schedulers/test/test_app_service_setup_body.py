# coding: utf-8

"""
    everai/scheduler/v1/register_message.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from generated.schedulers.models.app_service_setup_body import AppServiceSetupBody  # noqa: E501

class TestAppServiceSetupBody(unittest.TestCase):
    """AppServiceSetupBody unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppServiceSetupBody:
        """Test AppServiceSetupBody
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppServiceSetupBody`
        """
        model = AppServiceSetupBody()  # noqa: E501
        if include_optional:
            return AppServiceSetupBody(
                settings = [
                    generated.schedulers.models.v1_setting.v1Setting(
                        resource_claim = generated.schedulers.models.v1_resource_claim.v1ResourceClaim(
                            cpu = generated.schedulers.models.appsv1_cpu.appsv1CPU(
                                cores = 56, 
                                architecture = '', ), 
                            gpu = generated.schedulers.models.appsv1_gpu.appsv1GPU(
                                model = '', 
                                number = '', 
                                required_driver_version = '', 
                                required_cuda_version = '', ), 
                            memory = generated.schedulers.models.v1_storage_size.v1StorageSize(
                                size = '', 
                                unit = '', ), 
                            disk = generated.schedulers.models.v1_storage_size.v1StorageSize(
                                size = '', 
                                unit = '', ), ), 
                        router_node = generated.schedulers.models.v1_autoscaling_policy.v1AutoscalingPolicy(
                            build_in_policy = generated.schedulers.models.v1_build_in_policy.v1BuildInPolicy(
                                min_workers = 56, 
                                max_workers = 56, ), 
                            custom_policy = generated.schedulers.models.v1_custom_policy.v1CustomPolicy(
                                rules = [
                                    generated.schedulers.models.v1_rule.v1Rule(
                                        factor = [
                                            ''
                                            ], 
                                        behavior = 'HOLD_ON', 
                                        custom_func = {
                                            'key' : None
                                            }, )
                                    ], ), ), 
                        setup_image = generated.schedulers.models.v1_setup_image.v1SetupImage(
                            repository = '', 
                            tag = '', 
                            digest = '', 
                            listen_port = 56, 
                            basic_auth = generated.schedulers.models.v1_basic_auth.v1BasicAuth(
                                username = '', 
                                password = '', ), ), 
                        setup_volumes = generated.schedulers.models.v1_setup_volumes.v1SetupVolumes(
                            volumes = [
                                generated.schedulers.models.v1_setup_volumes_volume.v1SetupVolumesVolume(
                                    volume_name = '', 
                                    mount_path = '', 
                                    mode = '', )
                                ], ), 
                        setup_secrets = generated.schedulers.models.v1_setup_secrets.v1SetupSecrets(
                            secret_names = [
                                ''
                                ], ), )
                    ]
            )
        else:
            return AppServiceSetupBody(
                settings = [
                    generated.schedulers.models.v1_setting.v1Setting(
                        resource_claim = generated.schedulers.models.v1_resource_claim.v1ResourceClaim(
                            cpu = generated.schedulers.models.appsv1_cpu.appsv1CPU(
                                cores = 56, 
                                architecture = '', ), 
                            gpu = generated.schedulers.models.appsv1_gpu.appsv1GPU(
                                model = '', 
                                number = '', 
                                required_driver_version = '', 
                                required_cuda_version = '', ), 
                            memory = generated.schedulers.models.v1_storage_size.v1StorageSize(
                                size = '', 
                                unit = '', ), 
                            disk = generated.schedulers.models.v1_storage_size.v1StorageSize(
                                size = '', 
                                unit = '', ), ), 
                        router_node = generated.schedulers.models.v1_autoscaling_policy.v1AutoscalingPolicy(
                            build_in_policy = generated.schedulers.models.v1_build_in_policy.v1BuildInPolicy(
                                min_workers = 56, 
                                max_workers = 56, ), 
                            custom_policy = generated.schedulers.models.v1_custom_policy.v1CustomPolicy(
                                rules = [
                                    generated.schedulers.models.v1_rule.v1Rule(
                                        factor = [
                                            ''
                                            ], 
                                        behavior = 'HOLD_ON', 
                                        custom_func = {
                                            'key' : None
                                            }, )
                                    ], ), ), 
                        setup_image = generated.schedulers.models.v1_setup_image.v1SetupImage(
                            repository = '', 
                            tag = '', 
                            digest = '', 
                            listen_port = 56, 
                            basic_auth = generated.schedulers.models.v1_basic_auth.v1BasicAuth(
                                username = '', 
                                password = '', ), ), 
                        setup_volumes = generated.schedulers.models.v1_setup_volumes.v1SetupVolumes(
                            volumes = [
                                generated.schedulers.models.v1_setup_volumes_volume.v1SetupVolumesVolume(
                                    volume_name = '', 
                                    mount_path = '', 
                                    mode = '', )
                                ], ), 
                        setup_secrets = generated.schedulers.models.v1_setup_secrets.v1SetupSecrets(
                            secret_names = [
                                ''
                                ], ), )
                    ],
        )
        """

    def testAppServiceSetupBody(self):
        """Test AppServiceSetupBody"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
