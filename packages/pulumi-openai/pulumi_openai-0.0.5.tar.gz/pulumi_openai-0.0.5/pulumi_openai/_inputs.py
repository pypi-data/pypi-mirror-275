# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AssistantToolArgs',
    'AssistantToolFunctionArgs',
    'AssistantToolResourcesArgs',
    'AssistantToolResourcesCodeInterpreterArgs',
    'AssistantToolResourcesFileSearchArgs',
    'AssistantToolResourcesFileSearchVectorStoresArgs',
    'FinetuningJobHyperparamsArgs',
]

@pulumi.input_type
class AssistantToolArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 function: Optional[pulumi.Input['AssistantToolFunctionArgs']] = None):
        """
        :param pulumi.Input[str] type: Tools can be of types code_interpreter, retrieval, or function.
        :param pulumi.Input['AssistantToolFunctionArgs'] function: Function definition for tools of type function.
        """
        pulumi.set(__self__, "type", type)
        if function is not None:
            pulumi.set(__self__, "function", function)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Tools can be of types code_interpreter, retrieval, or function.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input['AssistantToolFunctionArgs']]:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input['AssistantToolFunctionArgs']]):
        pulumi.set(self, "function", value)


@pulumi.input_type
class AssistantToolFunctionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameters: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        :param pulumi.Input[str] parameters: The parameters the functions accepts, described as a JSON Schema object.
        :param pulumi.Input[str] description: A description of what the function does, used by the model to choose when and how to call the function.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[str]:
        """
        The parameters the functions accepts, described as a JSON Schema object.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of what the function does, used by the model to choose when and how to call the function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class AssistantToolResourcesArgs:
    def __init__(__self__, *,
                 code_interpreter: Optional[pulumi.Input['AssistantToolResourcesCodeInterpreterArgs']] = None,
                 file_search: Optional[pulumi.Input['AssistantToolResourcesFileSearchArgs']] = None):
        """
        :param pulumi.Input['AssistantToolResourcesCodeInterpreterArgs'] code_interpreter: Function definition for tools of type function.
        :param pulumi.Input['AssistantToolResourcesFileSearchArgs'] file_search: Function definition for tools of type function.
        """
        if code_interpreter is not None:
            pulumi.set(__self__, "code_interpreter", code_interpreter)
        if file_search is not None:
            pulumi.set(__self__, "file_search", file_search)

    @property
    @pulumi.getter(name="codeInterpreter")
    def code_interpreter(self) -> Optional[pulumi.Input['AssistantToolResourcesCodeInterpreterArgs']]:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "code_interpreter")

    @code_interpreter.setter
    def code_interpreter(self, value: Optional[pulumi.Input['AssistantToolResourcesCodeInterpreterArgs']]):
        pulumi.set(self, "code_interpreter", value)

    @property
    @pulumi.getter(name="fileSearch")
    def file_search(self) -> Optional[pulumi.Input['AssistantToolResourcesFileSearchArgs']]:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "file_search")

    @file_search.setter
    def file_search(self, value: Optional[pulumi.Input['AssistantToolResourcesFileSearchArgs']]):
        pulumi.set(self, "file_search", value)


@pulumi.input_type
class AssistantToolResourcesCodeInterpreterArgs:
    def __init__(__self__, *,
                 file_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_ids: A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        if file_ids is not None:
            pulumi.set(__self__, "file_ids", file_ids)

    @property
    @pulumi.getter(name="fileIds")
    def file_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        return pulumi.get(self, "file_ids")

    @file_ids.setter
    def file_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_ids", value)


@pulumi.input_type
class AssistantToolResourcesFileSearchArgs:
    def __init__(__self__, *,
                 vector_store_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vector_stores: Optional[pulumi.Input['AssistantToolResourcesFileSearchVectorStoresArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vector_store_ids: A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        :param pulumi.Input['AssistantToolResourcesFileSearchVectorStoresArgs'] vector_stores: Function definition for tools of type function.
        """
        if vector_store_ids is not None:
            pulumi.set(__self__, "vector_store_ids", vector_store_ids)
        if vector_stores is not None:
            pulumi.set(__self__, "vector_stores", vector_stores)

    @property
    @pulumi.getter(name="vectorStoreIds")
    def vector_store_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        return pulumi.get(self, "vector_store_ids")

    @vector_store_ids.setter
    def vector_store_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vector_store_ids", value)

    @property
    @pulumi.getter(name="vectorStores")
    def vector_stores(self) -> Optional[pulumi.Input['AssistantToolResourcesFileSearchVectorStoresArgs']]:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "vector_stores")

    @vector_stores.setter
    def vector_stores(self, value: Optional[pulumi.Input['AssistantToolResourcesFileSearchVectorStoresArgs']]):
        pulumi.set(self, "vector_stores", value)


@pulumi.input_type
class AssistantToolResourcesFileSearchVectorStoresArgs:
    def __init__(__self__, *,
                 file_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_ids: A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        if file_ids is not None:
            pulumi.set(__self__, "file_ids", file_ids)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="fileIds")
    def file_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        return pulumi.get(self, "file_ids")

    @file_ids.setter
    def file_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_ids", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class FinetuningJobHyperparamsArgs:
    def __init__(__self__, *,
                 n_epochs: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] n_epochs: N Epochs
        """
        if n_epochs is not None:
            pulumi.set(__self__, "n_epochs", n_epochs)

    @property
    @pulumi.getter(name="nEpochs")
    def n_epochs(self) -> Optional[pulumi.Input[int]]:
        """
        N Epochs
        """
        return pulumi.get(self, "n_epochs")

    @n_epochs.setter
    def n_epochs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "n_epochs", value)


