# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AssistantTool',
    'AssistantToolFunction',
    'AssistantToolResources',
    'AssistantToolResourcesCodeInterpreter',
    'AssistantToolResourcesFileSearch',
    'AssistantToolResourcesFileSearchVectorStores',
    'FinetuningJobHyperparams',
    'GetFilesFileResult',
    'GetFinetuningJobHyperparamsResult',
    'GetFinetuningJobsJobResult',
    'GetFinetuningJobsJobHyperparamsResult',
    'GetModelPermissionResult',
    'GetModelsModelResult',
    'GetModelsModelPermissionResult',
]

@pulumi.output_type
class AssistantTool(dict):
    def __init__(__self__, *,
                 type: str,
                 function: Optional['outputs.AssistantToolFunction'] = None):
        """
        :param str type: Tools can be of types code_interpreter, retrieval, or function.
        :param 'AssistantToolFunctionArgs' function: Function definition for tools of type function.
        """
        pulumi.set(__self__, "type", type)
        if function is not None:
            pulumi.set(__self__, "function", function)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Tools can be of types code_interpreter, retrieval, or function.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def function(self) -> Optional['outputs.AssistantToolFunction']:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "function")


@pulumi.output_type
class AssistantToolFunction(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: str,
                 description: Optional[str] = None):
        """
        :param str name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        :param str parameters: The parameters the functions accepts, described as a JSON Schema object.
        :param str description: A description of what the function does, used by the model to choose when and how to call the function.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> str:
        """
        The parameters the functions accepts, described as a JSON Schema object.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of what the function does, used by the model to choose when and how to call the function.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class AssistantToolResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeInterpreter":
            suggest = "code_interpreter"
        elif key == "fileSearch":
            suggest = "file_search"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssistantToolResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssistantToolResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssistantToolResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_interpreter: Optional['outputs.AssistantToolResourcesCodeInterpreter'] = None,
                 file_search: Optional['outputs.AssistantToolResourcesFileSearch'] = None):
        """
        :param 'AssistantToolResourcesCodeInterpreterArgs' code_interpreter: Function definition for tools of type function.
        :param 'AssistantToolResourcesFileSearchArgs' file_search: Function definition for tools of type function.
        """
        if code_interpreter is not None:
            pulumi.set(__self__, "code_interpreter", code_interpreter)
        if file_search is not None:
            pulumi.set(__self__, "file_search", file_search)

    @property
    @pulumi.getter(name="codeInterpreter")
    def code_interpreter(self) -> Optional['outputs.AssistantToolResourcesCodeInterpreter']:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "code_interpreter")

    @property
    @pulumi.getter(name="fileSearch")
    def file_search(self) -> Optional['outputs.AssistantToolResourcesFileSearch']:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "file_search")


@pulumi.output_type
class AssistantToolResourcesCodeInterpreter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileIds":
            suggest = "file_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssistantToolResourcesCodeInterpreter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssistantToolResourcesCodeInterpreter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssistantToolResourcesCodeInterpreter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] file_ids: A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        if file_ids is not None:
            pulumi.set(__self__, "file_ids", file_ids)

    @property
    @pulumi.getter(name="fileIds")
    def file_ids(self) -> Optional[Sequence[str]]:
        """
        A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        return pulumi.get(self, "file_ids")


@pulumi.output_type
class AssistantToolResourcesFileSearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vectorStoreIds":
            suggest = "vector_store_ids"
        elif key == "vectorStores":
            suggest = "vector_stores"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssistantToolResourcesFileSearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssistantToolResourcesFileSearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssistantToolResourcesFileSearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vector_store_ids: Optional[Sequence[str]] = None,
                 vector_stores: Optional['outputs.AssistantToolResourcesFileSearchVectorStores'] = None):
        """
        :param Sequence[str] vector_store_ids: A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        :param 'AssistantToolResourcesFileSearchVectorStoresArgs' vector_stores: Function definition for tools of type function.
        """
        if vector_store_ids is not None:
            pulumi.set(__self__, "vector_store_ids", vector_store_ids)
        if vector_stores is not None:
            pulumi.set(__self__, "vector_stores", vector_stores)

    @property
    @pulumi.getter(name="vectorStoreIds")
    def vector_store_ids(self) -> Optional[Sequence[str]]:
        """
        A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        return pulumi.get(self, "vector_store_ids")

    @property
    @pulumi.getter(name="vectorStores")
    def vector_stores(self) -> Optional['outputs.AssistantToolResourcesFileSearchVectorStores']:
        """
        Function definition for tools of type function.
        """
        return pulumi.get(self, "vector_stores")


@pulumi.output_type
class AssistantToolResourcesFileSearchVectorStores(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileIds":
            suggest = "file_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssistantToolResourcesFileSearchVectorStores. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssistantToolResourcesFileSearchVectorStores.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssistantToolResourcesFileSearchVectorStores.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_ids: Optional[Sequence[str]] = None,
                 metadata: Optional[Mapping[str, str]] = None):
        """
        :param Sequence[str] file_ids: A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        :param Mapping[str, str] metadata: Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        if file_ids is not None:
            pulumi.set(__self__, "file_ids", file_ids)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="fileIds")
    def file_ids(self) -> Optional[Sequence[str]]:
        """
        A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
        """
        return pulumi.get(self, "file_ids")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        return pulumi.get(self, "metadata")


@pulumi.output_type
class FinetuningJobHyperparams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nEpochs":
            suggest = "n_epochs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FinetuningJobHyperparams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FinetuningJobHyperparams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FinetuningJobHyperparams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 n_epochs: Optional[int] = None):
        """
        :param int n_epochs: N Epochs
        """
        if n_epochs is not None:
            pulumi.set(__self__, "n_epochs", n_epochs)

    @property
    @pulumi.getter(name="nEpochs")
    def n_epochs(self) -> Optional[int]:
        """
        N Epochs
        """
        return pulumi.get(self, "n_epochs")


@pulumi.output_type
class GetFilesFileResult(dict):
    def __init__(__self__, *,
                 bytes: int,
                 created: int,
                 filename: str,
                 filepath: str,
                 id: str,
                 object: str,
                 purpose: str):
        """
        :param int bytes: File size in bytes
        :param int created: Created Time
        :param str filename: Filename
        :param str filepath: Filepath
        :param str id: File Identifier
        :param str object: Object Type
        :param str purpose: Intended use of file. Use 'fine-tune' for Fine-tuning
        """
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "filepath", filepath)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "purpose", purpose)

    @property
    @pulumi.getter
    def bytes(self) -> int:
        """
        File size in bytes
        """
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def created(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Filename
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def filepath(self) -> str:
        """
        Filepath
        """
        return pulumi.get(self, "filepath")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        File Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def purpose(self) -> str:
        """
        Intended use of file. Use 'fine-tune' for Fine-tuning
        """
        return pulumi.get(self, "purpose")


@pulumi.output_type
class GetFinetuningJobHyperparamsResult(dict):
    def __init__(__self__, *,
                 n_epochs: int):
        """
        :param int n_epochs: N Epochs
        """
        pulumi.set(__self__, "n_epochs", n_epochs)

    @property
    @pulumi.getter(name="nEpochs")
    def n_epochs(self) -> int:
        """
        N Epochs
        """
        return pulumi.get(self, "n_epochs")


@pulumi.output_type
class GetFinetuningJobsJobResult(dict):
    def __init__(__self__, *,
                 created_at: int,
                 fine_tuned_model: str,
                 finished_at: int,
                 hyperparams: 'outputs.GetFinetuningJobsJobHyperparamsResult',
                 id: str,
                 model: str,
                 object: str,
                 organization_id: str,
                 result_files: Sequence[str],
                 status: str,
                 trained_tokens: int,
                 training_file: str,
                 validation_file: str):
        """
        :param int created_at: Created Time
        :param str fine_tuned_model: Fine-Tuned Model ID
        :param int finished_at: Finished Time
        :param 'GetFinetuningJobsJobHyperparamsArgs' hyperparams: Hyperparams
        :param str id: Fine-Tuning Job Identifier
        :param str model: Model ID
        :param str object: Object Type
        :param str organization_id: Organization ID
        :param Sequence[str] result_files: Result Files
        :param str status: Status
        :param int trained_tokens: Trained Tokens
        :param str training_file: Training File
        :param str validation_file: Validation File
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "fine_tuned_model", fine_tuned_model)
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "hyperparams", hyperparams)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "result_files", result_files)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trained_tokens", trained_tokens)
        pulumi.set(__self__, "training_file", training_file)
        pulumi.set(__self__, "validation_file", validation_file)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="fineTunedModel")
    def fine_tuned_model(self) -> str:
        """
        Fine-Tuned Model ID
        """
        return pulumi.get(self, "fine_tuned_model")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> int:
        """
        Finished Time
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def hyperparams(self) -> 'outputs.GetFinetuningJobsJobHyperparamsResult':
        """
        Hyperparams
        """
        return pulumi.get(self, "hyperparams")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fine-Tuning Job Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model ID
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Organization ID
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="resultFiles")
    def result_files(self) -> Sequence[str]:
        """
        Result Files
        """
        return pulumi.get(self, "result_files")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trainedTokens")
    def trained_tokens(self) -> int:
        """
        Trained Tokens
        """
        return pulumi.get(self, "trained_tokens")

    @property
    @pulumi.getter(name="trainingFile")
    def training_file(self) -> str:
        """
        Training File
        """
        return pulumi.get(self, "training_file")

    @property
    @pulumi.getter(name="validationFile")
    def validation_file(self) -> str:
        """
        Validation File
        """
        return pulumi.get(self, "validation_file")


@pulumi.output_type
class GetFinetuningJobsJobHyperparamsResult(dict):
    def __init__(__self__, *,
                 n_epochs: int):
        """
        :param int n_epochs: N Epochs
        """
        pulumi.set(__self__, "n_epochs", n_epochs)

    @property
    @pulumi.getter(name="nEpochs")
    def n_epochs(self) -> int:
        """
        N Epochs
        """
        return pulumi.get(self, "n_epochs")


@pulumi.output_type
class GetModelPermissionResult(dict):
    def __init__(__self__, *,
                 allow_create_engine: bool,
                 allow_fine_tuning: bool,
                 allow_logprobs: bool,
                 allow_sampling: bool,
                 allow_search_indices: bool,
                 allow_view: bool,
                 created: int,
                 id: str,
                 is_blocking: bool,
                 object: str,
                 organization: str):
        """
        :param bool allow_create_engine: Allow Create Engine
        :param bool allow_fine_tuning: Allow Fine Tuning
        :param bool allow_logprobs: Allow Logprobs
        :param bool allow_sampling: Allow Sampling
        :param bool allow_search_indices: Allow Search Indices
        :param bool allow_view: Allow View
        :param int created: Created Time
        :param str id: Permission Identifier
        :param bool is_blocking: Is Blocking
        :param str object: Object Type
        :param str organization: Organization
        """
        pulumi.set(__self__, "allow_create_engine", allow_create_engine)
        pulumi.set(__self__, "allow_fine_tuning", allow_fine_tuning)
        pulumi.set(__self__, "allow_logprobs", allow_logprobs)
        pulumi.set(__self__, "allow_sampling", allow_sampling)
        pulumi.set(__self__, "allow_search_indices", allow_search_indices)
        pulumi.set(__self__, "allow_view", allow_view)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_blocking", is_blocking)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="allowCreateEngine")
    def allow_create_engine(self) -> bool:
        """
        Allow Create Engine
        """
        return pulumi.get(self, "allow_create_engine")

    @property
    @pulumi.getter(name="allowFineTuning")
    def allow_fine_tuning(self) -> bool:
        """
        Allow Fine Tuning
        """
        return pulumi.get(self, "allow_fine_tuning")

    @property
    @pulumi.getter(name="allowLogprobs")
    def allow_logprobs(self) -> bool:
        """
        Allow Logprobs
        """
        return pulumi.get(self, "allow_logprobs")

    @property
    @pulumi.getter(name="allowSampling")
    def allow_sampling(self) -> bool:
        """
        Allow Sampling
        """
        return pulumi.get(self, "allow_sampling")

    @property
    @pulumi.getter(name="allowSearchIndices")
    def allow_search_indices(self) -> bool:
        """
        Allow Search Indices
        """
        return pulumi.get(self, "allow_search_indices")

    @property
    @pulumi.getter(name="allowView")
    def allow_view(self) -> bool:
        """
        Allow View
        """
        return pulumi.get(self, "allow_view")

    @property
    @pulumi.getter
    def created(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Permission Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBlocking")
    def is_blocking(self) -> bool:
        """
        Is Blocking
        """
        return pulumi.get(self, "is_blocking")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Organization
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class GetModelsModelResult(dict):
    def __init__(__self__, *,
                 created: int,
                 id: str,
                 object: str,
                 owned_by: str,
                 parent: str,
                 permissions: Sequence['outputs.GetModelsModelPermissionResult'],
                 root: str):
        """
        :param int created: Created Time
        :param str id: Model Identifier
        :param str object: Object Type
        :param str owned_by: Model Owner
        :param str parent: Parent
        :param Sequence['GetModelsModelPermissionArgs'] permissions: Permissions
        :param str root: Root
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owned_by", owned_by)
        pulumi.set(__self__, "parent", parent)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "root", root)

    @property
    @pulumi.getter
    def created(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Model Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="ownedBy")
    def owned_by(self) -> str:
        """
        Model Owner
        """
        return pulumi.get(self, "owned_by")

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Parent
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetModelsModelPermissionResult']:
        """
        Permissions
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def root(self) -> str:
        """
        Root
        """
        return pulumi.get(self, "root")


@pulumi.output_type
class GetModelsModelPermissionResult(dict):
    def __init__(__self__, *,
                 allow_create_engine: bool,
                 allow_fine_tuning: bool,
                 allow_logprobs: bool,
                 allow_sampling: bool,
                 allow_search_indices: bool,
                 allow_view: bool,
                 created: int,
                 id: str,
                 is_blocking: bool,
                 object: str,
                 organization: str):
        """
        :param bool allow_create_engine: Allow Create Engine
        :param bool allow_fine_tuning: Allow Fine Tuning
        :param bool allow_logprobs: Allow Logprobs
        :param bool allow_sampling: Allow Sampling
        :param bool allow_search_indices: Allow Search Indices
        :param bool allow_view: Allow View
        :param int created: Created Time
        :param str id: Permission Identifier
        :param bool is_blocking: Is Blocking
        :param str object: Object Type
        :param str organization: Organization
        """
        pulumi.set(__self__, "allow_create_engine", allow_create_engine)
        pulumi.set(__self__, "allow_fine_tuning", allow_fine_tuning)
        pulumi.set(__self__, "allow_logprobs", allow_logprobs)
        pulumi.set(__self__, "allow_sampling", allow_sampling)
        pulumi.set(__self__, "allow_search_indices", allow_search_indices)
        pulumi.set(__self__, "allow_view", allow_view)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_blocking", is_blocking)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="allowCreateEngine")
    def allow_create_engine(self) -> bool:
        """
        Allow Create Engine
        """
        return pulumi.get(self, "allow_create_engine")

    @property
    @pulumi.getter(name="allowFineTuning")
    def allow_fine_tuning(self) -> bool:
        """
        Allow Fine Tuning
        """
        return pulumi.get(self, "allow_fine_tuning")

    @property
    @pulumi.getter(name="allowLogprobs")
    def allow_logprobs(self) -> bool:
        """
        Allow Logprobs
        """
        return pulumi.get(self, "allow_logprobs")

    @property
    @pulumi.getter(name="allowSampling")
    def allow_sampling(self) -> bool:
        """
        Allow Sampling
        """
        return pulumi.get(self, "allow_sampling")

    @property
    @pulumi.getter(name="allowSearchIndices")
    def allow_search_indices(self) -> bool:
        """
        Allow Search Indices
        """
        return pulumi.get(self, "allow_search_indices")

    @property
    @pulumi.getter(name="allowView")
    def allow_view(self) -> bool:
        """
        Allow View
        """
        return pulumi.get(self, "allow_view")

    @property
    @pulumi.getter
    def created(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Permission Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBlocking")
    def is_blocking(self) -> bool:
        """
        Is Blocking
        """
        return pulumi.get(self, "is_blocking")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Organization
        """
        return pulumi.get(self, "organization")


