# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFinetuningJobResult',
    'AwaitableGetFinetuningJobResult',
    'get_finetuning_job',
    'get_finetuning_job_output',
]

@pulumi.output_type
class GetFinetuningJobResult:
    """
    A collection of values returned by getFinetuningJob.
    """
    def __init__(__self__, created_at=None, fine_tuned_model=None, finished_at=None, hyperparams=None, id=None, model=None, object=None, organization_id=None, result_files=None, status=None, trained_tokens=None, training_file=None, validation_file=None):
        if created_at and not isinstance(created_at, int):
            raise TypeError("Expected argument 'created_at' to be a int")
        pulumi.set(__self__, "created_at", created_at)
        if fine_tuned_model and not isinstance(fine_tuned_model, str):
            raise TypeError("Expected argument 'fine_tuned_model' to be a str")
        pulumi.set(__self__, "fine_tuned_model", fine_tuned_model)
        if finished_at and not isinstance(finished_at, int):
            raise TypeError("Expected argument 'finished_at' to be a int")
        pulumi.set(__self__, "finished_at", finished_at)
        if hyperparams and not isinstance(hyperparams, dict):
            raise TypeError("Expected argument 'hyperparams' to be a dict")
        pulumi.set(__self__, "hyperparams", hyperparams)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if result_files and not isinstance(result_files, list):
            raise TypeError("Expected argument 'result_files' to be a list")
        pulumi.set(__self__, "result_files", result_files)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trained_tokens and not isinstance(trained_tokens, int):
            raise TypeError("Expected argument 'trained_tokens' to be a int")
        pulumi.set(__self__, "trained_tokens", trained_tokens)
        if training_file and not isinstance(training_file, str):
            raise TypeError("Expected argument 'training_file' to be a str")
        pulumi.set(__self__, "training_file", training_file)
        if validation_file and not isinstance(validation_file, str):
            raise TypeError("Expected argument 'validation_file' to be a str")
        pulumi.set(__self__, "validation_file", validation_file)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="fineTunedModel")
    def fine_tuned_model(self) -> str:
        """
        Fine-Tuned Model ID
        """
        return pulumi.get(self, "fine_tuned_model")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> int:
        """
        Finished Time
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def hyperparams(self) -> 'outputs.GetFinetuningJobHyperparamsResult':
        """
        Hyperparams
        """
        return pulumi.get(self, "hyperparams")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fine Tuning Job Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model ID
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Organization ID
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="resultFiles")
    def result_files(self) -> Sequence[str]:
        """
        Result Files
        """
        return pulumi.get(self, "result_files")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trainedTokens")
    def trained_tokens(self) -> int:
        """
        Trained Tokens
        """
        return pulumi.get(self, "trained_tokens")

    @property
    @pulumi.getter(name="trainingFile")
    def training_file(self) -> str:
        """
        Training File
        """
        return pulumi.get(self, "training_file")

    @property
    @pulumi.getter(name="validationFile")
    def validation_file(self) -> str:
        """
        Validation File
        """
        return pulumi.get(self, "validation_file")


class AwaitableGetFinetuningJobResult(GetFinetuningJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFinetuningJobResult(
            created_at=self.created_at,
            fine_tuned_model=self.fine_tuned_model,
            finished_at=self.finished_at,
            hyperparams=self.hyperparams,
            id=self.id,
            model=self.model,
            object=self.object,
            organization_id=self.organization_id,
            result_files=self.result_files,
            status=self.status,
            trained_tokens=self.trained_tokens,
            training_file=self.training_file,
            validation_file=self.validation_file)


def get_finetuning_job(id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFinetuningJobResult:
    """
    Fine-Tuning Job data source


    :param str id: Fine Tuning Job Identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openai:index/getFinetuningJob:getFinetuningJob', __args__, opts=opts, typ=GetFinetuningJobResult).value

    return AwaitableGetFinetuningJobResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        fine_tuned_model=pulumi.get(__ret__, 'fine_tuned_model'),
        finished_at=pulumi.get(__ret__, 'finished_at'),
        hyperparams=pulumi.get(__ret__, 'hyperparams'),
        id=pulumi.get(__ret__, 'id'),
        model=pulumi.get(__ret__, 'model'),
        object=pulumi.get(__ret__, 'object'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        result_files=pulumi.get(__ret__, 'result_files'),
        status=pulumi.get(__ret__, 'status'),
        trained_tokens=pulumi.get(__ret__, 'trained_tokens'),
        training_file=pulumi.get(__ret__, 'training_file'),
        validation_file=pulumi.get(__ret__, 'validation_file'))


@_utilities.lift_output_func(get_finetuning_job)
def get_finetuning_job_output(id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFinetuningJobResult]:
    """
    Fine-Tuning Job data source


    :param str id: Fine Tuning Job Identifier
    """
    ...
