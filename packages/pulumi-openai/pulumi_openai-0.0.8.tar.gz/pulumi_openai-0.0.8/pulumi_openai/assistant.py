# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AssistantArgs', 'Assistant']

@pulumi.input_type
class AssistantArgs:
    def __init__(__self__, *,
                 model: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 instructions: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 temperature: Optional[pulumi.Input[float]] = None,
                 tool_resources: Optional[pulumi.Input['AssistantToolResourcesArgs']] = None,
                 tools: Optional[pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]]] = None,
                 top_p: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a Assistant resource.
        :param pulumi.Input[str] model: ID of the model to use. You can use the List models API to see all of your available models.
        :param pulumi.Input[str] description: The description of the assistant. The maximum length is 512 characters.
        :param pulumi.Input[str] instructions: The system instructions that the assistant uses. The maximum length is 32768 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        :param pulumi.Input[str] name: The name of the assistant. The maximum length is 256 characters.
        :param pulumi.Input[float] temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        :param pulumi.Input['AssistantToolResourcesArgs'] tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        :param pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]] tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        :param pulumi.Input[float] top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        pulumi.set(__self__, "model", model)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if temperature is not None:
            pulumi.set(__self__, "temperature", temperature)
        if tool_resources is not None:
            pulumi.set(__self__, "tool_resources", tool_resources)
        if tools is not None:
            pulumi.set(__self__, "tools", tools)
        if top_p is not None:
            pulumi.set(__self__, "top_p", top_p)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[str]:
        """
        ID of the model to use. You can use the List models API to see all of your available models.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the assistant. The maximum length is 512 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[str]]:
        """
        The system instructions that the assistant uses. The maximum length is 32768 characters.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the assistant. The maximum length is 256 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def temperature(self) -> Optional[pulumi.Input[float]]:
        """
        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        """
        return pulumi.get(self, "temperature")

    @temperature.setter
    def temperature(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "temperature", value)

    @property
    @pulumi.getter(name="toolResources")
    def tool_resources(self) -> Optional[pulumi.Input['AssistantToolResourcesArgs']]:
        """
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        """
        return pulumi.get(self, "tool_resources")

    @tool_resources.setter
    def tool_resources(self, value: Optional[pulumi.Input['AssistantToolResourcesArgs']]):
        pulumi.set(self, "tool_resources", value)

    @property
    @pulumi.getter
    def tools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]]]:
        """
        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        """
        return pulumi.get(self, "tools")

    @tools.setter
    def tools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]]]):
        pulumi.set(self, "tools", value)

    @property
    @pulumi.getter(name="topP")
    def top_p(self) -> Optional[pulumi.Input[float]]:
        """
        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        return pulumi.get(self, "top_p")

    @top_p.setter
    def top_p(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "top_p", value)


@pulumi.input_type
class _AssistantState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instructions: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 temperature: Optional[pulumi.Input[float]] = None,
                 tool_resources: Optional[pulumi.Input['AssistantToolResourcesArgs']] = None,
                 tools: Optional[pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]]] = None,
                 top_p: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering Assistant resources.
        :param pulumi.Input[int] created_at: The Unix timestamp (in seconds) for when the assistant was created.
        :param pulumi.Input[str] description: The description of the assistant. The maximum length is 512 characters.
        :param pulumi.Input[str] instructions: The system instructions that the assistant uses. The maximum length is 32768 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        :param pulumi.Input[str] model: ID of the model to use. You can use the List models API to see all of your available models.
        :param pulumi.Input[str] name: The name of the assistant. The maximum length is 256 characters.
        :param pulumi.Input[str] object: The object type, which is always assistant.
        :param pulumi.Input[float] temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        :param pulumi.Input['AssistantToolResourcesArgs'] tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        :param pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]] tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        :param pulumi.Input[float] top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if temperature is not None:
            pulumi.set(__self__, "temperature", temperature)
        if tool_resources is not None:
            pulumi.set(__self__, "tool_resources", tool_resources)
        if tools is not None:
            pulumi.set(__self__, "tools", tools)
        if top_p is not None:
            pulumi.set(__self__, "top_p", top_p)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[int]]:
        """
        The Unix timestamp (in seconds) for when the assistant was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the assistant. The maximum length is 512 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[str]]:
        """
        The system instructions that the assistant uses. The maximum length is 32768 characters.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the model to use. You can use the List models API to see all of your available models.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the assistant. The maximum length is 256 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object type, which is always assistant.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def temperature(self) -> Optional[pulumi.Input[float]]:
        """
        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        """
        return pulumi.get(self, "temperature")

    @temperature.setter
    def temperature(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "temperature", value)

    @property
    @pulumi.getter(name="toolResources")
    def tool_resources(self) -> Optional[pulumi.Input['AssistantToolResourcesArgs']]:
        """
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        """
        return pulumi.get(self, "tool_resources")

    @tool_resources.setter
    def tool_resources(self, value: Optional[pulumi.Input['AssistantToolResourcesArgs']]):
        pulumi.set(self, "tool_resources", value)

    @property
    @pulumi.getter
    def tools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]]]:
        """
        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        """
        return pulumi.get(self, "tools")

    @tools.setter
    def tools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AssistantToolArgs']]]]):
        pulumi.set(self, "tools", value)

    @property
    @pulumi.getter(name="topP")
    def top_p(self) -> Optional[pulumi.Input[float]]:
        """
        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        return pulumi.get(self, "top_p")

    @top_p.setter
    def top_p(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "top_p", value)


class Assistant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instructions: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 temperature: Optional[pulumi.Input[float]] = None,
                 tool_resources: Optional[pulumi.Input[pulumi.InputType['AssistantToolResourcesArgs']]] = None,
                 tools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AssistantToolArgs']]]]] = None,
                 top_p: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Assistant resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_openai as openai

        test = openai.Assistant("test",
            description="tf-test-sample",
            instructions="You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
            model="gpt-4",
            tools=[openai.AssistantToolArgs(
                type="code_interpreter",
            )])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the assistant. The maximum length is 512 characters.
        :param pulumi.Input[str] instructions: The system instructions that the assistant uses. The maximum length is 32768 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        :param pulumi.Input[str] model: ID of the model to use. You can use the List models API to see all of your available models.
        :param pulumi.Input[str] name: The name of the assistant. The maximum length is 256 characters.
        :param pulumi.Input[float] temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        :param pulumi.Input[pulumi.InputType['AssistantToolResourcesArgs']] tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AssistantToolArgs']]]] tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        :param pulumi.Input[float] top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AssistantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Assistant resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_openai as openai

        test = openai.Assistant("test",
            description="tf-test-sample",
            instructions="You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
            model="gpt-4",
            tools=[openai.AssistantToolArgs(
                type="code_interpreter",
            )])
        ```

        :param str resource_name: The name of the resource.
        :param AssistantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssistantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instructions: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 temperature: Optional[pulumi.Input[float]] = None,
                 tool_resources: Optional[pulumi.Input[pulumi.InputType['AssistantToolResourcesArgs']]] = None,
                 tools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AssistantToolArgs']]]]] = None,
                 top_p: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssistantArgs.__new__(AssistantArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["instructions"] = instructions
            __props__.__dict__["metadata"] = metadata
            if model is None and not opts.urn:
                raise TypeError("Missing required property 'model'")
            __props__.__dict__["model"] = model
            __props__.__dict__["name"] = name
            __props__.__dict__["temperature"] = temperature
            __props__.__dict__["tool_resources"] = tool_resources
            __props__.__dict__["tools"] = tools
            __props__.__dict__["top_p"] = top_p
            __props__.__dict__["created_at"] = None
            __props__.__dict__["object"] = None
        super(Assistant, __self__).__init__(
            'openai:index/assistant:Assistant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instructions: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            model: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object: Optional[pulumi.Input[str]] = None,
            temperature: Optional[pulumi.Input[float]] = None,
            tool_resources: Optional[pulumi.Input[pulumi.InputType['AssistantToolResourcesArgs']]] = None,
            tools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AssistantToolArgs']]]]] = None,
            top_p: Optional[pulumi.Input[float]] = None) -> 'Assistant':
        """
        Get an existing Assistant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] created_at: The Unix timestamp (in seconds) for when the assistant was created.
        :param pulumi.Input[str] description: The description of the assistant. The maximum length is 512 characters.
        :param pulumi.Input[str] instructions: The system instructions that the assistant uses. The maximum length is 32768 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        :param pulumi.Input[str] model: ID of the model to use. You can use the List models API to see all of your available models.
        :param pulumi.Input[str] name: The name of the assistant. The maximum length is 256 characters.
        :param pulumi.Input[str] object: The object type, which is always assistant.
        :param pulumi.Input[float] temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        :param pulumi.Input[pulumi.InputType['AssistantToolResourcesArgs']] tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AssistantToolArgs']]]] tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        :param pulumi.Input[float] top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AssistantState.__new__(_AssistantState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["instructions"] = instructions
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["model"] = model
        __props__.__dict__["name"] = name
        __props__.__dict__["object"] = object
        __props__.__dict__["temperature"] = temperature
        __props__.__dict__["tool_resources"] = tool_resources
        __props__.__dict__["tools"] = tools
        __props__.__dict__["top_p"] = top_p
        return Assistant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[int]:
        """
        The Unix timestamp (in seconds) for when the assistant was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the assistant. The maximum length is 512 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def instructions(self) -> pulumi.Output[Optional[str]]:
        """
        The system instructions that the assistant uses. The maximum length is 32768 characters.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        """
        ID of the model to use. You can use the List models API to see all of your available models.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the assistant. The maximum length is 256 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> pulumi.Output[str]:
        """
        The object type, which is always assistant.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def temperature(self) -> pulumi.Output[Optional[float]]:
        """
        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        """
        return pulumi.get(self, "temperature")

    @property
    @pulumi.getter(name="toolResources")
    def tool_resources(self) -> pulumi.Output[Optional['outputs.AssistantToolResources']]:
        """
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        """
        return pulumi.get(self, "tool_resources")

    @property
    @pulumi.getter
    def tools(self) -> pulumi.Output[Optional[Sequence['outputs.AssistantTool']]]:
        """
        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        """
        return pulumi.get(self, "tools")

    @property
    @pulumi.getter(name="topP")
    def top_p(self) -> pulumi.Output[Optional[float]]:
        """
        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        """
        return pulumi.get(self, "top_p")

