# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetFileResult',
    'AwaitableGetFileResult',
    'get_file',
    'get_file_output',
]

@pulumi.output_type
class GetFileResult:
    """
    A collection of values returned by getFile.
    """
    def __init__(__self__, bytes=None, created=None, filename=None, filepath=None, id=None, object=None, purpose=None):
        if bytes and not isinstance(bytes, int):
            raise TypeError("Expected argument 'bytes' to be a int")
        pulumi.set(__self__, "bytes", bytes)
        if created and not isinstance(created, int):
            raise TypeError("Expected argument 'created' to be a int")
        pulumi.set(__self__, "created", created)
        if filename and not isinstance(filename, str):
            raise TypeError("Expected argument 'filename' to be a str")
        pulumi.set(__self__, "filename", filename)
        if filepath and not isinstance(filepath, str):
            raise TypeError("Expected argument 'filepath' to be a str")
        pulumi.set(__self__, "filepath", filepath)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if purpose and not isinstance(purpose, str):
            raise TypeError("Expected argument 'purpose' to be a str")
        pulumi.set(__self__, "purpose", purpose)

    @property
    @pulumi.getter
    def bytes(self) -> int:
        """
        File size in bytes
        """
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def created(self) -> int:
        """
        Created Time
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def filename(self) -> str:
        """
        Filename
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def filepath(self) -> str:
        """
        Filepath
        """
        return pulumi.get(self, "filepath")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        File Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Object Type
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def purpose(self) -> str:
        """
        Intended use of file. Use 'fine-tune' for Fine-tuning
        """
        return pulumi.get(self, "purpose")


class AwaitableGetFileResult(GetFileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFileResult(
            bytes=self.bytes,
            created=self.created,
            filename=self.filename,
            filepath=self.filepath,
            id=self.id,
            object=self.object,
            purpose=self.purpose)


def get_file(id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFileResult:
    """
    File data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openai as openai

    test = openai.get_file(id="1")
    ```


    :param str id: File Identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openai:index/getFile:getFile', __args__, opts=opts, typ=GetFileResult).value

    return AwaitableGetFileResult(
        bytes=pulumi.get(__ret__, 'bytes'),
        created=pulumi.get(__ret__, 'created'),
        filename=pulumi.get(__ret__, 'filename'),
        filepath=pulumi.get(__ret__, 'filepath'),
        id=pulumi.get(__ret__, 'id'),
        object=pulumi.get(__ret__, 'object'),
        purpose=pulumi.get(__ret__, 'purpose'))


@_utilities.lift_output_func(get_file)
def get_file_output(id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFileResult]:
    """
    File data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_openai as openai

    test = openai.get_file(id="1")
    ```


    :param str id: File Identifier
    """
    ...
