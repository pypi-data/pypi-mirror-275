# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class VectorDbProvider(str, enum.Enum):
    """
    An enumeration.
    """

    PINECONE = "PINECONE"
    ASTRA_DB = "ASTRA_DB"
    WEAVIATE = "WEAVIATE"
    QDRANT = "QDRANT"
    SUPABASE = "SUPABASE"

    def visit(
        self,
        pinecone: typing.Callable[[], T_Result],
        astra_db: typing.Callable[[], T_Result],
        weaviate: typing.Callable[[], T_Result],
        qdrant: typing.Callable[[], T_Result],
        supabase: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is VectorDbProvider.PINECONE:
            return pinecone()
        if self is VectorDbProvider.ASTRA_DB:
            return astra_db()
        if self is VectorDbProvider.WEAVIATE:
            return weaviate()
        if self is VectorDbProvider.QDRANT:
            return qdrant()
        if self is VectorDbProvider.SUPABASE:
            return supabase()
