import abc
import torch
from _typeshed import Incomplete
from abc import abstractmethod

class BaseTrainer(metaclass=abc.ABCMeta):
    output_folder: Incomplete
    has_writer: Incomplete
    def __init__(self, output_folder: str, has_wandb_writer: bool = False) -> None: ...
    def log(self, log_dict: dict, step: int = None, section: str = 'train'): ...
    def save(self, milestone: str): ...
    def load(self, milestone: str): ...
    @abstractmethod
    def train(self): ...
    @abstractmethod
    def set_model_state(self, train: bool = True): ...
    @abstractmethod
    def eval(self, dataloader: torch.utils.data.DataLoader) -> dict[str, object]: ...
    @abstractmethod
    def eval_during_training(self) -> dict[str, object]: ...
    @property
    @abstractmethod
    def device(self) -> torch.DeviceObjType: ...
    @property
    @abstractmethod
    def global_step(self) -> int: ...
    @abstractmethod
    def get_state(self) -> dict[str, object]: ...
    @abstractmethod
    def load_state(self, state: dict[str, object]): ...
