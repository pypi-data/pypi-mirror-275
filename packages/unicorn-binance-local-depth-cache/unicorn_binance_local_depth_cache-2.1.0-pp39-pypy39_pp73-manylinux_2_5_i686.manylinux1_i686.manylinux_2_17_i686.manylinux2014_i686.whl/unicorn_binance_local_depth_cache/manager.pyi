from .exceptions import *
import logging
import threading
from .licensing_manager import LucitLicensingManager as LucitLicensingManager, NoValidatedLucitLicense as NoValidatedLucitLicense
from _typeshed import Incomplete
from typing import Optional, Union
from unicorn_binance_rest_api import BinanceRestApiManager
from unicorn_binance_websocket_api import BinanceWebSocketApiManager

__app_name__: str
__logger__: logging.getLogger
logger = __logger__

class BinanceLocalDepthCacheManager(threading.Thread):
    name: Incomplete
    version: Incomplete
    exchange: Incomplete
    depth_caches: Incomplete
    depth_cache_update_interval: Incomplete
    default_refresh_interval: Incomplete
    high_performance: Incomplete
    init_interval: Incomplete
    init_time_window: Incomplete
    websocket_close_timeout: Incomplete
    websocket_ping_interval: Incomplete
    websocket_ping_timeout: Incomplete
    disable_colorama: Incomplete
    last_update_check_github: Incomplete
    stop_request: bool
    stream_id: Incomplete
    stream_status: Incomplete
    threading_lock_ask: Incomplete
    threading_lock_bid: Incomplete
    lucit_api_secret: Incomplete
    lucit_license_ini: Incomplete
    lucit_license_profile: Incomplete
    lucit_license_token: Incomplete
    llm: Incomplete
    ubra: Incomplete
    ubwa: Incomplete
    def __init__(self, exchange: str = ..., default_refresh_interval: int = ..., depth_cache_update_interval: int = ..., high_performance: bool = ..., init_interval: float = ..., init_time_window: int = ..., websocket_close_timeout: int = ..., websocket_ping_interval: int = ..., websocket_ping_timeout: int = ..., disable_colorama: bool = ..., ubra_manager: BinanceRestApiManager = ..., warn_on_update: bool = ..., lucit_api_secret: str = ..., lucit_license_ini: str = ..., lucit_license_profile: str = ..., lucit_license_token: str = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, error_traceback) -> None: ...
    def create_depth_cache(self, markets: Optional[Union[str, list]] = ..., refresh_interval: int = ...) -> bool: ...
    def get_asks(self, market: str = ..., limit_count: int = ..., threshold_volume: float = ...) -> list: ...
    def get_bids(self, market: str = ..., limit_count: int = ..., threshold_volume: float = ...) -> list: ...
    @staticmethod
    def get_latest_release_info() -> Optional[dict]: ...
    def get_latest_version(self) -> Optional[str]: ...
    def get_list_of_depth_caches(self) -> list: ...
    def get_ubra_manager(self) -> BinanceRestApiManager: ...
    def get_ubwa_manager(self) -> BinanceWebSocketApiManager: ...
    def get_user_agent(self) -> str: ...
    def is_depth_cache_synchronized(self, market: str = ...) -> bool: ...
    def is_stop_request(self, market: str = ...) -> bool: ...
    def get_stream_id(self) -> str: ...
    def is_update_available(self) -> bool: ...
    def get_version(self) -> str: ...
    def print_summary(self, add_string: str = ..., footer: str = ..., title: str = ...) -> None: ...
    def print_summary_to_png(self, print_summary_export_path: str = ..., height_per_row: float = ..., add_string: str = ..., footer: str = ..., title: str = ...): ...
    def set_refresh_request(self, markets: Optional[Union[str, list]] = ...) -> bool: ...
    def stop_depth_cache(self, markets: Optional[Union[str, list]] = ...) -> bool: ...
    def stop_manager(self, close_api_session: bool = ...) -> bool: ...
