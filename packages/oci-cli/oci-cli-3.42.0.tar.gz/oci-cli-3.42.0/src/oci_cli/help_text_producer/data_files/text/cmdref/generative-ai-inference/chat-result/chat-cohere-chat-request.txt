"chat-cohere-chat-request"
**************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Creates a response for the given conversation.


Usage
=====

   oci generative-ai-inference chat-result chat-cohere-chat-request [OPTIONS]


Required Parameters
===================

--chat-request-message [text]

Text input for the model to respond to.

--compartment-id, -c [text]

The OCID of compartment that the user is authorized to use to call
into the Generative AI service.

--serving-mode [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Optional Parameters
===================

--chat-request-chat-history [complex type]

A list of previous messages between the user and the model, meant to
give the model conversational context for responding to the user’s
message.

This option is a JSON list with items of type CohereMessage.  For
documentation on CohereMessage please see our API reference: https://
docs.cloud.oracle.com/api/#/en/generativeaiinference/20231130/datatyp
es/CohereMessage. This is a complex type whose value must be valid
JSON. The value can be provided as a string on the command line or
passed in as a file using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--chat-request-documents [complex type]

list of relevant documents that the model can cite to generate a more
accurate reply. Some suggested keys are “text”, “author”, and “date”.
For better generation quality, it is recommended to keep the total
word count of the strings in the dictionary to under 300 words. This
is a complex type whose value must be valid JSON. The value can be
provided as a string on the command line or passed in as a file using
the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--chat-request-frequency-penalty [text]

To reduce repetitiveness of generated tokens, this number penalizes
new tokens based on their frequency in the generated text so far.
Greater numbers encourage the model to use new tokens, while lower
numbers encourage the model to repeat the tokens. Set to 0 to disable.

--chat-request-is-search-queries-only [boolean]

When true, the response will only contain a list of generated search
queries, but no search will take place, and no reply from the model to
the user’s message will be generated.

--chat-request-is-stream [boolean]

Whether to stream back partial progress. If set, tokens are sent as
data-only server-sent events as they become available.

--chat-request-max-tokens [integer]

The maximum number of tokens to predict for each response. Includes
input plus output tokens.

--chat-request-preamble-override [text]

When specified, the default Cohere preamble will be replaced with the
provided one. Preambles are a part of the prompt used to adjust the
model’s overall behavior and conversation style. Default preambles
vary for different models.

--chat-request-presence-penalty [text]

To reduce repetitiveness of generated tokens, this number penalizes
new tokens based on whether they’ve appeared in the generated text so
far. Greater numbers encourage the model to use new tokens, while
lower numbers encourage the model to repeat the tokens.

Similar to frequency penalty, a penalty is applied to previously
present tokens, except that this penalty is applied equally to all
tokens that have already appeared, regardless of how many times
they’ve appeared. Set to 0 to disable.

--chat-request-temperature [text]

A number that sets the randomness of the generated output. A lower
temperature means a less random generations. Use lower numbers for
tasks with a correct answer such as question answering or summarizing.
High temperatures can generate hallucinations or factually incorrect
information. Start with temperatures lower than 1.0 and increase the
temperature for more creative outputs, as you regenerate the prompts
to refine the outputs.

--chat-request-top-k [integer]

An integer that sets up the model to use only the top k most likely
tokens in the generated output. A higher k introduces more randomness
into the output making the output text sound more natural. Default
value is 0 which disables this method and considers all tokens. To set
a number for the likely tokens, choose an integer between 1 and 500.

If also using top p, then the model considers only the top tokens
whose probabilities add up to p percent and ignores the rest of the k
tokens. For example, if k is 20, but the probabilities of the top 10
add up to .75, then only the top 10 tokens are chosen.

--chat-request-top-p [text]

If set to a probability 0.0 < p < 1.0, it ensures that only the most
likely tokens, with total probability mass of p, are considered for
generation at each step.

To eliminate tokens with low likelihood, assign p a minimum percentage
for the next token’s likelihood. For example, when p is set to 0.75,
the model eliminates the bottom 25 percent for the next token. Set to
1.0 to consider all tokens and set to 0 to disable. If both k and p
are enabled, p acts after k.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy and paste the following example into a JSON file, replacing the
example parameters with your own.

       oci generative-ai-inference chat-result chat-cohere-chat-request --generate-param-json-input serving-mode > serving-mode.json

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export chat_request_message=<substitute-value-of-chat_request_message> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/generative-ai-inference/chat-result/chat-cohere-chat-request.html#cmdoption-chat-request-message
       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/generative-ai-inference/chat-result/chat-cohere-chat-request.html#cmdoption-compartment-id

       oci generative-ai-inference chat-result chat-cohere-chat-request --chat-request-message $chat_request_message --compartment-id $compartment_id --serving-mode file://serving-mode.json
