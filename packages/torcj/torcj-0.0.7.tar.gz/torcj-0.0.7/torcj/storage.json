{
    "linear.ipynb": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"from sklearn import datasets\\n\",\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"class LinearRegression:\\n\",\n    \"    def __init__(self) -> None:\\n\",\n    \"        self.w = None\\n\",\n    \"        self.b = None\\n\",\n    \"\\n\",\n    \"    def grad_w(self, x, y):\\n\",\n    \"        return (self.lr(x) - y) * x\\n\",\n    \"\\n\",\n    \"    def grad_b(self, x, y):\\n\",\n    \"        return self.lr(x) - y\\n\",\n    \"\\n\",\n    \"    def mse(self, y_test, y_pred):\\n\",\n    \"        return np.mean((y_test - y_pred) ** 2)\\n\",\n    \"\\n\",\n    \"    def lr(self, x):\\n\",\n    \"        return np.dot(x, self.w.T) + self.b\\n\",\n    \"\\n\",\n    \"    def predict(self, X):\\n\",\n    \"        return np.array([self.lr(x) for x in X])\\n\",\n    \"\\n\",\n    \"    def fit(self, X, Y, lr=0.15, epochs=10):\\n\",\n    \"        self.w = np.random.randn(1, X.shape[1])\\n\",\n    \"        self.b = 0\\n\",\n    \"\\n\",\n    \"        loss = {}\\n\",\n    \"        for i in range(epochs):\\n\",\n    \"            dw = 0\\n\",\n    \"            db = 0\\n\",\n    \"            for x, y in zip(X, Y):\\n\",\n    \"                dw += self.grad_w(x, y)\\n\",\n    \"                db += self.grad_b(x, y)\\n\",\n    \"            self.w -= lr * dw\\n\",\n    \"            self.b -= lr * db\\n\",\n    \"            loss[i] = self.mse(y, self.lr(x))\\n\",\n    \"        plt.plot(loss.values())\\n\",\n    \"        plt.xlabel(\\\"Epochs\\\")\\n\",\n    \"        plt.ylabel(\\\"Mean Squared Error\\\")\\n\",\n    \"        plt.show()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"x, y = datasets.make_regression(\\n\",\n    \"    n_samples=100, n_features=1, noise=20, random_state=12345\\n\",\n    \")\\n\",\n    \"x_train, x_test, y_train, y_test = train_test_split(\\n\",\n    \"    x, y, test_size=0.2, random_state=12345\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"lr = LinearRegression()\\n\",\n    \"lr.fit(x_train, y_train, lr=0.015, epochs=300)\\n\",\n    \"\\n\",\n    \"y_pred_line = lr.predict(x)\\n\",\n    \"m1 = plt.scatter(x_train, y_train)\\n\",\n    \"m2 = plt.scatter(x_test, y_test)\\n\",\n    \"plt.plot(x, y_pred_line, color=\\\"black\\\", linewidth=2, label=\\\"Prediction\\\")\\n\",\n    \"plt.show()\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"language_info\": {\n   \"name\": \"python\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "softmax.ipynb": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import torch\\n\",\n    \"from torch import nn, optim\\n\",\n    \"from torch.nn import functional as F\\n\",\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"from sklearn.datasets import make_blobs\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"class SoftmaxRegression(nn.Module):\\n\",\n    \"    def __init__(self):\\n\",\n    \"        super().__init__()\\n\",\n    \"        torch.manual_seed(0)\\n\",\n    \"        self.net = nn.Sequential(nn.Linear(2, 4), nn.Softmax(dim=1))\\n\",\n    \"\\n\",\n    \"    def forward(self, x):\\n\",\n    \"        return self.net(x)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def accuracy(y_hat, y):\\n\",\n    \"    pred = torch.argmax(y_hat, dim=1)\\n\",\n    \"    return (pred == y).float().mean()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def fit(fn, x_train, y_train, epochs=1000, learning_rate=1):\\n\",\n    \"    loss_arr = []\\n\",\n    \"    acc_arr = []\\n\",\n    \"    opt = optim.SGD(fn.parameters(), lr=learning_rate)\\n\",\n    \"    for epoch in range(epochs):\\n\",\n    \"        y_hat = fn(x_train)\\n\",\n    \"        loss = F.cross_entropy(y_hat, y_train)\\n\",\n    \"        loss_arr.append(loss.item())\\n\",\n    \"        acc_arr.append(accuracy(y_hat, y_train))\\n\",\n    \"\\n\",\n    \"        loss.backward()\\n\",\n    \"        opt.step()\\n\",\n    \"        opt.zero_grad()\\n\",\n    \"\\n\",\n    \"    plt.plot(loss_arr)\\n\",\n    \"    plt.plot(acc_arr)\\n\",\n    \"    plt.show()\\n\",\n    \"    print(\\\"Loss before training\\\", loss_arr[0])\\n\",\n    \"    print(\\\"Loss after training\\\", loss_arr[-1])\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"data, labels = make_blobs(n_samples=1000, centers=4, n_features=2, random_state=0)\\n\",\n    \"x_train, x_test, y_train, y_test = train_test_split(\\n\",\n    \"    data, labels, stratify=labels, random_state=0\\n\",\n    \")\\n\",\n    \"x_train, x_test, y_train, y_test = map(\\n\",\n    \"    torch.tensor,\\n\",\n    \"    (\\n\",\n    \"        x_train,\\n\",\n    \"        x_test,\\n\",\n    \"        y_train,\\n\",\n    \"        y_test,\\n\",\n    \"    ),\\n\",\n    \")\\n\",\n    \"x_train = x_train.float()\\n\",\n    \"y_train = y_train.long()\\n\",\n    \"fn = SoftmaxRegression()\\n\",\n    \"fit(fn, x_train, y_train)\\n\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"language_info\": {\n   \"name\": \"python\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "mlpbin.ipynb": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import torch\\n\",\n    \"import torch.nn as nn\\n\",\n    \"import torch.optim as optim\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"from sklearn.datasets import make_classification\\n\",\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"from sklearn.metrics import accuracy_score\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"class MLP(nn.Module):\\n\",\n    \"    def __init__(self, input_dim, hidden_dim, output_dim) -> None:\\n\",\n    \"        super(MLP, self).__init__()\\n\",\n    \"        self.fc1 = nn.Linear(input_dim, hidden_dim)\\n\",\n    \"        self.relu = nn.ReLU()\\n\",\n    \"        self.fc2 = nn.Linear(hidden_dim, output_dim)\\n\",\n    \"\\n\",\n    \"    def forward(self, x):\\n\",\n    \"        out = self.fc1(x)\\n\",\n    \"        out = self.relu(out)\\n\",\n    \"        out = self.fc2(out)\\n\",\n    \"        return out\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def train_MLP(\\n\",\n    \"    X_train,\\n\",\n    \"    Y_train,\\n\",\n    \"    X_test,\\n\",\n    \"    Y_test,\\n\",\n    \"    input_dim,\\n\",\n    \"    hidden_dim,\\n\",\n    \"    output_dim,\\n\",\n    \"    epochs=100,\\n\",\n    \"    learning_rate=0.01,\\n\",\n    \"):\\n\",\n    \"    model = MLP(input_dim, hidden_dim, output_dim)\\n\",\n    \"    criterion = nn.CrossEntropyLoss()\\n\",\n    \"    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\\n\",\n    \"    train_losses = []\\n\",\n    \"    test_losses = []\\n\",\n    \"    train_acc = []\\n\",\n    \"    test_acc = []\\n\",\n    \"    for epoch in range(epochs):\\n\",\n    \"        model.train()\\n\",\n    \"        optimizer.zero_grad()\\n\",\n    \"        outputs = model(X_train)\\n\",\n    \"        loss = criterion(outputs, Y_train)\\n\",\n    \"        loss.backward()\\n\",\n    \"        optimizer.step()\\n\",\n    \"\\n\",\n    \"        model.eval()\\n\",\n    \"        train_loss = criterion(model(X_train), Y_train)\\n\",\n    \"        train_losses.append(train_loss.item())\\n\",\n    \"        test_loss = criterion(model(X_test), Y_test)\\n\",\n    \"        test_losses.append(test_loss.item())\\n\",\n    \"\\n\",\n    \"        _, predicted_train = torch.max(outputs, 1)\\n\",\n    \"        _, predicted_test = torch.max(model(X_test), 1)\\n\",\n    \"        train_acc.append(\\n\",\n    \"            accuracy_score(\\n\",\n    \"                Y_train.numpy(),\\n\",\n    \"                predicted_train.detach().numpy(),\\n\",\n    \"            )\\n\",\n    \"        )\\n\",\n    \"        test_acc.append(\\n\",\n    \"            accuracy_score(\\n\",\n    \"                Y_test.numpy(),\\n\",\n    \"                predicted_test.detach().numpy(),\\n\",\n    \"            )\\n\",\n    \"        )\\n\",\n    \"    plt.plot(train_losses, label=\\\"Train Loss\\\")\\n\",\n    \"    plt.plot(test_losses, label=\\\"Test Loss\\\")\\n\",\n    \"    plt.xlabel(\\\"Epochs\\\")\\n\",\n    \"    plt.ylabel(\\\"Loss\\\")\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    plt.plot(train_acc, label=\\\"Train Accuracy\\\")\\n\",\n    \"    plt.plot(test_acc, label=\\\"Test Accuracy\\\")\\n\",\n    \"    plt.xlabel(\\\"Epochs\\\")\\n\",\n    \"    plt.ylabel(\\\"Loss\\\")\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    return train_losses, test_losses, train_acc, test_acc\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"X, Y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=123)\\n\",\n    \"X_train, X_test, Y_train, Y_test = train_test_split(\\n\",\n    \"    X, Y, test_size=0.2, random_state=123\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"X_train, X_test = torch.tensor(X_train, dtype=torch.float32), torch.tensor(\\n\",\n    \"    X_test, dtype=torch.float32\\n\",\n    \")\\n\",\n    \"Y_train, Y_test = torch.tensor(Y_train, dtype=torch.long), torch.tensor(\\n\",\n    \"    Y_test, dtype=torch.long\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"input_dim = X_train.shape[1]\\n\",\n    \"hidden_dim = 128\\n\",\n    \"output_dim = 2\\n\",\n    \"train_MLP(X_train, Y_train, X_test, Y_test, input_dim, hidden_dim, output_dim)\\n\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"language_info\": {\n   \"name\": \"python\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "speech.ipynb": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import librosa\\n\",\n    \"import torch\\n\",\n    \"from transformers import Wav2Vec2ForCTC, Wav2Vec2Tokenizer\\n\",\n    \"\\n\",\n    \"file = \\\"data/harvard.wav\\\"\\n\",\n    \"model = Wav2Vec2ForCTC.from_pretrained(\\\"facebook/wav2vec2-base-960h\\\")\\n\",\n    \"tokenizer = Wav2Vec2Tokenizer.from_pretrained(\\\"facebook/wav2vec2-base-960h\\\")\\n\",\n    \"audio, _ = librosa.load(file)\\n\",\n    \"values = tokenizer(audio, return_tensors=\\\"pt\\\").input_values\\n\",\n    \"logits = model(values).logits\\n\",\n    \"predicted_ids = torch.argmax(logits, dim=-1)\\n\",\n    \"text = tokenizer.decode(predicted_ids[0])\\n\",\n    \"print(text)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"language_info\": {\n   \"name\": \"python\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "mlpmulti.ipynb": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import torch\\n\",\n    \"import torch.nn as nn\\n\",\n    \"import torch.optim as optim\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"from sklearn.datasets import make_classification\\n\",\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"from sklearn.metrics import accuracy_score\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"class MLP(nn.Module):\\n\",\n    \"    def __init__(self, input_dim, hidden_dim, output_dim) -> None:\\n\",\n    \"        super(MLP, self).__init__()\\n\",\n    \"        self.fc1 = nn.Linear(input_dim, hidden_dim)\\n\",\n    \"        self.relu = nn.ReLU()\\n\",\n    \"        self.fc2 = nn.Linear(hidden_dim, output_dim)\\n\",\n    \"\\n\",\n    \"    def forward(self, x):\\n\",\n    \"        out = self.fc1(x)\\n\",\n    \"        out = self.relu(out)\\n\",\n    \"        out = self.fc2(out)\\n\",\n    \"        return out\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def train_MLP(\\n\",\n    \"    X_train,\\n\",\n    \"    Y_train,\\n\",\n    \"    X_test,\\n\",\n    \"    Y_test,\\n\",\n    \"    input_dim,\\n\",\n    \"    hidden_dim,\\n\",\n    \"    output_dim,\\n\",\n    \"    epochs=100,\\n\",\n    \"    learning_rate=0.01,\\n\",\n    \"):\\n\",\n    \"    model = MLP(input_dim, hidden_dim, output_dim)\\n\",\n    \"    criterion = nn.CrossEntropyLoss()\\n\",\n    \"    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\\n\",\n    \"    train_losses = []\\n\",\n    \"    test_losses = []\\n\",\n    \"    train_acc = []\\n\",\n    \"    test_acc = []\\n\",\n    \"    for epoch in range(epochs):\\n\",\n    \"        model.train()\\n\",\n    \"        optimizer.zero_grad()\\n\",\n    \"        outputs = model(X_train)\\n\",\n    \"        loss = criterion(outputs, Y_train)\\n\",\n    \"        loss.backward()\\n\",\n    \"        optimizer.step()\\n\",\n    \"\\n\",\n    \"        model.eval()\\n\",\n    \"        train_loss = criterion(model(X_train), Y_train)\\n\",\n    \"        train_losses.append(train_loss.item())\\n\",\n    \"        test_loss = criterion(model(X_test), Y_test)\\n\",\n    \"        test_losses.append(test_loss.item())\\n\",\n    \"\\n\",\n    \"        _, predicted_train = torch.max(outputs, 1)\\n\",\n    \"        _, predicted_test = torch.max(model(X_test), 1)\\n\",\n    \"        train_acc.append(\\n\",\n    \"            accuracy_score(\\n\",\n    \"                Y_train.numpy(),\\n\",\n    \"                predicted_train.detach().numpy(),\\n\",\n    \"            )\\n\",\n    \"        )\\n\",\n    \"        test_acc.append(\\n\",\n    \"            accuracy_score(\\n\",\n    \"                Y_test.numpy(),\\n\",\n    \"                predicted_test.detach().numpy(),\\n\",\n    \"            )\\n\",\n    \"        )\\n\",\n    \"    plt.plot(train_losses, label=\\\"Train Loss\\\")\\n\",\n    \"    plt.plot(test_losses, label=\\\"Test Loss\\\")\\n\",\n    \"    plt.xlabel(\\\"Epochs\\\")\\n\",\n    \"    plt.ylabel(\\\"Loss\\\")\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    plt.plot(train_acc, label=\\\"Train Accuracy\\\")\\n\",\n    \"    plt.plot(test_acc, label=\\\"Test Accuracy\\\")\\n\",\n    \"    plt.xlabel(\\\"Epochs\\\")\\n\",\n    \"    plt.ylabel(\\\"Loss\\\")\\n\",\n    \"    plt.legend()\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"    return train_losses, test_losses, train_acc, test_acc\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"X, Y = make_classification(\\n\",\n    \"    n_samples=1000, n_features=20, n_classes=3, n_clusters_per_class=1, random_state=123\\n\",\n    \")\\n\",\n    \"X_train, X_test, Y_train, Y_test = train_test_split(\\n\",\n    \"    X, Y, test_size=0.2, random_state=123\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"X_train, X_test = torch.tensor(X_train, dtype=torch.float32), torch.tensor(\\n\",\n    \"    X_test, dtype=torch.float32\\n\",\n    \")\\n\",\n    \"Y_train, Y_test = torch.tensor(Y_train, dtype=torch.long), torch.tensor(\\n\",\n    \"    Y_test, dtype=torch.long\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"input_dim = X_train.shape[1]\\n\",\n    \"hidden_dim = 128\\n\",\n    \"output_dim = 3\\n\",\n    \"train_MLP(X_train, Y_train, X_test, Y_test, input_dim, hidden_dim, output_dim)\\n\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"language_info\": {\n   \"name\": \"python\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "RNN,LSTM,GRU.ipynb": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"import numpy as np\\n\",\n    \"import string\\n\",\n    \"import torch\\n\",\n    \"import torch.nn as nn\\n\",\n    \"import torch.optim as optim\\n\",\n    \"from IPython.display import clear_output\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"languages = []\\n\",\n    \"data = []\\n\",\n    \"X = []\\n\",\n    \"y = []\\n\",\n    \"\\n\",\n    \"with open(\\\"data/name2lang.txt\\\", \\\"r\\\") as f:\\n\",\n    \"    for line in f:\\n\",\n    \"        line = line.split(\\\",\\\")\\n\",\n    \"        name = line[0].strip()\\n\",\n    \"        lang = line[1].strip()\\n\",\n    \"        if not lang in languages:\\n\",\n    \"            languages.append(lang)\\n\",\n    \"        X.append(name)\\n\",\n    \"        y.append(lang)\\n\",\n    \"        data.append((name, lang))\\n\",\n    \"\\n\",\n    \"n_languages = len(languages)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"['Portuguese', 'Irish', 'Spanish', 'Vietnamese', 'Chinese', 'Greek', 'Czech', 'Dutch', 'Japanese', 'French', 'German', 'Scottish', 'English', 'Russian', 'Polish', 'Arabic', 'Korean', 'Italian']\\n\",\n      \"[('Abreu', 'Portuguese'), ('Albuquerque', 'Portuguese'), ('Almeida', 'Portuguese'), ('Alves', 'Portuguese'), ('Araujo', 'Portuguese')]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(languages)\\n\",\n    \"print(data[0:5])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"16040 4010\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"X_train, X_test, y_train, y_test = train_test_split(\\n\",\n    \"    X, y, test_size=0.2, random_state=0, stratify=y\\n\",\n    \")\\n\",\n    \"print(len(X_train), len(X_test))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"all_letters = string.ascii_letters + \\\" .,;'\\\"\\n\",\n    \"n_letters = len(all_letters)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def name_rep(name):\\n\",\n    \"    rep = torch.zeros(len(name), 1, n_letters)\\n\",\n    \"    for index, letter in enumerate(name):\\n\",\n    \"        pos = all_letters.find(letter)\\n\",\n    \"        rep[index][0][pos] = 1\\n\",\n    \"    return rep\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def lang_rep(lang):\\n\",\n    \"    return torch.tensor([languages.index(lang)], dtype=torch.long)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def infer(net, name):\\n\",\n    \"    net.eval()\\n\",\n    \"    name_ohe = name_rep(name)\\n\",\n    \"    hidden = net.init_hidden()\\n\",\n    \"    for i in range(name_ohe.size()[0]):\\n\",\n    \"        output, hidden = net(name_ohe[i], hidden)\\n\",\n    \"    return output\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def dataloader(npoints, X_, y_):\\n\",\n    \"    to_ret = []\\n\",\n    \"    for i in range(npoints):\\n\",\n    \"        index_ = np.random.randint(len(X_))\\n\",\n    \"        name, lang = X_[index_], y_[index_]\\n\",\n    \"        to_ret.append((name, lang, name_rep(name), lang_rep(lang)))\\n\",\n    \"    return to_ret\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def eval(net, n_points, k, X_, y_):\\n\",\n    \"    data_ = dataloader(n_points, X_, y_)\\n\",\n    \"    correct = 0\\n\",\n    \"    for name, language, name_ohe, lang_rep in data_:\\n\",\n    \"        output = infer(net, name)\\n\",\n    \"        val, indices = output.topk(k)\\n\",\n    \"        if lang_rep in indices:\\n\",\n    \"            correct += 1\\n\",\n    \"    accuracy = correct / n_points\\n\",\n    \"    return accuracy\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def train(net, opt, criterion, n_points):\\n\",\n    \"    opt.zero_grad()\\n\",\n    \"    total_loss = 0\\n\",\n    \"    data_ = dataloader(n_points, X_train, y_train)\\n\",\n    \"    for name, language, name_ohe, lang_rep in data_:\\n\",\n    \"        hidden = net.init_hidden()\\n\",\n    \"        for i in range(name_ohe.size()[0]):\\n\",\n    \"            output, hidden = net(name_ohe[i], hidden)\\n\",\n    \"        loss = criterion(output, lang_rep)\\n\",\n    \"        loss.backward(retain_graph=True)\\n\",\n    \"        total_loss += loss\\n\",\n    \"    opt.step()\\n\",\n    \"    return total_loss / n_points\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def train_setup(\\n\",\n    \"    net, lr=0.01, n_batches=100, batch_size=10, momentum=0.9, display_freq=5\\n\",\n    \"):\\n\",\n    \"    criterion = nn.NLLLoss()\\n\",\n    \"    opt = optim.SGD(net.parameters(), lr=lr, momentum=momentum)\\n\",\n    \"    loss_arr = np.zeros(n_batches + 1)\\n\",\n    \"    for i in range(n_batches):\\n\",\n    \"        loss_arr[i + 1] = (loss_arr[i] * i + train(net, opt, criterion, batch_size)) / (\\n\",\n    \"            i + 1\\n\",\n    \"        )\\n\",\n    \"        if i % display_freq == display_freq - 1:\\n\",\n    \"            clear_output(wait=True)\\n\",\n    \"            print(\\n\",\n    \"                \\\"Iteration\\\",\\n\",\n    \"                i+1,\\n\",\n    \"                \\\"Top-1:\\\",\\n\",\n    \"                eval(net, len(X_test), 1, X_test, y_test),\\n\",\n    \"                \\\"Top-2:\\\",\\n\",\n    \"                eval(net, len(X_test), 2, X_test, y_test),\\n\",\n    \"                \\\"Loss\\\",\\n\",\n    \"                loss_arr[i],\\n\",\n    \"            )\\n\",\n    \"            plt.figure()\\n\",\n    \"            plt.plot(loss_arr[1:i], \\\"-*\\\")\\n\",\n    \"            plt.xlabel(\\\"Iteration\\\")\\n\",\n    \"            plt.ylabel(\\\"Loss\\\")\\n\",\n    \"            plt.show()\\n\",\n    \"            print(\\\"\\\\n\\\\n\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"lr=0.0005\\n\",\n    \"n_batches=30\\n\",\n    \"batch_size=200\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# RNN\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"class RNN_net(nn.Module):\\n\",\n    \"    def __init__(self, input_size, hidden_size, output_size):\\n\",\n    \"        super(RNN_net, self).__init__()\\n\",\n    \"        self.hidden_size = hidden_size\\n\",\n    \"        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\\n\",\n    \"        self.i2o = nn.Linear(input_size + hidden_size, output_size)\\n\",\n    \"        self.softmax = nn.LogSoftmax(dim=1)\\n\",\n    \"\\n\",\n    \"    def forward(self, input_, hidden):\\n\",\n    \"        combined = torch.cat((input_, hidden), 1)\\n\",\n    \"        hidden = self.i2h(combined)\\n\",\n    \"        output = self.i2o(combined)\\n\",\n    \"        output = self.softmax(output)\\n\",\n    \"        return output, hidden\\n\",\n    \"\\n\",\n    \"    def init_hidden(self):\\n\",\n    \"        return torch.zeros(1, self.hidden_size)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"n_hidden = 128\\n\",\n    \"net = RNN_net(n_letters, n_hidden, n_languages)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Iteration 30 Top-1: 0.5214463840399003 Top-2: 0.6665835411471321 Loss 1.9449279308319092\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"n_hidden = 128\\n\",\n    \"net = RNN_net(n_letters, n_hidden, n_languages)\\n\",\n    \"train_setup(net, lr, n_batches, batch_size)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# LSTM cell\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"class LSTM_net(nn.Module):\\n\",\n    \"    def __init__(self, input_size, hidden_size, output_size):\\n\",\n    \"        super(LSTM_net, self).__init__()\\n\",\n    \"        self.hidden_size = hidden_size\\n\",\n    \"        self.lstm_cell = nn.LSTM(input_size, hidden_size)\\n\",\n    \"        self.h2o = nn.Linear(hidden_size, output_size)\\n\",\n    \"        self.softmax = nn.LogSoftmax(dim=2)\\n\",\n    \"\\n\",\n    \"    def forward(self, input_, hidden):\\n\",\n    \"        out, hidden = self.lstm_cell(input_.view(1, 1, -1), hidden)\\n\",\n    \"        output = self.h2o(hidden[0])\\n\",\n    \"        output = self.softmax(output)\\n\",\n    \"        return output.view(1, -1), hidden\\n\",\n    \"\\n\",\n    \"    def init_hidden(self):\\n\",\n    \"        return (torch.zeros(1, 1, self.hidden_size), torch.zeros(1, 1, self.hidden_size))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Iteration 30 Top-1: 0.4665835411471322 Top-2: 0.642643391521197 Loss 2.169830083847046\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"n_hidden = 128\\n\",\n    \"net = LSTM_net(n_letters, n_hidden, n_languages)\\n\",\n    \"train_setup(net, lr, n_batches, batch_size)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# GRU\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"class GRU_net(nn.Module):\\n\",\n    \"    def __init__(self, input_size, hidden_size, output_size):\\n\",\n    \"        super(GRU_net, self).__init__()\\n\",\n    \"        self.hidden_size = hidden_size\\n\",\n    \"        self.gru_cell = nn.GRU(input_size, hidden_size)\\n\",\n    \"        self.h2o = nn.Linear(hidden_size, output_size)\\n\",\n    \"        self.softmax = nn.LogSoftmax(dim=2)\\n\",\n    \"\\n\",\n    \"    def forward(self, input_, hidden):\\n\",\n    \"        out, hidden = self.gru_cell(input_.view(1, 1, -1), hidden)\\n\",\n    \"        output = self.h2o(hidden)\\n\",\n    \"        output = self.softmax(output)\\n\",\n    \"        return output.view(1, -1), hidden\\n\",\n    \"\\n\",\n    \"    def init_hidden(self):\\n\",\n    \"        return torch.zeros(1, 1, self.hidden_size)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Iteration 30 Top-1: 0.46458852867830425 Top-2: 0.65785536159601 Loss 2.1602635383605957\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"n_hidden = 128\\n\",\n    \"net = LSTM_net(n_letters, n_hidden, n_languages)\\n\",\n    \"train_setup(net, lr, n_batches, batch_size)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \".venv\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.12\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
}