[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "pytest-embedded-wokwi"
authors = [
    {name = "Fu Hanxi", email = "fuhanxi@espressif.com"},
    {name = "Uri Shaked", email = "uri@wokwi.com"},
]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Software Development :: Testing",
]
dynamic = ["version", "description"]
requires-python = ">=3.7"

dependencies = [
    "pytest-embedded~=1.10.3",
    "toml~=0.10.2",
]

[project.optional-dependencies]
idf = [
    "pytest-embedded-idf~=1.10.3",
]

[project.urls]
homepage = "https://github.com/espressif/pytest-embedded"
repository = "https://github.com/espressif/pytest-embedded"
documentation = "https://docs.espressif.com/projects/pytest-embedded/en/latest/"
changelog = "https://github.com/espressif/pytest-embedded/blob/main/CHANGELOG.md"

[tool.isort]
profile = 'black'

[tool.ruff]
line-length = 120
target-version = "py37"

[tool.ruff.lint]
select = [
    'F',  # Pyflakes
    'E',  # pycodestyle
    'W',  # pycodestyle
#    'C90',  # mccabe
    'I',  # isort
#    'N',  # pep8-naming
#    'D',  # pydocstyle
    'UP',  # pyupgrade
    'YTT',  # flake8-2020
#    'ANN',  # flake8-annotations
#    'ASYNC',  # flake8-async
#    'TRIO',  # flake8-trio
#    'S',  # flake8-bandit
#    'BLE',  # flake8-blind-except
#    'FBT',  # flake8-boolean-trap
#    'B',  # flake8-bugbear
    'A',  # flake8-builtins
#    'COM',  # flake8-commas
#    'CPY',  # flake8-copyright
#    'C4',  # flake8-comprehensions
#    'DTZ',  # flake8-datetimez
#    'T10',  # flake8-debugger
#    'DJ',  # flake8-django
#    'EM',  # flake8-errmsg
#    'EXE',  # flake8-executable
#    'FA',  # flake8-future-annotations
#    'ISC',  # flake8-implicit-str-concat
#    'ICN',  # flake8-import-conventions
#    'G',  # flake8-logging-format
#    'INP',  # flake8-no-pep420
#    'PIE',  # flake8-pie
#    'T20',  # flake8-print
#    'PYI',  # flake8-pyi
#    'PT',  # flake8-pytest-style
#    'Q',  # flake8-quotes
#    'RSE',  # flake8-raise
#    'RET',  # flake8-return
#    'SLF',  # flake8-self
#    'SLOT',  # flake8-slots
#    'SIM',  # flake8-simplify
#    'TID',  # flake8-tidy-imports
#    'TCH',  # flake8-type-checking
#    'INT',  # flake8-gettext
    'ARG',  # flake8-unused-arguments
#    'PTH',  # flake8-use-pathlib
#    'TD',  # flake8-todos
#    'FIX',  # flake8-fixme
    'ERA',  # eradicate
#    'PD',  # pandas-vet
#    'PGH',  # pygrep-hooks
#    'PL',  # Pylint
#    'TRY',  # tryceratops
#    'FLY',  # flynt
#    'NPY',  # NumPy-specific rules
#    'AIR',  # Airflow
#    'PERF',  # Perflint
#    'FURB',  # refurb
    'LOG',  # flake8-logging
    'RUF',  # Ruff-specific rules
]

[tool.ruff.format]
quote-style = "single"
exclude = ["**/tests/*"]
docstring-code-format = true
