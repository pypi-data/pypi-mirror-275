Metadata-Version: 2.1
Name: annonition
Version: 0.1.1
Summary: Log everything in style.
Author: Abtin Turing
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: coloredlogs
Requires-Dist: verboselogs
Requires-Dist: yaspin

# Annonition's CustomLogger

`CustomLogger` is a flexible and customizable logging utility for Python applications. This library extends the standard logging module to include additional features such as automatic message formatting, endpoint filtering, progress spinners, and timers.

## Features

- **Extended Logging Levels**: Supports additional levels like SPAM, VERBOSE, NOTICE, and SUCCESS.
- **Endpoint Filtering**: Customizable filter to ignore logs containing specified endpoints.
- **Flexible JSON Serialization**: Automatically serializes complex objects to JSON in log messages.
- **Progress Spinner**: Context manager for displaying a progress spinner with customizable messages and optional timers.
- **Execution Timer**: Context manager for timing code blocks with automatic logging of elapsed time.

## Installation

You can install `annonition` using pip:

```bash
pip install annonition
```

## Usage

### Basic Setup

```python
from annonition import CustomLogger

# Initialize the logger
logger = CustomLogger()
```

### Logging Messages

```python
# Log a simple message
logger.info("This is an informational message.")

# Log a JSON serializable object
logger.debug({"key": "value", "list": [1, 2, 3]})
```

### Filtering Endpoints

The `EndpointFilter` can be used to ignore logs containing specific endpoints or texts:

```python
# Initialize the logger with endpoint filtering
logger = CustomLogger(ignore=["/health", "Press CTRL+C to quit"])
```

### Progress Spinner

Use the `spinner` context manager to display a progress spinner with a message:

```python
with logger.spinner("Processing...") as progress:
    time.sleep(2)
    progress.change("Still processing...")
    time.sleep(2)
    progress.log("Halfway done.")
    progress.revert()
    time.sleep(2)
    progress.fail("Process failed.")
```

By the end, it should have logged the following:
```
Halfway done. (2.00s)
ðŸ’¥ Process failed. (3.00s)
```

### Execution Timer

Use the `timer` context manager to measure and log the time taken for a code block:

```python
with logger.timer("Executing task"):
    time.sleep(3)
```

At the end of this, it logs:
```
Doing something...: 5.0026s
```

## License

This project is licensed under the MIT License.

## Acknowledgements

This library uses the following third-party libraries:

- `coloredlogs`
- `verboselogs`
- `yaspin`

## Contact

For any questions or suggestions, please open an issue on GitHub.
