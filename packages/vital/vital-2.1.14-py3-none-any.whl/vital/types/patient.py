# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .patient_birth_date import PatientBirthDate
from .vital_core_providers_lab_test_labs_schemas_results_fhir_identifier_item import (
    VitalCoreProvidersLabTestLabsSchemasResultsFhirIdentifierItem,
)
from .vital_core_providers_lab_test_labs_schemas_results_fhir_name_item import (
    VitalCoreProvidersLabTestLabsSchemasResultsFhirNameItem,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Patient(pydantic.BaseModel):
    birth_date: PatientBirthDate = pydantic.Field(alias="birthDate")
    name: typing.List[VitalCoreProvidersLabTestLabsSchemasResultsFhirNameItem]
    gender: str
    identifier: typing.List[VitalCoreProvidersLabTestLabsSchemasResultsFhirIdentifierItem]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
