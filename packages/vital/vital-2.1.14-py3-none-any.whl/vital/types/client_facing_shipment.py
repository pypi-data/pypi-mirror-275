# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ClientFacingShipment(pydantic.BaseModel):
    """
    Schema for a Shipment in the client facing API.

    To be used as part of a ClientFacingTestkitOrder.
    """

    id: str = pydantic.Field(description="The Vital Shipment ID")
    outbound_tracking_number: typing.Optional[str] = pydantic.Field(
        description="Tracking number for delivery to customer"
    )
    outbound_tracking_url: typing.Optional[str] = pydantic.Field(description="Tracking url for delivery to customer")
    inbound_tracking_number: typing.Optional[str] = pydantic.Field(description="Tracking number for delivery to lab")
    inbound_tracking_url: typing.Optional[str] = pydantic.Field(description="Tracking url for delivery to lab")
    outbound_courier: typing.Optional[str] = pydantic.Field(description="Courier used for delivery to customer")
    inbound_courier: typing.Optional[str] = pydantic.Field(description="Courier used for delivery to lab")
    notes: typing.Optional[str] = pydantic.Field(description="Notes associated to the Vital shipment")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
