# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .beneficiary import Beneficiary
from .payor_item import PayorItem
from .relationship import Relationship
from .vital_core_schemas_request_schemas_orders_identifier_item import (
    VitalCoreSchemasRequestSchemasOrdersIdentifierItem,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class PostOrderCoverage(pydantic.BaseModel):
    resource_type: str = pydantic.Field(alias="resourceType")
    network: str
    subscriber_id: str = pydantic.Field(alias="subscriberId")
    status: str
    beneficiary: Beneficiary
    identifier: typing.List[VitalCoreSchemasRequestSchemasOrdersIdentifierItem]
    payor: typing.List[PayorItem]
    relationship: Relationship

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
