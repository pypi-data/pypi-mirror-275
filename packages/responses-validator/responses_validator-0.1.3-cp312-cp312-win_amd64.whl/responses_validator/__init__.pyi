from _typeshed import Incomplete
from dataclasses import dataclass, field as field

logger: Incomplete

@dataclass
class JSONField:
    name: str | int
    value: dict
    mode: None = ...
    msg: str = ...
    @classmethod
    def form_asserts(cls, k: str, v: dict): ...
    def validate(self, value): ...
    def __init__(self, name, value, mode=..., msg=...) -> None: ...

@dataclass
class TextField:
    name: str | int
    value: str | int
    mode: None = ...
    msg: str = ...
    def __post_init__(self) -> None: ...
    @classmethod
    def form_asserts(cls, k, v): ...
    def validate(self, value): ...
    def __init__(self, name, value, mode=..., msg=...) -> None: ...

@dataclass
class ResponseValidator:
    status_code: str = ...
    headers: dict = ...
    text: dict | str = ...
    json: dict | str | int = ...
    def __post_init__(self) -> None: ...
    def is_valid(self, resp, raise_exception: bool = True): ...
    def validate_status_code(self, resp_status_code): ...
    def validate_headers(self, resp_headers): ...
    def validate_text(self, resp_text): ...
    def validate_json(self, resp_json_func): ...
    @property
    def errors(self) -> dict[str, str]: ...
    def __init__(self, status_code=..., headers=..., text=..., json=...) -> None: ...

class ResponseAssertionError(AssertionError): ...

def validator(resp, **kwargs) -> None: ...
