# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/07.agent.utils.ou_action_noise.ipynb.

# %% auto 0
__all__ = ['OUActionNoise']

# %% ../../../nbs/07.agent.utils.ou_action_noise.ipynb 3
import numpy as np

# %% ../../../nbs/07.agent.utils.ou_action_noise.ipynb 4
class OUActionNoise:
    """Ornstein-Uhlenbeck process."""

    def __init__(
        self,
        mean,  # mean of the noise
        std_deviation,  # standard deviation of the noise
        theta=0.15,  # $\theta$ is the rate of mean reversion
        dt=1e-2,  # dt is the time step
        x_initial=None,
    ):  # x_initial is the initial value of x
        self.theta = theta
        self.mean = mean
        self.std_dev = std_deviation
        self.dt = dt
        self.x_initial = x_initial
        self.reset()

    def __call__(self):
        """
        Call the noise.

        Formula taken from [Ornstein-Uhlenbeck](https://www.wikipedia.org/wiki/Ornstein-Uhlenbeck_process).
        """
        x = (
            self.x_prev
            + self.theta * (self.mean - self.x_prev) * self.dt
            + self.std_dev * np.sqrt(self.dt) * np.random.normal(size=self.mean.shape)
        )
        # Store x into x_prev
        # Makes next noise dependent on current one
        self.x_prev = x
        return x

    def reset(self):
        """Reset the Ornstein-Uhlenbeck process."""
        if self.x_initial is not None:
            self.x_prev = self.x_initial
        else:
            self.x_prev = np.zeros_like(self.mean)
