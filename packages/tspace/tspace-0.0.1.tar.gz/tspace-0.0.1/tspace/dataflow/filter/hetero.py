# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/06.dataflow.filter.hetero.ipynb.

# %% auto 0
__all__ = ['T_I', 'T_O', 'HeteroFilter']

# %% ../../../nbs/06.dataflow.filter.hetero.ipynb 3
import abc
from threading import Event
from dataclasses import dataclass
from typing import Optional, TypeVar, Generic

# %% ../../../nbs/06.dataflow.filter.hetero.ipynb 4
from ..pipeline.queue import Pipeline  # type: ignore
from ..pipeline.deque import PipelineDQ  # type: ignore

# %% ../../../nbs/06.dataflow.filter.hetero.ipynb 5
T_I = TypeVar("T_I")
T_O = TypeVar("T_O")

# %% ../../../nbs/06.dataflow.filter.hetero.ipynb 6
@dataclass
class HeteroFilter(abc.ABC, Generic[T_I, T_O]):
    """Hetereofilter is a filter that consumes data from a pipeline and produces data to another pipeline with a different type."""

    def __post_init__(self):
        super().__init__()

    @abc.abstractmethod
    def filter(
        self,
        in_pipeline: PipelineDQ[
            T_I
        ],  # deque[dict[str,str]] for vehicle_interface, Queue[pd.DataFrame] for crunchers
        out_pipeline: Pipeline[T_O],  # output pipeline
        start_event: Optional[Event],  # input event start
        stop_event: Optional[Event],  # input event stop
        interrupt_event: Optional[Event],  # input event interrupt
        flash_event: Optional[Event],  # input event flash
        exit_event: Optional[Event],  # input event exit
    ) -> None:
        """
        consume data into the pipeline, and produce data to the output pipeline
        """
        pass
