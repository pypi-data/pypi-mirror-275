# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/06.dataflow.filter.homo.ipynb.

# %% auto 0
__all__ = ['T', 'HomoFilter']

# %% ../../../nbs/06.dataflow.filter.homo.ipynb 3
import abc
from threading import Event
from dataclasses import dataclass
from typing import Optional, TypeVar, Generic

# %% ../../../nbs/06.dataflow.filter.homo.ipynb 4
from ..pipeline.queue import Pipeline  # type: ignore
from ..pipeline.deque import PipelineDQ  # type: ignore

# %% ../../../nbs/06.dataflow.filter.homo.ipynb 5
T = TypeVar("T")

# %% ../../../nbs/06.dataflow.filter.homo.ipynb 6
@dataclass
class HomoFilter(abc.ABC, Generic[T]):
    """Homoegeneous filter class with the same type for input and output."""

    def __post_init__(self):
        super().__init__()

    @abc.abstractmethod
    def filter(
        self,
        in_pipeline: Pipeline[
            T
        ],  # deque[dict[str,str]] for vehicle_interface, Queue[pd.DataFrame] for crunchers
        out_pipeline: Pipeline[T],  # output pipeline
        start_event: Optional[Event],  #
        stop_event: Optional[Event],
        interrupt_event: Optional[Event],  # input event
        flash_event: Optional[Event],
        exit_event: Optional[Event],
    ) -> None:
        """
        consume data into the pipeline
        """
        pass
