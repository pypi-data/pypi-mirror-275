# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.query_encoder import encode_query
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.not_found_error_body import NotFoundErrorBody
from ..types.test_case import TestCase
from ..types.testcase_deletion_response import TestcaseDeletionResponse
from ..types.unauthenticated_error import UnauthenticatedError
from ..types.unauthorized_error_body import UnauthorizedErrorBody
from .types.testcase_create_params_custom_inputs_value import TestcaseCreateParamsCustomInputsValue
from .types.testcase_create_params_custom_labels_value import TestcaseCreateParamsCustomLabelsValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestcaseClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        testset_id: int,
        *,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]] = OMIT,
        custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestCase:
        """
        Create a new Testcase

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to create the Testcase in.

        user_query : typing.Optional[str]
            The user query to be executed.

        context : typing.Optional[str]

        ideal : typing.Optional[str]

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.create(
            testset_id=1,
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if custom_inputs is not OMIT:
            _request["custom_inputs"] = custom_inputs
        if custom_labels is not OMIT:
            _request["custom_labels"] = custom_labels
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/testset/{jsonable_encoder(testset_id)}/testcase"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(TestCase, construct_type(type_=TestCase, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestCase:
        """
        Retrieve Testcase data

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to retrieve.

        testset_id : int
            The ID of the Testset to retrieve the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.get(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(TestCase, construct_type(type_=TestCase, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestcaseDeletionResponse:
        """
        Delete a Testcase

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to delete.

        testset_id : int
            The ID of the Testset to delete the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestcaseDeletionResponse
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.delete(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            method="DELETE",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(TestcaseDeletionResponse, construct_type(type_=TestcaseDeletionResponse, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestcaseClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        testset_id: int,
        *,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]] = OMIT,
        custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestCase:
        """
        Create a new Testcase

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to create the Testcase in.

        user_query : typing.Optional[str]
            The user query to be executed.

        context : typing.Optional[str]

        ideal : typing.Optional[str]

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testcase.create(
            testset_id=1,
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if custom_inputs is not OMIT:
            _request["custom_inputs"] = custom_inputs
        if custom_labels is not OMIT:
            _request["custom_labels"] = custom_labels
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/testset/{jsonable_encoder(testset_id)}/testcase"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(TestCase, construct_type(type_=TestCase, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestCase:
        """
        Retrieve Testcase data

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to retrieve.

        testset_id : int
            The ID of the Testset to retrieve the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testcase.get(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(TestCase, construct_type(type_=TestCase, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestcaseDeletionResponse:
        """
        Delete a Testcase

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to delete.

        testset_id : int
            The ID of the Testset to delete the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestcaseDeletionResponse
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testcase.delete(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="DELETE",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(TestcaseDeletionResponse, construct_type(type_=TestcaseDeletionResponse, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
