# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.query_encoder import encode_query
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.not_found_error_body import NotFoundErrorBody
from ..types.testrecord import Testrecord
from ..types.unauthenticated_error import UnauthenticatedError
from ..types.unauthorized_error_body import UnauthorizedErrorBody
from .types.testrecord_create_params_custom_inputs_value import TestrecordCreateParamsCustomInputsValue
from .types.testrecord_create_params_custom_labels_value import TestrecordCreateParamsCustomLabelsValue
from .types.testrecord_create_params_custom_outputs_value import TestrecordCreateParamsCustomOutputsValue
from .types.testrecord_create_params_model_debug_info_value import TestrecordCreateParamsModelDebugInfoValue
from .types.testrecord_create_params_model_params_value import TestrecordCreateParamsModelParamsValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestrecordClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self, testrecord_id: int, run_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Testrecord:
        """
        Retrieve Testrecord metadata

        Parameters
        ----------
        testrecord_id : int

        run_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testrecord
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testrecord.get(
            testrecord_id=1,
            run_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"v1/run/{jsonable_encoder(run_id)}/testrecord/{jsonable_encoder(testrecord_id)}",
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testrecord, construct_type(type_=Testrecord, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        run_id: int,
        *,
        testset_id: typing.Optional[int] = OMIT,
        testcase_id: typing.Optional[int] = OMIT,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        response: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomInputsValue]]
        ] = OMIT,
        custom_outputs: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomOutputsValue]]
        ] = OMIT,
        custom_labels: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomLabelsValue]]
        ] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        model_params: typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsModelParamsValue]]] = OMIT,
        model_debug_info: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsModelDebugInfoValue]]
        ] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testrecord:
        """
        Create a new Testrecord

        Parameters
        ----------
        run_id : int
            The ID of the Run to create the Testrecord in.

        testset_id : typing.Optional[int]

        testcase_id : typing.Optional[int]

        user_query : typing.Optional[str]

        context : typing.Optional[str]

        response : typing.Optional[str]

        ideal : typing.Optional[str]

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomInputsValue]]]

        custom_outputs : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomOutputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomLabelsValue]]]

        prompt : typing.Optional[str]

        model_params : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsModelParamsValue]]]

        model_debug_info : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsModelDebugInfoValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testrecord
            Successful Response

        Examples
        --------
        from scorecard.client import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testrecord.create(
            run_id=1,
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if testset_id is not OMIT:
            _request["testset_id"] = testset_id
        if testcase_id is not OMIT:
            _request["testcase_id"] = testcase_id
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if response is not OMIT:
            _request["response"] = response
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if custom_inputs is not OMIT:
            _request["custom_inputs"] = custom_inputs
        if custom_outputs is not OMIT:
            _request["custom_outputs"] = custom_outputs
        if custom_labels is not OMIT:
            _request["custom_labels"] = custom_labels
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if model_params is not OMIT:
            _request["model_params"] = model_params
        if model_debug_info is not OMIT:
            _request["model_debug_info"] = model_debug_info
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/run/{jsonable_encoder(run_id)}/testrecord"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testrecord, construct_type(type_=Testrecord, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestrecordClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self, testrecord_id: int, run_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Testrecord:
        """
        Retrieve Testrecord metadata

        Parameters
        ----------
        testrecord_id : int

        run_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testrecord
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testrecord.get(
            testrecord_id=1,
            run_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"v1/run/{jsonable_encoder(run_id)}/testrecord/{jsonable_encoder(testrecord_id)}",
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testrecord, construct_type(type_=Testrecord, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        run_id: int,
        *,
        testset_id: typing.Optional[int] = OMIT,
        testcase_id: typing.Optional[int] = OMIT,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        response: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomInputsValue]]
        ] = OMIT,
        custom_outputs: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomOutputsValue]]
        ] = OMIT,
        custom_labels: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomLabelsValue]]
        ] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        model_params: typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsModelParamsValue]]] = OMIT,
        model_debug_info: typing.Optional[
            typing.Dict[str, typing.Optional[TestrecordCreateParamsModelDebugInfoValue]]
        ] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testrecord:
        """
        Create a new Testrecord

        Parameters
        ----------
        run_id : int
            The ID of the Run to create the Testrecord in.

        testset_id : typing.Optional[int]

        testcase_id : typing.Optional[int]

        user_query : typing.Optional[str]

        context : typing.Optional[str]

        response : typing.Optional[str]

        ideal : typing.Optional[str]

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomInputsValue]]]

        custom_outputs : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomOutputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsCustomLabelsValue]]]

        prompt : typing.Optional[str]

        model_params : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsModelParamsValue]]]

        model_debug_info : typing.Optional[typing.Dict[str, typing.Optional[TestrecordCreateParamsModelDebugInfoValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testrecord
            Successful Response

        Examples
        --------
        from scorecard.client import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )
        await client.testrecord.create(
            run_id=1,
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if testset_id is not OMIT:
            _request["testset_id"] = testset_id
        if testcase_id is not OMIT:
            _request["testcase_id"] = testcase_id
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if response is not OMIT:
            _request["response"] = response
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if custom_inputs is not OMIT:
            _request["custom_inputs"] = custom_inputs
        if custom_outputs is not OMIT:
            _request["custom_outputs"] = custom_outputs
        if custom_labels is not OMIT:
            _request["custom_labels"] = custom_labels
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if model_params is not OMIT:
            _request["model_params"] = model_params
        if model_debug_info is not OMIT:
            _request["model_debug_info"] = model_debug_info
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/run/{jsonable_encoder(run_id)}/testrecord"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return typing.cast(Testrecord, construct_type(type_=Testrecord, object_=_response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(
                typing.cast(UnauthenticatedError, construct_type(type_=UnauthenticatedError, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                typing.cast(UnauthorizedErrorBody, construct_type(type_=UnauthorizedErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 404:
            raise NotFoundError(
                typing.cast(NotFoundErrorBody, construct_type(type_=NotFoundErrorBody, object_=_response.json()))  # type: ignore
            )
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
