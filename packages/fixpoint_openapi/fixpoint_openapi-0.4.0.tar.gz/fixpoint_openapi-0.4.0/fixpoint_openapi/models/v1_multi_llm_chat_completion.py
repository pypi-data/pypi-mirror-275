# coding: utf-8

"""
    fixpoint/v1/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fixpoint_openapi.models.v1_chat_completion import V1ChatCompletion
from fixpoint_openapi.models.v1_mode import V1Mode
from fixpoint_openapi.models.v1_tracing import V1Tracing
from typing import Optional, Set
from typing_extensions import Self

class V1MultiLLMChatCompletion(BaseModel):
    """
    V1MultiLLMChatCompletion
    """ # noqa: E501
    id: StrictStr = Field(description="This is the ID of the multi-LLM chat completion. It is also the LLM log ID/name of the input/output log for the primary LLM (aka the completion we return to the client).  If we failed to log the request but succeeded in making the chat completion, we will still return a success, but the \"id\" will be empty. In that case, you can use the primary_external_id to find the logged completions.")
    primary_external_id: Optional[StrictStr] = Field(default=None, description="The external ID of the first model in the multi-LLM inference request. This is the primary model, whose response we return to the client. We can only return the first model ID because other model inference occurs asynchronously.", alias="primaryExternalId")
    model_names: List[StrictStr] = Field(alias="modelNames")
    display_model: Optional[StrictInt] = Field(default=None, description="The index of the model displayed.", alias="displayModel")
    tracing: Optional[V1Tracing] = None
    completion: V1ChatCompletion
    mode: V1Mode
    __properties: ClassVar[List[str]] = ["id", "primaryExternalId", "modelNames", "displayModel", "tracing", "completion", "mode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1MultiLLMChatCompletion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tracing
        if self.tracing:
            _dict['tracing'] = self.tracing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completion
        if self.completion:
            _dict['completion'] = self.completion.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1MultiLLMChatCompletion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "primaryExternalId": obj.get("primaryExternalId"),
            "modelNames": obj.get("modelNames"),
            "displayModel": obj.get("displayModel"),
            "tracing": V1Tracing.from_dict(obj["tracing"]) if obj.get("tracing") is not None else None,
            "completion": V1ChatCompletion.from_dict(obj["completion"]) if obj.get("completion") is not None else None,
            "mode": obj.get("mode")
        })
        return _obj


