# coding: utf-8

"""
    fixpoint/v1/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fixpoint_openapi.models.v1_fine_tune_status import V1FineTuneStatus
from fixpoint_openapi.models.v1_hyperparameters import V1Hyperparameters
from typing import Optional, Set
from typing_extensions import Self

class V1FineTuneJob(BaseModel):
    """
    V1FineTuneJob
    """ # noqa: E501
    id: Optional[StrictStr] = None
    set_id: Optional[StrictStr] = Field(default=None, alias="setId")
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    model_name: Optional[StrictStr] = Field(default=None, alias="modelName")
    status: Optional[V1FineTuneStatus] = None
    hyperparameters: Optional[V1Hyperparameters] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    secret_alias: Optional[StrictStr] = Field(default=None, alias="secretAlias")
    fine_tuned_model: Optional[StrictStr] = Field(default=None, alias="fineTunedModel")
    provider_job_id: Optional[StrictStr] = Field(default=None, alias="providerJobId")
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    ended_at: Optional[datetime] = Field(default=None, alias="endedAt")
    __properties: ClassVar[List[str]] = ["id", "setId", "datasetId", "modelName", "status", "hyperparameters", "createdAt", "updatedAt", "secretAlias", "fineTunedModel", "providerJobId", "startedAt", "endedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1FineTuneJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hyperparameters
        if self.hyperparameters:
            _dict['hyperparameters'] = self.hyperparameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1FineTuneJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "setId": obj.get("setId"),
            "datasetId": obj.get("datasetId"),
            "modelName": obj.get("modelName"),
            "status": obj.get("status"),
            "hyperparameters": V1Hyperparameters.from_dict(obj["hyperparameters"]) if obj.get("hyperparameters") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "secretAlias": obj.get("secretAlias"),
            "fineTunedModel": obj.get("fineTunedModel"),
            "providerJobId": obj.get("providerJobId"),
            "startedAt": obj.get("startedAt"),
            "endedAt": obj.get("endedAt")
        })
        return _obj


