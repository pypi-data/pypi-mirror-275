# coding: utf-8

"""
    fixpoint/v1/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fixpoint_openapi.models.v1_open_ai_chat_input_log import V1OpenAIChatInputLog
from fixpoint_openapi.models.v1_open_ai_chat_output_log import V1OpenAIChatOutputLog
from fixpoint_openapi.models.v1_tracing import V1Tracing
from typing import Optional, Set
from typing_extensions import Self

class V1OpenAIChatLog(BaseModel):
    """
    V1OpenAIChatLog
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name identifer of the chat log.")
    model_name: Optional[StrictStr] = Field(default=None, description="The model name that produced the log.", alias="modelName")
    app_name: Optional[StrictStr] = Field(default=None, alias="appName")
    data_source_name: Optional[StrictStr] = Field(default=None, alias="dataSourceName")
    tracing: Optional[V1Tracing] = None
    input_log: Optional[V1OpenAIChatInputLog] = Field(default=None, alias="inputLog")
    output_log: Optional[V1OpenAIChatOutputLog] = Field(default=None, alias="outputLog")
    created_at: Optional[datetime] = Field(default=None, description="The created_at timestamp is the same as the input_log.created_at timestamp.", alias="createdAt")
    __properties: ClassVar[List[str]] = ["name", "modelName", "appName", "dataSourceName", "tracing", "inputLog", "outputLog", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1OpenAIChatLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tracing
        if self.tracing:
            _dict['tracing'] = self.tracing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_log
        if self.input_log:
            _dict['inputLog'] = self.input_log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_log
        if self.output_log:
            _dict['outputLog'] = self.output_log.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1OpenAIChatLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "modelName": obj.get("modelName"),
            "appName": obj.get("appName"),
            "dataSourceName": obj.get("dataSourceName"),
            "tracing": V1Tracing.from_dict(obj["tracing"]) if obj.get("tracing") is not None else None,
            "inputLog": V1OpenAIChatInputLog.from_dict(obj["inputLog"]) if obj.get("inputLog") is not None else None,
            "outputLog": V1OpenAIChatOutputLog.from_dict(obj["outputLog"]) if obj.get("outputLog") is not None else None,
            "createdAt": obj.get("createdAt")
        })
        return _obj


