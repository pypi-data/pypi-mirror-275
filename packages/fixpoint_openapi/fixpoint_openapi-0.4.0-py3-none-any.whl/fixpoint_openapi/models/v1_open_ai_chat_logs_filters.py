# coding: utf-8

"""
    fixpoint/v1/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from fixpoint_openapi.models.v1_attribute_filters import V1AttributeFilters
from fixpoint_openapi.models.v1_dataset_filters import V1DatasetFilters
from fixpoint_openapi.models.v1_like_filter import V1LikeFilter
from fixpoint_openapi.models.v1_relative_date_time_filters import V1RelativeDateTimeFilters
from fixpoint_openapi.models.v1_tracing_filters import V1TracingFilters
from typing import Optional, Set
from typing_extensions import Self

class V1OpenAIChatLogsFilters(BaseModel):
    """
    V1OpenAIChatLogsFilters
    """ # noqa: E501
    relative_datetime_filters: Optional[V1RelativeDateTimeFilters] = Field(default=None, alias="relativeDatetimeFilters")
    userfeedback_filter: Optional[V1LikeFilter] = Field(default=None, alias="userfeedbackFilter")
    attribute_filters: Optional[V1AttributeFilters] = Field(default=None, alias="attributeFilters")
    dataset_filters: Optional[V1DatasetFilters] = Field(default=None, alias="datasetFilters")
    tracing_filters: Optional[V1TracingFilters] = Field(default=None, alias="tracingFilters")
    __properties: ClassVar[List[str]] = ["relativeDatetimeFilters", "userfeedbackFilter", "attributeFilters", "datasetFilters", "tracingFilters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1OpenAIChatLogsFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of relative_datetime_filters
        if self.relative_datetime_filters:
            _dict['relativeDatetimeFilters'] = self.relative_datetime_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of userfeedback_filter
        if self.userfeedback_filter:
            _dict['userfeedbackFilter'] = self.userfeedback_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribute_filters
        if self.attribute_filters:
            _dict['attributeFilters'] = self.attribute_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dataset_filters
        if self.dataset_filters:
            _dict['datasetFilters'] = self.dataset_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tracing_filters
        if self.tracing_filters:
            _dict['tracingFilters'] = self.tracing_filters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1OpenAIChatLogsFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "relativeDatetimeFilters": V1RelativeDateTimeFilters.from_dict(obj["relativeDatetimeFilters"]) if obj.get("relativeDatetimeFilters") is not None else None,
            "userfeedbackFilter": V1LikeFilter.from_dict(obj["userfeedbackFilter"]) if obj.get("userfeedbackFilter") is not None else None,
            "attributeFilters": V1AttributeFilters.from_dict(obj["attributeFilters"]) if obj.get("attributeFilters") is not None else None,
            "datasetFilters": V1DatasetFilters.from_dict(obj["datasetFilters"]) if obj.get("datasetFilters") is not None else None,
            "tracingFilters": V1TracingFilters.from_dict(obj["tracingFilters"]) if obj.get("tracingFilters") is not None else None
        })
        return _obj


