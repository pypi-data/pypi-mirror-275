# Generated from CNTR.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,124,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,3,9,81,8,9,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,2,1,0,945,
        969,1,0,48,57,124,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,1,0,0,0,7,67,1,0,0,
        0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,1,0,0,0,15,75,1,0,0,0,17,77,1,
        0,0,0,19,80,1,0,0,0,21,84,1,0,0,0,23,86,1,0,0,0,25,88,1,0,0,0,27,
        90,1,0,0,0,29,92,1,0,0,0,31,94,1,0,0,0,33,96,1,0,0,0,35,98,1,0,0,
        0,37,100,1,0,0,0,39,102,1,0,0,0,41,104,1,0,0,0,43,106,1,0,0,0,45,
        108,1,0,0,0,47,110,1,0,0,0,49,112,1,0,0,0,51,114,1,0,0,0,53,116,
        1,0,0,0,55,118,1,0,0,0,57,120,1,0,0,0,59,122,1,0,0,0,61,62,7,0,0,
        0,62,2,1,0,0,0,63,64,5,885,0,0,64,4,1,0,0,0,65,66,5,11496,0,0,66,
        6,1,0,0,0,67,68,5,65533,0,0,68,8,1,0,0,0,69,70,5,175,0,0,70,10,1,
        0,0,0,71,72,5,987,0,0,72,12,1,0,0,0,73,74,5,991,0,0,74,14,1,0,0,
        0,75,76,5,983,0,0,76,16,1,0,0,0,77,78,5,57345,0,0,78,18,1,0,0,0,
        79,81,5,13,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,5,
        10,0,0,83,20,1,0,0,0,84,85,5,47,0,0,85,22,1,0,0,0,86,87,5,8900,0,
        0,87,24,1,0,0,0,88,89,5,125,0,0,89,26,1,0,0,0,90,91,5,92,0,0,91,
        28,1,0,0,0,92,93,5,94,0,0,93,30,1,0,0,0,94,95,5,123,0,0,95,32,1,
        0,0,0,96,97,5,38,0,0,97,34,1,0,0,0,98,99,5,42,0,0,99,36,1,0,0,0,
        100,101,7,1,0,0,101,38,1,0,0,0,102,103,5,37,0,0,103,40,1,0,0,0,104,
        105,5,36,0,0,105,42,1,0,0,0,106,107,5,32,0,0,107,44,1,0,0,0,108,
        109,5,126,0,0,109,46,1,0,0,0,110,111,5,61,0,0,111,48,1,0,0,0,112,
        113,5,45,0,0,113,50,1,0,0,0,114,115,5,43,0,0,115,52,1,0,0,0,116,
        117,5,124,0,0,117,54,1,0,0,0,118,119,5,120,0,0,119,56,1,0,0,0,120,
        121,5,97,0,0,121,58,1,0,0,0,122,123,5,98,0,0,123,60,1,0,0,0,2,0,
        80,0
    ]

class CNTRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ALPHA_TO_OMEGA = 1
    LOWER_NUMERAL_SIGN = 2
    COPTIC_TAU_RO = 3
    REPLACEMENT = 4
    MACRON = 5
    STIGMA = 6
    KOPPA = 7
    KAI = 8
    MOU = 9
    NEWLINE = 10
    FORWARD_SLASH = 11
    DIAMOND = 12
    CLOSE_CURLY = 13
    BACKSLASH = 14
    CIRCUMFLEX = 15
    OPEN_CURLY = 16
    AMPERSAND = 17
    ASTERISK = 18
    DIGIT = 19
    PERCENT = 20
    DOLLAR = 21
    SPACE = 22
    TILDE = 23
    EQUAL = 24
    MINUS = 25
    PLUS = 26
    PIPE = 27
    X = 28
    A = 29
    B = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\u0375'", "'\\u2CE8'", "'\\uFFFD'", "'\\u00AF'", "'\\u03DB'", 
            "'\\u03DF'", "'\\u03D7'", "'\\uE001'", "'/'", "'\\u22C4'", "'}'", 
            "'\\'", "'^'", "'{'", "'&'", "'*'", "'%'", "'$'", "' '", "'~'", 
            "'='", "'-'", "'+'", "'|'", "'x'", "'a'", "'b'" ]

    symbolicNames = [ "<INVALID>",
            "ALPHA_TO_OMEGA", "LOWER_NUMERAL_SIGN", "COPTIC_TAU_RO", "REPLACEMENT", 
            "MACRON", "STIGMA", "KOPPA", "KAI", "MOU", "NEWLINE", "FORWARD_SLASH", 
            "DIAMOND", "CLOSE_CURLY", "BACKSLASH", "CIRCUMFLEX", "OPEN_CURLY", 
            "AMPERSAND", "ASTERISK", "DIGIT", "PERCENT", "DOLLAR", "SPACE", 
            "TILDE", "EQUAL", "MINUS", "PLUS", "PIPE", "X", "A", "B" ]

    ruleNames = [ "ALPHA_TO_OMEGA", "LOWER_NUMERAL_SIGN", "COPTIC_TAU_RO", 
                  "REPLACEMENT", "MACRON", "STIGMA", "KOPPA", "KAI", "MOU", 
                  "NEWLINE", "FORWARD_SLASH", "DIAMOND", "CLOSE_CURLY", 
                  "BACKSLASH", "CIRCUMFLEX", "OPEN_CURLY", "AMPERSAND", 
                  "ASTERISK", "DIGIT", "PERCENT", "DOLLAR", "SPACE", "TILDE", 
                  "EQUAL", "MINUS", "PLUS", "PIPE", "X", "A", "B" ]

    grammarFileName = "CNTR.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


