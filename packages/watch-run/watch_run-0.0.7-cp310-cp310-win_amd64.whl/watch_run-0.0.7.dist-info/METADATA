Metadata-Version: 2.1
Name: watch-run
Version: 0.0.7
Summary: watch_run project
Home-page: UNKNOWN
License: UNKNOWN
Platform: UNKNOWN
Description-Content-Type: text/markdown
Requires-Dist: cryptography

# watch_run Project

This is a plugin only for Python that enables easy monitoring of parameter changes without needing to modify the source code.

What is particularly noteworthy is that it allows for monitoring of parameter changes through class objects in a production environment without affecting the runtime speed(just like print). 

It is especially useful for streamlining the execution process and monitoring for bugs in a production environment.

## Supported Platforms Now

- **Operating Systems**
  - macOS
  - Windows

- **Python Versions**
  - Python 3.7
  - Python 3.8
  - Python 3.9
  - Python 3.10
  - Python 3.11
  - Python 3.12


## Installation

```sh
pip install watch_run
```

## Usage

```sh
watch_run main.py
```
Run 'watch_run main.py' in the same place where you previously run 'python3 main.py'. This is the only command.


Tkinter is needed.
Running the 'watch_run main.py' command will launch a simple user interface:
Button Panel
Add Class

    Click this button to add a new class entry. The new entry will include input fields for class name, variable names, list names, and instance names.
    Each entry can only have one class name, while variable names, list names, and instance names can be multiple, separated by commas.
    If you want to track regular variables instead of class objects, you don't need to fill in the class name.
    Instance names refer to the variable names used when creating class instances, used for filtering. For example, aaa = classA() and bbb = classA(), if you enter aaa in the instance name field, bbb will not be monitored.

Run

    Start running the program. During execution, settrace will be automatically started, and the previous terminal will be bound for printing.
    If you are on a Mac system, you can use watch_run main.py & to continue allowing the terminal to execute new commands.

Add Stop Line

    Click this button and select the Python file path and enter one or more line numbers (separated by commas), then click enable.
    When the thread executes to this line, it will stop settrace and resume normal running speed, no longer monitoring regular variables, but still monitoring class objects. This monitoring does not affect the running speed.

Save Data

    Click this button to save the current configuration data. Usually, you don't need it because the data is automatically saved when you click the Run button.

Open History to Edit

    Click this button to open and edit the history record file of the monitoring targets.

Show Trace Result (time sequence)

    Click this button to display monitoring results, including value changes and the call stack. This is the raw log file sorted by record time, and it is automatically cleared each time the program runs.

Show Trace Result (instances sequence)

    Click this button to read the raw log file and organize the information for each monitored object. The monitoring results are displayed in an instance-sorted manner to better showcase each monitored object.

Print in Terminal (instances sequence)

    Click this button to print the instance-sorted monitoring results in the terminal.

Clear Info Before

    Click this button to clear the monitoring information recorded during this run, but keep the list of monitored objects so that subsequent monitoring information is highlighted.

Buy Verification Serial

    Click this button to see the computer encrypted serial.
    Provide this encrypted serial to purchase a verification serial. Each verification serial can only be used on a specific computer.

Attention

    Click this button to view notes and usage tips.

## Features

Monitor Ordinary Variables: Free of charge. Provides monitoring at 10-15 times the normal runtime speed.

Monitor through Class Objects: Paid feature. Enables monitoring in a production environment without impacting performance.
You can purchase this feature through the application interface.

## License

This project uses the following third-party libraries:
Cryptography library (https://cryptography.io/) which is licensed under the Apache License 2.0.

Apache License
Version 2.0, January 2004
http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
...

(Include the full text of the Apache License 2.0 here)





